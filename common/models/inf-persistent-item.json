{
  "name": "InfPersistentItem",
  "base": "InfEntity",
  "idInjection": false,
  "options": {
    "validateUpsert": true,
    "postgresql": {
      "schema": "information",
      "table": "v_persistent_item"
    }
  },
  "mixins": {
    "SetupRemoteMethods": {
      "disableAllExcept": []
    }
  },
  "properties": {
    "fk_class": {
      "type": "number",
      "required": true
    }
  },
  "validations": [],
  "relations": {
    "pi_roles": {
      "type": "hasMany",
      "model": "InfRole",
      "foreignKey": "fk_entity",
      "primaryKey": "pk_entity"
    },
    "domain_entity_associations": {
      "type": "hasMany",
      "model": "InfEntityAssociation",
      "foreignKey": "fk_info_domain",
      "primaryKey": "pk_entity"
    },
    "range_entity_associations": {
      "type": "hasMany",
      "model": "InfEntityAssociation",
      "foreignKey": "fk_info_domain",
      "primaryKey": "pk_entity"
    },
    "text_properties": {
      "type": "hasMany",
      "model": "InfTextProperty",
      "foreignKey": "fk_concerned_entity",
      "primaryKey": "pk_entity"
    },
    "dfh_class": {
      "type": "belongsTo",
      "model": "DfhClass",
      "foreignKey": "fk_class",
      "primaryKey": "dfh_pk_class"
    }
  },
  "acls": [
    {
      "accessType": "*",
      "principalType": "ROLE",
      "principalId": "$everyone",
      "permission": "DENY"
    },
    {
      "principalType": "ROLE",
      "principalId": "$everyone",
      "permission": "ALLOW",
      "property": [
        "nestedObjectOfRepo",
        "graphsOfRepo"
      ]
    },
    {
      "principalType": "ROLE",
      "principalId": "project_member",
      "permission": "ALLOW",
      "property": [
        "typeOfProject",
        "typesOfProject",
        "typesOfClassesAndProject",
        "typesOfClassAndProject",
        "typesOfNamespaceNested",
        "typesOfNamespaceClassAndProject",
        "typesByClassAndProject",
        "nestedObjectOfProject",
        "typeNested",
        "addToProject",
        "graphsOfProject",
        "flatObjectOfProject",
        "ownProperties",
        "findOrCreatePeIt",
        "findOrCreateInfPersistentItems"
      ]
    }
  ],
  "methods": {
    "findOrCreateInfPersistentItems": {
      "accepts": [
        {
          "arg": "pk_project",
          "type": "number",
          "required": true,
          "description": "Pk of the project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "data",
          "type": [
            "InfPersistentItem"
          ],
          "required": true,
          "description": "data",
          "http": {
            "source": "body"
          }
        },
        {
          "arg": "ctx",
          "type": "object",
          "http": {
            "source": "context"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": [
          "InfPersistentItem"
        ],
        "root": true
      },
      "description": "Find or create many information persistent items.",
      "http": {
        "path": "/find-or-create-many",
        "verb": "post"
      }
    },
    "ownProperties": {
      "accepts": [
        {
          "arg": "pkProject",
          "type": "number",
          "required": true,
          "description": "Pk of the project.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pkEntity",
          "type": "number",
          "required": true,
          "description": "Pk of the entity.",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "object",
        "root": true
      },
      "description": "Get only miminal properties of persistent item.",
      "http": {
        "path": "/own-properties",
        "verb": "get"
      }
    },
    "flatObjectOfProject": {
      "accepts": [
        {
          "arg": "pkProject",
          "type": "number",
          "required": true,
          "description": "Pk of the project.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pkEntity",
          "type": "number",
          "required": true,
          "description": "Pk of the entity.",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "object",
        "root": true
      },
      "description": "Get a flat object of entity.",
      "http": {
        "path": "/flat-object",
        "verb": "get"
      }
    },
    "typesOfProject": {
      "accepts": [
        {
          "arg": "pkProject",
          "type": "number",
          "required": true,
          "description": "Pk of the project.",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Get a minimal nested object of all types in the project.",
      "http": {
        "path": "/types-of-project",
        "verb": "get"
      }
    },
    "typeOfProject": {
      "accepts": [
        {
          "arg": "pkProject",
          "type": "number",
          "required": true,
          "description": "Pk of the project.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pkType",
          "type": "number",
          "required": true,
          "description": "Pk of the type.",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Get a minimal nested object of the type in the project.",
      "http": {
        "path": "/type-of-project",
        "verb": "get"
      }
    },
    "graphsOfProject": {
      "accepts": [
        {
          "arg": "pkProject",
          "type": "number",
          "required": true,
          "description": "Pk of the project.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pkEntities",
          "type": "array",
          "required": true,
          "description": "Primary Keys of the persistent items (array of pk_entity)",
          "http": {
            "source": "body"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Get e nested object of all information about the persistent in the project version.",
      "http": {
        "path": "/graphs-of-project",
        "verb": "post"
      }
    },
    "graphsOfRepo": {
      "accepts": [
        {
          "arg": "pkEntities",
          "type": "array",
          "required": true,
          "description": "Primary Keys of the persistent items (array of pk_entity)",
          "http": {
            "source": "body"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Get e nested object of all information about the persistent item with the community favorites.",
      "http": {
        "path": "/graphs-of-repo",
        "verb": "post"
      }
    },
    "nestedObjectOfProject": {
      "accepts": [
        {
          "arg": "pkProject",
          "type": "number",
          "required": true,
          "description": "Project id",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pkEntity",
          "type": "number",
          "required": true,
          "description": "Primary Key of the persistent item (pk_entity)",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Get e nested object of all information about the persistent item of the project.",
      "http": {
        "path": "/nested-object-of-project",
        "verb": "get"
      }
    },
    "changePeItProjectRelation": {
      "accepts": [
        {
          "arg": "projectId",
          "type": "number",
          "required": true,
          "description": "Id of the project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "isInProject",
          "type": "boolean",
          "required": true,
          "description": "Include or exclude from project.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "data",
          "type": "InfPersistentItem",
          "required": true,
          "description": "data",
          "http": {
            "source": "body"
          }
        },
        {
          "arg": "ctx",
          "type": "object",
          "http": {
            "source": "context"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Add a nested object of a InfPersistentItem to the project.",
      "http": {
        "path": "/change-project-relation",
        "verb": "post"
      }
    },
    "findOrCreatePeIt": {
      "accepts": [
        {
          "arg": "pkProject",
          "type": "number",
          "required": true,
          "description": "Id of the project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "data",
          "type": "InfPersistentItem",
          "required": true,
          "description": "data",
          "http": {
            "source": "body"
          }
        },
        {
          "arg": "ctx",
          "type": "object",
          "http": {
            "source": "context"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Find or create a InfPersistentItem.",
      "http": {
        "path": "/findOrCreate",
        "verb": "post"
      }
    },
    "findOrCreateType": {
      "accepts": [
        {
          "arg": "pk_project",
          "type": "number",
          "required": true,
          "description": "Id of the project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pk_namespace",
          "type": "number",
          "required": true,
          "description": "Id of the project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "data",
          "type": "InfPersistentItem",
          "required": true,
          "description": "data",
          "http": {
            "source": "body"
          }
        },
        {
          "arg": "ctx",
          "type": "object",
          "http": {
            "source": "context"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Find or create a InfPersistentItem.",
      "http": {
        "path": "/find-or-create-type",
        "verb": "post"
      }
    },
    "nestedObjectOfRepo": {
      "accepts": [
        {
          "arg": "pkEntity",
          "type": "number",
          "required": false,
          "description": "Primary Key of the persistent item (pk_entity)",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Get e nested object of all information about the persistent item with the community favorites.",
      "http": {
        "path": "/nested-object-of-repo",
        "verb": "get"
      }
    },
    "searchInProject": {
      "accepts": [
        {
          "arg": "projectId",
          "type": "number",
          "required": true,
          "description": "Project id",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "searchString",
          "type": "string",
          "required": false,
          "description": "Search String",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pkClasses",
          "type": "array",
          "required": false,
          "description": "Classes for which the search will be performed.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "limit",
          "type": "number",
          "required": false,
          "description": "Max. number of results per page [default=10; max=200]",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "page",
          "type": "number",
          "required": true,
          "description": "Page of pagination",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "object",
        "root": true
      },
      "description": "Find persistent items of a project.",
      "http": {
        "path": "/search-in-project",
        "verb": "get"
      }
    },
    "searchInRepo": {
      "accepts": [
        {
          "arg": "searchString",
          "type": "string",
          "required": true,
          "description": "Search String",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "limit",
          "type": "number",
          "required": false,
          "description": "Max. number of results per page [default=10; max=200]",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "page",
          "type": "number",
          "required": true,
          "description": "Page of pagination",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pk_class",
          "type": "number",
          "required": true,
          "description": "Primary Key of the Class you want to filter for. E.g. 363 for Geographical Place.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pkNamespace",
          "type": "number",
          "required": false,
          "description": "Primary Key of the Namespace you want to filter an Instanace of E55 Type, for e.g. 364 for Geographical place type in Geovistory Ongoing Namespace.",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "object",
        "root": true
      },
      "description": "Find persistent items of a project.",
      "http": {
        "path": "/search-in-repo",
        "verb": "get"
      }
    },
    "typesOfNamespaceClassAndProject": {
      "accepts": [
        {
          "arg": "pk_namespace",
          "type": "string",
          "required": true,
          "description": "Primary Key of Namespace",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pk_project",
          "type": "number",
          "required": true,
          "description": "Primary Key of Project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pk_typed_class",
          "type": "number",
          "required": true,
          "description": "Primary Key of Typed Class (e.g. pk of Geographical Place to get Geographical Place Types)",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "persistent_items",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Find types of given namespace, class and project.",
      "http": {
        "path": "/types-of-namespace-class-and-project",
        "verb": "get"
      }
    },
    "typesByClassAndProject": {
      "accepts": [
        {
          "arg": "pk_project",
          "type": "number",
          "required": true,
          "description": "Primary Key of Project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pk_class",
          "type": "number",
          "required": true,
          "description": "Primary Key of the Type Class (e.g. pk of Geographical Place Type)",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "persistent_items",
        "type": [
          "InfPersistentItem"
        ],
        "root": true
      },
      "description": "Find types by class and project. E.g. get the types for the class 'histC9 Geographical place type' (pk_class=364) used in project (pk_project=123)",
      "http": {
        "path": "/types-by-class-and-project",
        "verb": "get"
      }
    },
    "typesOfClassAndProject": {
      "accepts": [
        {
          "arg": "pk_project",
          "type": "number",
          "required": true,
          "description": "Primary Key of Project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pk_typed_class",
          "type": "number",
          "required": true,
          "description": "Primary Key of Typed Class (e.g. pk of Geographical Place to get Geographical Place Types)",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "persistent_items",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Find types of typed class and project. E.g. get the types for the class 'histC8 Geographical Place' (pk_typed_class=363) used in project (pk_project=123)",
      "http": {
        "path": "/types-of-class-and-project",
        "verb": "get"
      }
    },
    "typesOfClassesAndProject": {
      "accepts": [
        {
          "arg": "pk_project",
          "type": "number",
          "required": true,
          "description": "Primary Key of Project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pk_typed_classes",
          "type": [
            "number"
          ],
          "required": true,
          "description": "Primary Keyes of Typed Classes (e.g. pk of Geographical Place to get Geographical Place Types)",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "persistent_items",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Find types of typed class and project. E.g. get the types for the class 'histC8 Geographical Place' (pk_typed_class=363) used in project (pk_project=123)",
      "http": {
        "path": "/types-of-classes-and-project",
        "verb": "get"
      }
    },
    "typesOfNamespaceNested": {
      "accepts": [
        {
          "arg": "pk_namespace",
          "type": "string",
          "required": true,
          "description": "Primary Key of Namespace",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pk_project",
          "type": "number",
          "required": true,
          "description": "Primary Key of Project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pk_entity",
          "type": "number",
          "required": true,
          "description": "Primary Key of the type. Provide this if you want to query one specific type.",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "persistent_items",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Find types of given namespace, class and project.",
      "http": {
        "path": "/types-of-namespace-nested",
        "verb": "get"
      }
    },
    "typeNested": {
      "accepts": [
        {
          "arg": "pk_project",
          "type": "number",
          "required": true,
          "description": "Primary Key of Project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pk_entity",
          "type": "number",
          "required": true,
          "description": "Primary Key of the type. Provide this if you want to query one specific type.",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "persistent_items",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Find one type by pk_entity with appellations and text properties.",
      "http": {
        "path": "/type-nested",
        "verb": "get"
      }
    },
    "addToProject": {
      "accepts": [
        {
          "arg": "pk_project",
          "type": "number",
          "required": true,
          "description": "Primary Key of Project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pk_entity",
          "type": "number",
          "required": true,
          "description": "Primary Key of the persistent item to add.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "ctx",
          "type": "object",
          "http": {
            "source": "context"
          }
        }
      ],
      "returns": {
        "arg": "persistent_items",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Add a persistent item with its related elements to a project.",
      "http": {
        "path": "/add-to-project",
        "verb": "post"
      }
    },
    "preview": {
      "accepts": [
        {
          "arg": "pk_project",
          "type": "number",
          "required": true,
          "description": "Primary Key of Project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pk_entity",
          "type": "number",
          "required": true,
          "description": "Primary Key of the persistent item.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pk_app_context",
          "type": "number",
          "required": true,
          "description": "Primary Key of the app context.",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "persistent_items",
        "type": "WarEntityPreview",
        "root": true
      },
      "description": "Get the preview of a persistent according to project and app context.",
      "http": {
        "path": "/preview",
        "verb": "get"
      }
    }
  }
}
