{
  "name": "InfPersistentItem",
  "base": "InfEntity",
  "idInjection": false,
  "options": {
    "validateUpsert": true,
    "postgresql": {
      "schema": "information",
      "table": "v_persistent_item"
    }
  },
  "mixins": {
    "SetupRemoteMethods": {
      "disableAllExcept": []
    }
  },
  "properties": {
    "fk_class": {
      "type": "number",
      "required": true
    }
  },
  "validations": [],
  "relations": {
    "pi_roles": {
      "type": "hasMany",
      "model": "InfRole",
      "foreignKey": "fk_entity",
      "primaryKey": "pk_entity"
    },
    "domain_entity_associations": {
      "type": "hasMany",
      "model": "InfEntityAssociation",
      "foreignKey": "fk_domain_entity",
      "primaryKey": "pk_entity"
    },
    "text_properties": {
      "type": "hasMany",
      "model": "InfTextProperty",
      "foreignKey": "fk_concerned_entity",
      "primaryKey": "pk_entity"
    },
    "dfh_class": {
      "type": "belongsTo",
      "model": "DfhClass",
      "foreignKey": "fk_class",
      "primaryKey": "dfh_pk_class"
    },
    "type_namespace_rels": {
      "type": "hasMany",
      "model": "InfTypeNamespaceRel",
      "foreignKey": "fk_persistent_item",
      "primaryKey": "pk_entity"
    }
  },
  "acls": [
    {
      "principalType": "ROLE",
      "principalId": "$everyone",
      "permission": "ALLOW",
      "property": [
        "find",
        "findComplex",
        "findById",
        "searchInProject",
        "searchInRepo",
        "findOrCreatePeIt",
        "withPhenomenaInProject",
        "nestedObjectOfProject",
        "nestedObjectOfRepo",
        "changePeItProjectRelation",
        "typesOfClassAndProject",
        "typesOfNamespaceClassAndProject",
        "typesOfNamespaceNested",
        "findOrCreateType",
        "typeNested"
      ]
    }
  ],
  "methods": {
    "nestedObjectOfProject": {
      "accepts": [
        {
          "arg": "projectId",
          "type": "number",
          "required": true,
          "description": "Project id",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pkEntity",
          "type": "number",
          "required": true,
          "description": "Primary Key of the persistent item (pk_entity)",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Get e nested object of all information about the persistent item of the project.",
      "http": {
        "path": "/nested-object-of-project",
        "verb": "get"
      }
    },
    "changePeItProjectRelation": {
      "accepts": [
        {
          "arg": "projectId",
          "type": "number",
          "required": true,
          "description": "Id of the project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "isInProject",
          "type": "boolean",
          "required": true,
          "description": "Include or exclude from project.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "data",
          "type": "InfPersistentItem",
          "required": true,
          "description": "data",
          "http": {
            "source": "body"
          }
        },
        {
          "arg": "ctx",
          "type": "object",
          "http": {
            "source": "context"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Add a nested object of a InfPersistentItem to the project.",
      "http": {
        "path": "/change-project-relation",
        "verb": "post"
      }
    },
    "findOrCreatePeIt": {
      "accepts": [
        {
          "arg": "projectId",
          "type": "number",
          "required": true,
          "description": "Id of the project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "data",
          "type": "InfPersistentItem",
          "required": true,
          "description": "data",
          "http": {
            "source": "body"
          }
        },
        {
          "arg": "ctx",
          "type": "object",
          "http": {
            "source": "context"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Find or create a InfPersistentItem.",
      "http": {
        "path": "/findOrCreate",
        "verb": "post"
      }
    },
    "findOrCreateType": {
      "accepts": [
        {
          "arg": "pk_project",
          "type": "number",
          "required": true,
          "description": "Id of the project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pk_namespace",
          "type": "number",
          "required": true,
          "description": "Id of the project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "data",
          "type": "InfPersistentItem",
          "required": true,
          "description": "data",
          "http": {
            "source": "body"
          }
        },
        {
          "arg": "ctx",
          "type": "object",
          "http": {
            "source": "context"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Find or create a InfPersistentItem.",
      "http": {
        "path": "/find-or-create-type",
        "verb": "post"
      }
    },
    "nestedObjectOfRepo": {
      "accepts": [
        {
          "arg": "pkEntity",
          "type": "number",
          "required": false,
          "description": "Primary Key of the persistent item (pk_entity)",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Get e nested object of all information about the persistent item with the community favorites.",
      "http": {
        "path": "/nested-object-of-repo",
        "verb": "get"
      }
    },
    "searchInProject": {
      "accepts": [
        {
          "arg": "projectId",
          "type": "number",
          "required": true,
          "description": "Project id",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "searchString",
          "type": "string",
          "required": false,
          "description": "Search String",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "limit",
          "type": "number",
          "required": false,
          "description": "Max. number of results per page [default=10; max=200]",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "page",
          "type": "number",
          "required": true,
          "description": "Page of pagination",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "object",
        "root": true
      },
      "description": "Find persistent items of a project.",
      "http": {
        "path": "/search-in-project",
        "verb": "get"
      }
    },
    "searchInRepo": {
      "accepts": [
        {
          "arg": "searchString",
          "type": "string",
          "required": true,
          "description": "Search String",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "limit",
          "type": "number",
          "required": false,
          "description": "Max. number of results per page [default=10; max=200]",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "page",
          "type": "number",
          "required": true,
          "description": "Page of pagination",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pk_class",
          "type": "number",
          "required": false,
          "description": "Primary Key of the Class you want to filter for. E.g. 363 for Geographical Place.",
          "http": {
            "source": "query"
          }
        }        
      ],
      "returns": {
        "arg": "data",
        "type": "object",
        "root": true
      },
      "description": "Find persistent items of a project.",
      "http": {
        "path": "/search-in-repo",
        "verb": "get"
      }
    },
    "typesOfNamespaceClassAndProject": {
      "accepts": [
        {
          "arg": "pk_namespace",
          "type": "string",
          "required": true,
          "description": "Primary Key of Namespace",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pk_project",
          "type": "number",
          "required": true,
          "description": "Primary Key of Project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pk_typed_class",
          "type": "number",
          "required": true,
          "description": "Primary Key of Typed Class (e.g. pk of Geographical Place to get Geographical Place Types)",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "persistent_items",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Find types of given namespace, class and project.",
      "http": {
        "path": "/types-of-namespace-class-and-project",
        "verb": "get"
      }
    },
    "typesOfClassAndProject": {
      "accepts": [
        {
          "arg": "pk_project",
          "type": "number",
          "required": true,
          "description": "Primary Key of Project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pk_typed_class",
          "type": "number",
          "required": true,
          "description": "Primary Key of Typed Class (e.g. pk of Geographical Place to get Geographical Place Types)",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "persistent_items",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Find types of typed class and project. E.g. get the types for the class 'histC8 Geographical Place' (pk_typed_class=363) used in project (pk_project=123)",
      "http": {
        "path": "/types-of-class-and-project",
        "verb": "get"
      }
    },
    "typesOfNamespaceNested": {
      "accepts": [
        {
          "arg": "pk_namespace",
          "type": "string",
          "required": true,
          "description": "Primary Key of Namespace",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pk_project",
          "type": "number",
          "required": true,
          "description": "Primary Key of Project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pk_entity",
          "type": "number",
          "required": true,
          "description": "Primary Key of the type. Provide this if you want to query one specific type.",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "persistent_items",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Find types of given namespace, class and project.",
      "http": {
        "path": "/types-of-namespace-nested",
        "verb": "get"
      }
    },
    "typeNested": {
      "accepts": [
        {
          "arg": "pk_project",
          "type": "number",
          "required": true,
          "description": "Primary Key of Project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pk_entity",
          "type": "number",
          "required": true,
          "description": "Primary Key of the type. Provide this if you want to query one specific type.",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "persistent_items",
        "type": "InfPersistentItem",
        "root": true
      },
      "description": "Find one type by pk_entity with appellations and text properties.",
      "http": {
        "path": "/type-nested",
        "verb": "get"
      }
    }
  }
}