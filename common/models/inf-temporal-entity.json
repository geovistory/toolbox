{
  "name": "InfTemporalEntity",
  "base": "InfEntity",
  "idInjection": false,
  "options": {
    "validateUpsert": true,
    "postgresql": {
      "schema": "information",
      "table": "v_temporal_entity"
    }
  },
  "mixins": {
    "SetupRemoteMethods": {
      "disableAllExcept": [
        "find",
        "findOrCreateInfTemporalEntity",
        "findOrCreateInfTemporalEntities",
        "changeTeEntProjectRelation"
      ]
    }
  },
  "properties": {
    "fk_class": {
      "type": "number",
      "required": true
    }
  },
  "validations": [],
  "relations": {
    "te_roles": {
      "type": "hasMany",
      "model": "InfRole",
      "foreignKey": "fk_temporal_entity",
      "primaryKey": "pk_entity"
    },
    "ingoing_roles": {
      "type": "hasMany",
      "model": "InfRole",
      "foreignKey": "fk_entity",
      "primaryKey": "pk_entity"
    },
    "text_properties": {
      "type": "hasMany",
      "model": "InfTextProperty",
      "foreignKey": "fk_concerned_entity",
      "primaryKey": "pk_entity"
    }
  },
  "acls": [
    {
      "principalType": "ROLE",
      "principalId": "$everyone",
      "permission": "DENY",
      "property": "*"
    },
    {
      "principalType": "ROLE",
      "principalId": "$everyone",
      "permission": "ALLOW",
      "property": [
        "graphsOfRepo"
      ]
    },
    {
      "principalType": "ROLE",
      "principalId": "project_member",
      "permission": "ALLOW",
      "property": [
        "findOrCreateInfTemporalEntity",
        "findOrCreateInfTemporalEntities",
        "changeTeEntProjectRelation",
        "ownProperties",
        "graphsOfProject",
        "temporalEntityList",
        "alternativeTemporalEntityList",
        "addToProject"
      ]
    }
  ],
  "methods": {
    "findOrCreateInfTemporalEntities": {
      "accepts": [
        {
          "arg": "pk_project",
          "type": "number",
          "required": true,
          "description": "Pk of the project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "data",
          "type": [
            "InfTemporalEntity"
          ],
          "required": true,
          "description": "data",
          "http": {
            "source": "body"
          }
        },
        {
          "arg": "ctx",
          "type": "object",
          "http": {
            "source": "context"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": [
          "InfTemporalEntity"
        ],
        "root": true
      },
      "description": "Find or create many information temporal entities.",
      "http": {
        "path": "/find-or-create-many",
        "verb": "post"
      }
    },
    "alternativeTemporalEntityList": {
      "accepts": [
        {
          "arg": "pkProject",
          "type": "number",
          "required": true,
          "description": "Pk of the project.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pkSourceEntity",
          "type": "number",
          "required": true,
          "description": "Pk of the source entity to which the temporal entities are related.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pkProperty",
          "type": "number",
          "required": true,
          "description": "Pk of the property leading from source entity to the temporal entities.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pkTargetClass",
          "type": "number",
          "required": true,
          "description": "Fk class of the target temporal entities.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "isOutgoing",
          "type": "boolean",
          "required": true,
          "description": "If true, the source entity is domain, else range.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "limit",
          "type": "number",
          "required": true,
          "description": "number of returned temporal entities.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "offset",
          "type": "number",
          "required": true,
          "description": "offset of the segment of returned temporal entities.",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "object",
        "root": true
      },
      "description": "Get a flat object of temporal entities.",
      "http": {
        "path": "/paginated-list-alternatives",
        "verb": "get"
      }
    },
    "temporalEntityList": {
      "accepts": [
        {
          "arg": "pkProject",
          "type": "number",
          "required": true,
          "description": "Pk of the project.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pkSourceEntity",
          "type": "number",
          "required": true,
          "description": "Pk of the source entity to which the temporal entities are related.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pkProperty",
          "type": "number",
          "required": true,
          "description": "Pk of the property leading from source entity to the temporal entities.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pkTargetClass",
          "type": "number",
          "required": true,
          "description": "Fk class of the target temporal entities.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "isOutgoing",
          "type": "boolean",
          "required": true,
          "description": "If true, the source entity is domain, else range.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "limit",
          "type": "number",
          "required": true,
          "description": "number of returned temporal entities.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "offset",
          "type": "number",
          "required": true,
          "description": "offset of the segment of returned temporal entities.",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "object",
        "root": true
      },
      "description": "Get a flat object of temporal entities.",
      "http": {
        "path": "/paginated-list",
        "verb": "get"
      }
    },
    "graphsOfProject": {
      "accepts": [
        {
          "arg": "pkProject",
          "type": "number",
          "required": false,
          "description": "Pk of project.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pkEntities",
          "type": "array",
          "required": true,
          "description": "Primary Keys of the temporal entities (array of pk_entity)",
          "http": {
            "source": "body"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "InfTemporalEntity",
        "root": true
      },
      "description": "Get e nested objects of all information about the temporal entities.",
      "http": {
        "path": "/graphs-of-project",
        "verb": "post"
      }
    },
    "graphsOfRepo": {
      "accepts": [
        {
          "arg": "pkEntities",
          "type": "array",
          "required": true,
          "description": "Primary Keys of the temporal entities (array of pk_entity)",
          "http": {
            "source": "body"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "InfTemporalEntity",
        "root": true
      },
      "description": "Get e nested objects of all information about the temporal entities.",
      "http": {
        "path": "/graphs-of-repo",
        "verb": "post"
      }
    },
    "ownProperties": {
      "accepts": [
        {
          "arg": "pkProject",
          "type": "number",
          "required": true,
          "description": "Pk project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pkEntity",
          "type": "number",
          "required": true,
          "description": "Primary Key of the temporal entity (pk_entity)",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "InfTemporalEntity",
        "root": true
      },
      "description": "Get e schema object of own properties of the temporal entity in project version.",
      "http": {
        "path": "/own-properties",
        "verb": "get"
      }
    },
    "nestedObjectOfRepo": {
      "accepts": [
        {
          "arg": "pkEntity",
          "type": "number",
          "required": true,
          "description": "Primary Key of the temporal entity (pk_entity)",
          "http": {
            "source": "query"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "InfTemporalEntity",
        "root": true
      },
      "description": "Get e nested object of all information about the temporal entity in the repo version.",
      "http": {
        "path": "/nested-object-of-repo",
        "verb": "get"
      }
    },
    "findOrCreateInfTemporalEntity": {
      "accepts": [
        {
          "arg": "pkProject",
          "type": "number",
          "required": true,
          "description": "Id of the project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "data",
          "type": "InfTemporalEntity",
          "required": true,
          "description": "data",
          "http": {
            "source": "body"
          }
        },
        {
          "arg": "ctx",
          "type": "object",
          "http": {
            "source": "context"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "InfTemporalEntity",
        "root": true
      },
      "description": "Find or create a temporal entity version.",
      "http": {
        "path": "/findOrCreate",
        "verb": "post"
      }
    },
    "changeTeEntProjectRelation": {
      "accepts": [
        {
          "arg": "pkProject",
          "type": "number",
          "required": true,
          "description": "Id of the project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "isInProject",
          "type": "boolean",
          "required": true,
          "description": "Include or exclude from project.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "data",
          "type": "InfTemporalEntity",
          "required": true,
          "description": "data",
          "http": {
            "source": "body"
          }
        },
        {
          "arg": "ctx",
          "type": "object",
          "http": {
            "source": "context"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "InfTemporalEntity",
        "root": true
      },
      "description": "Relate a nested object of a InfTemporalEntity to the project.",
      "http": {
        "path": "/change-project-relation",
        "verb": "post"
      }
    },
    "addToProject": {
      "accepts": [
        {
          "arg": "pk_project",
          "type": "number",
          "required": true,
          "description": "Primary Key of Project",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "pk_entity",
          "type": "number",
          "required": true,
          "description": "Primary Key of the temporal entity to add.",
          "http": {
            "source": "query"
          }
        },
        {
          "arg": "ctx",
          "type": "object",
          "http": {
            "source": "context"
          }
        }
      ],
      "returns": {
        "arg": "data",
        "type": "SchemaObject",
        "root": true
      },
      "description": "Add a temporal entity with its outgoing roles to a project.",
      "http": {
        "path": "/add-to-project",
        "verb": "post"
      }
    }
  }
}
