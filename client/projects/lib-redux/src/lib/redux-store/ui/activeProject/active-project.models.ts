import { ClassConfig as LbClassConfig } from '@kleiolab/lib-sdk-lb4';
import { Observable } from 'rxjs';
import { TabBase } from './active-project/tab-layout.models';



// export interface EntityByPk<T> {
//   [pk_entity: number]: T
// }

// export interface VersionEntity<T> {
//   _latestVersion: number, // version number of the latest version
//   [v: number]: T
// }

// export interface EntityVersionsByPk<T> {
//   [pk_entity: number]: VersionEntity<T>
// }

export interface Panel {
  id: number;
  tabs: PanelTab<any>[];
}

export type ListType = '' | 'digitals' | 'entities' | 'sources' | 'analysis' | 'queries' | 'visuals' | 'stories' | 'settings';
export interface PanelTab<D> {
  // wheter tab is active or not
  active: boolean;
  // the root component included in this tab, in dash separate minuscles: PeItDetailComponent -> 'entity-detail'
  component: LbClassConfig.DetailPageEnum;
  // icon to be displayed in tab, e.g.: gv-icon-source
  icon: LbClassConfig.IconEnum,
  // name of the pathSegment under 'activeProject', used to generate the path: ['activeProject', pathSegment, uiId]
  pathSegment?: 'textDetails' | 'tableDetails' | 'peItDetails' | 'teEnDetails' | 'analysisDetails' | 'queryDetails' | 'visualDetails' | 'ontomeProfilesSettings' | 'classesSettings' | 'contrVocabSettings';
  // data to pass to component via input variabales
  data?: D
  // generated by reducer: base path where the component will be attatch his SubStore
  path?: string[];
  // generated on the fly, never in store
  tabTitle$?: Observable<string>;
  loading$?: Observable<boolean>;
}
// export interface PeItTabData {
//   // Used by peIt detail state creato
//   peItDetailConfig?: {
//     peItDetail?: EntityDetail
//     // stateSettings?: StateSettings
//   }
// }
// export interface TeEntTabData {
//   // Used by teEnt detail state creato
//   teEntDetailConfig?: {
//     teEntDetail?: TeEntDetail
//     // stateSettings?: StateSettings
//   }
// }
// export interface AnalysisTabData {
//   pkEntity?: number;
//   fkAnalysisType?: number;
// }
// export interface TabData {
//   pkEntity?: number;
//   // classAndTypePk?: ClassAndTypePk;

//   pkProperty?: number;

//   // Used by peIt detail state creato
//   peItDetailConfig?: {
//     peItDetail?: EntityDetail
//     // stateSettings?: StateSettings
//   }

//   // // Used by teEnt detail state creato
//   // teEntDetailConfig?: {
//   //   teEntDetail?: TeEntDetail
//   //   // stateSettings?: StateSettingsÚ
//   // }
// }

// export interface RamSource {
//   pkEntity?: number,
//   annotation?: {
//     textChunk: InfAppellation,
//     pkEntityOfText: number
//   };
// }

export interface ActiveProjectState {

  pk_project?: number;

  list?: ListType;

  panels?: Panel[]

  // index of focused Panel
  focusedPanel?: number;

  // serial number for panels
  panelSerial?: number;

  // serial number for uiId
  uiIdSerial?: number;

  tabLayouts?: { [uiId: string]: TabBase }

  // reference the uiId within the path of the tab (uiId has nothing to do with pk_entity)
  // textDetails?: { [uiId: string]: TabBase }

  // reference the uiId within the path of the tab (uiId has nothing to do with pk_entity)
  // peItDetails?: { [uiId: string]: EntityDetail }

  // reference the uiId within the path of the tab (uiId has nothing to do with pk_entity)
  // analysisDetails?: { [uiId: string]: any }

  // reference the uiId within the path of the tab (uiId has nothing to do with pk_entity)
  // classesSettings?: { [uiId: string]: ProjectSettingsData }

  // reference the uiId within the path of the tab (uiId has nothing to do with pk_entity)
  // contrVocabSettings?: { [uiId: string]: Types }

  // reference the uiId within the path of the tab (uiId has nothing to do with pk_entity)
  // ontomeProfilesSettings?: { [uiId: string]: any }

  // /******************************************************************
  //  * Layout – Modals
  //  */


  /******************************************************************
   * Things for Mentionings / Annotations
   */


  // // the chunk that is used to create mentionings
  // selectedChunk?: DatChunk;

  // if true, the text editor behaves so that each node can be clicked to de-/activate
  refiningChunk?: boolean;

  // true, when mentioning is being created.
  // TODO: check, if needed
  creatingMentioning?: boolean;

  // Array of pk_entities of mentionings (a.k.a. statements of property "is mentioned in")
  // that are focused by a click on a chunk (in text editor)
  mentioningsFocusedInText?: number[]

  // Array of pk_entities of mentionings (a.k.a. statements of property "is mentioned in")
  // that are focused by click on mentioning in a list/table view
  mentioningsFocusedInTable?: number[]

}


// export interface ClassConfigList { [dfh_pk_class: number]: ClassConfig }

// export interface ClassConfig {
//   pkEntity: number;
//   dfh_pk_class: number;

//   label: string;
//   dfh_standard_label: string;

//   profileLabels: string;
//   profilePks: number[];

//   isInProject?: boolean; // reflects the enabled / disabled state from data settings of the project
//   changingProjRel: boolean;

//   subclassOf?: 'peIt' | 'teEnt' | 'other'; // to distinguish TeEnts from PeIts

//   subclassOfType?: boolean; // true if subclass of E55 Type

//   scopeNote: string;

//   dfh_identifier_in_namespace: string;

//   required_by_sources?: boolean
//   required_by_entities?: boolean
//   required_by_basics?: boolean
//   excluded_from_entities?: boolean
// }


