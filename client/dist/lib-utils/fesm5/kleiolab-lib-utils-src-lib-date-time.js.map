{"version":3,"file":"kleiolab-lib-utils-src-lib-date-time.js","sources":["ng://@kleiolab/lib-utils/src/lib/date-time/date-time-commons.ts","ng://@kleiolab/lib-utils/src/lib/date-time/julian-date-time.ts","ng://@kleiolab/lib-utils/src/lib/date-time/gregorian-date-time.ts","ng://@kleiolab/lib-utils/src/lib/date-time/time-primitive.ts"],"sourcesContent":["import { EventEmitter } from '@angular/core';\nimport { YearMonthDay } from './interfaces';\n\nexport type Granularity =\n  '1 century' |\n  '1 decade' |\n  '1 year' |\n  '1 month' |\n  '1 day' |\n  '1 hour' |\n  '1 minute' |\n  '1 second';\n\nexport abstract class DateTimeCommons {\n\n  /**\n   * Properties\n   */\n  onDateChange: EventEmitter<YearMonthDay> = new EventEmitter();\n\n  private _year?: number;\n\n  set year(val: number) {\n    this._year = val;\n    this.emitDateChange();\n  }\n\n  get year(): number {\n    return this._year;\n  }\n\n  private _month?: number;\n\n  set month(val: number) {\n    this._month = val;\n    this.emitDateChange();\n  }\n\n  get month(): number {\n    return this._month;\n  }\n\n  private _day?: number;\n\n  set day(val: number) {\n    this._day = val;\n    this.emitDateChange();\n  }\n\n  get day(): number {\n    return this._day;\n  }\n\n  private _hours?: number;\n\n  set hours(val: number) {\n    this._hours = val;\n  }\n\n  get hours(): number {\n    return this._hours;\n  }\n\n  private _minutes?: number;\n\n  set minutes(val: number) {\n    this._minutes = val;\n  }\n\n  get minutes(): number {\n    return this._minutes;\n  }\n\n  private _seconds?: number;\n\n  set seconds(val: number) {\n    this._seconds = val;\n  }\n\n  get seconds(): number {\n    return this._seconds;\n  }\n\n\n  constructor(data?) {\n    Object.assign(this, data);\n  }\n\n  abstract lengthOfMonth(): number;\n\n  /**\n  * Returns the running day for given month and day with consideration of the\n  * isLeap boolean that indicates leap years. Inspired by:\n  * https://de.wikipedia.org/wiki/Umrechnung_zwischen_julianischem_Datum_und_julianischem_Kalender\n  *\n  * @param month 1=january .. 12=december\n  * @param day 1, 2 .. 31\n  * @param isLeap if true, this is a leap year\n  */\n  calcRunningDay(month: number, day: number, isLeap: boolean): number {\n\n    // if no month or day provided, let's start at 1\n    day = (day === undefined || day === null) ? 1 : day;\n    month = (month === undefined || month === null) ? 1 : month;\n\n    // month corrections (note that january has index 0)\n    const monthCorrenctions = [-1, 0, -2, -1, -1, 0, 0, 1, +2, +2, +3, +3];\n\n    // leap year correction\n    let lc = 0;\n\n    if (isLeap && month > 2) {\n      lc = 1;\n    }\n\n    // month correction\n    const mc = monthCorrenctions[month - 1];\n\n    return day + (30 * (month - 1)) + (lc + mc);\n  }\n\n\n  /**\n  * Returns the month and day for given running day with consideration of the\n  * isLeap boolean that indicates leap years. Inspired by:\n  * https://de.wikipedia.org/wiki/Umrechnung_zwischen_julianischem_Datum_und_julianischem_Kalender\n  *\n  * @param runningDay 1, 2 .. 365\n  * @param isLeap if true, this is a leap year\n  *\n  */\n  calcDateByRunningDay(runningDay: number, isLeap: boolean): { day: number, month: number } {\n\n    // month corrections (note that january has index 0)\n    const monthCorrenctions = [-1, 0, -2, -1, -1, 0, 0, 1, +2, +2, +3, +3];\n\n    // resulting month\n    let month = Math.floor((runningDay + 1) / 30) + 1;\n\n    // month correction\n    let mc = monthCorrenctions[month - 1];\n\n    // leap year correction\n    let lc = 0;\n\n    if (isLeap && month > 2) {\n      lc = 1;\n    }\n\n    // resulting day\n    let day = runningDay - 30 * (month - 1) - (lc + mc);\n\n    // check if month and day still valid\n    if (month > 12 || day < 1) {\n\n      month--;\n\n      if (month < 1) {\n        isLeap = !isLeap;\n      }\n\n      // leap year correction\n      lc = 0;\n\n      if (isLeap && month > 2) {\n        lc = 1;\n      }\n\n      // month correction\n      mc = monthCorrenctions[month - 1];\n\n      // resulting day\n      day = runningDay - 30 * (month - 1) - (lc + mc);\n\n    }\n\n    return { day: day, month: month };\n  }\n\n  emitDateChange() {\n    this.onDateChange.emit({\n      year: this.year,\n      month: this.month,\n      day: this.day\n    });\n  }\n\n  getGranularity(): Granularity {\n    let duration: Granularity;\n    if (this.year) { duration = '1 year' }\n    if (this.month) { duration = '1 month' }\n    if (this.day) { duration = '1 day' }\n    if (this.hours) { duration = '1 hour' }\n    if (this.minutes) { duration = '1 minute' }\n    if (this.seconds) { duration = '1 second' }\n    return duration;\n  }\n\n  getTimeStamp(): string {\n\n    let timestamp = '';\n    timestamp = this.year ? this.pad(Math.abs(this.year), 4) : '01';\n    timestamp += '-';\n    timestamp += this.month ? this.pad(this.month, 2) : '01';\n    timestamp += '-';\n    timestamp += this.day ? this.pad(this.day, 2) : '01';\n    timestamp += ' ';\n    timestamp += this.hours ? this.pad(this.hours, 2) : '00';\n    timestamp += ':';\n    timestamp += this.minutes ? this.pad(this.minutes, 2) : '00';\n    timestamp += ':';\n    timestamp += this.seconds ? this.pad(this.seconds, 2) : '00';\n\n    timestamp += this.year < 0 ? ' BC' : '';\n\n    return timestamp;\n  }\n\n  getDate(): Date | null {\n\n    // validate\n    if (!this.year && this.year !== 0) return null;\n    if (this.day && !this.month) return null;\n    if (this.hours && !this.day) return null;\n    if (this.minutes && !this.hours) return null;\n    if (this.seconds && !this.hours) return null;\n\n    // creat date\n    const date = new Date()\n\n    date.setFullYear(this.year < 0 ? this.year + 1 : this.year);\n\n    date.setMonth((this.month ? (this.month - 1) : 0));\n\n    date.setDate((this.day ? this.day : 1));\n\n    date.setHours(this.hours ? this.hours : 0)\n\n    date.setMinutes(this.minutes ? this.minutes : 0)\n\n    date.setSeconds(this.seconds ? this.seconds : 0)\n\n    return date;\n  }\n\n  pad(number: number, width: number, z: string = '0'): string {\n    const n = number.toString();\n    return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\n  }\n\n\n  addYear() {\n    this.year++;\n    if (this.year === 0) this.year++;\n    if (this.day > this.lengthOfMonth()) {\n      this.day = this.lengthOfMonth()\n    }\n  }\n\n  addMonth() {\n    this.month++;\n\n\n    if (this.month > 12) {\n      this.month = 1\n      this.addYear();\n    }\n    else if (this.day > this.lengthOfMonth()) {\n      this.day = this.lengthOfMonth()\n    }\n  }\n\n  addDay() {\n    this.day++;\n    if (this.day > this.lengthOfMonth()) {\n      this.day = 1;\n      this.addMonth()\n    }\n  }\n\n  addHour() {\n    this.hours++;\n    if (this.hours > 23) {\n      this.hours = 0;\n      this.addDay()\n    }\n  }\n\n  addMinute() {\n    this.minutes++;\n    if (this.minutes > 59) {\n      this.minutes = 0;\n      this.addHour()\n    }\n  }\n\n  addSecond() {\n    this.seconds++;\n    if (this.seconds > 59) {\n      this.seconds = 0;\n      this.addMinute()\n    }\n  }\n\n\n\n\n  removeYear() {\n    this.year--;\n    if (this.year === 0) {\n      this.year = -1;\n    }\n    if (this.day > this.lengthOfMonth()) {\n      this.day = this.lengthOfMonth()\n    }\n  }\n\n  removeMonth() {\n    this.month--;\n\n    if (this.month < 1) {\n      this.month = 12;\n      this.removeYear();\n    }\n    else if (this.day > this.lengthOfMonth()) {\n      this.day = this.lengthOfMonth()\n    }\n  }\n\n  removeDay() {\n    this.day--;\n    if (this.day < 1) {\n      this.removeMonth()\n      this.day = this.lengthOfMonth();\n    }\n  }\n\n\n  removeHour() {\n    this.hours--;\n    if (this.hours < 0 || !this.hours) {\n      this.hours = 23;\n      this.removeDay()\n    }\n  }\n\n  removeMinute() {\n    this.minutes--;\n    if (this.minutes < 0 || !this.minutes) {\n      this.minutes = 59;\n      this.removeHour()\n    }\n  }\n\n  removeSecond() {\n    this.seconds--;\n    if (this.seconds < 0 || !this.seconds) {\n      this.seconds = 59;\n      this.removeMinute()\n    }\n  }\n\n\n  addDays(quantity: number) {\n    for (let i = 0; i < quantity; i++) {\n      this.addDay();\n    };\n  }\n\n  addMonths(quantity: number) {\n    for (let i = 0; i < quantity; i++) {\n      this.addMonth();\n    };\n  }\n\n  addYears(quantity: number) {\n    for (let i = 0; i < quantity; i++) {\n      this.addYear();\n    };\n  }\n\n  add(duration: Granularity) {\n    if (duration === '1 year') {\n      this.addYear()\n    }\n    else if (duration === '1 month') {\n      this.addMonth()\n    }\n    else if (duration === '1 day') {\n      this.addDay()\n    }\n    else if (duration === '1 hour') {\n      this.addHour()\n    }\n    else if (duration === '1 minute') {\n      this.addMinute()\n    }\n    else if (duration === '1 second') {\n      this.addSecond()\n    }\n  }\n\n\n\n  toLastSecondOf(duration: Granularity) {\n    this.add(duration);\n    this.removeSecond();\n  }\n\n\n}\n","import { DateTimeCommons, Granularity } from './date-time-commons';\nimport { DateTime } from './interfaces';\n\n\n\n/**\n* Class to represent a Julian Date and Time\n* TODO: Move this class to common folder as it is needed by server and client\n*/\nexport class JulianDateTime extends DateTimeCommons implements DateTime {\n\n\n  /**\n  * Methods\n  */\n\n  getEndOf(duration: Granularity = this.getGranularity()): JulianDateTime {\n\n    const dt = new JulianDateTime(this);\n    dt.toLastSecondOf(duration);\n\n    return dt;\n  }\n\n\n  lengthOfMonth() {\n    const y = this.year;\n    let m = this.month;\n\n    // Assume not leap year by default (note zero index for Jan)\n    const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    // If evenly divisible by 4 and not one of the years 5 BC, 1 BC or 4 AD,\n    // when Augustus dropped the leap year\n    if (!(y % 4) && !(y == -5) && !(y == -1) && !(y == 4)) {\n      daysInMonth[1] = 29;\n    }\n    return daysInMonth[--m]\n  }\n\n\n\n  /**\n  * Convert the year, month, day of julian calendar to julian day\n  *\n  * @return  description\n  */\n  getJulianDay() {\n\n    // running day (conut of days that year)\n    const runningDay = this.calcRunningDay(this.month, this.day, this.isLeapYear());\n    let runningYear;\n    if (this.year < 0) {\n      // running year\n      runningYear = 4716 + this.year;\n    } else {\n      // running year\n      runningYear = 4715 + this.year;\n    }\n\n    // number of full 4 year cycles\n    const n4 = Math.floor(runningYear / 4)\n\n    // rest of division: number of full years of the last uncomplete 4 years cycle\n    const n1 = runningYear % 4;\n\n\n    return 1461 * n4 + 365 * (n1 - 3) + runningDay;\n  }\n\n\n  fromJulianDay(julianDay: number) {\n\n    if (typeof julianDay === 'string') {\n      julianDay = parseInt(julianDay, 10)\n    }\n\n    // number of full 4 year cycles\n    const n4 = Math.floor((julianDay + (3 * 365)) / 1461);\n\n    // number of days of the last uncomplete 4 years cycle\n    const r4 = (julianDay + (3 * 365)) % 1461;\n\n    // number of full years of the last uncomplete 4 years cycle\n    let n1 = Math.floor(r4 / 365);\n\n    // number of days in the last year\n    let dayOfYear = r4 % 365;\n\n    if (n1 === 4) {\n      n1 = 3;\n      dayOfYear = 365;\n    }\n\n    // running year\n    const runningYear = 4 * n4 + n1;\n\n    // if BC\n    if (runningYear <= 4715) {\n      // resulting year\n      this.year = runningYear - 4716;\n\n      // if AD\n    } else {\n      this.year = runningYear - 4715;\n\n    }\n\n    const monthDay = this.calcDateByRunningDay(dayOfYear, this.isLeapYear())\n\n    // resulting month\n    this.month = monthDay.month;\n\n    // resulting day\n    this.day = monthDay.day;\n\n\n    return this;\n\n  }\n\n\n  /**\n  * Returns true if given year is a leap year\n  */\n  isLeapYear(): boolean {\n\n    // Return true if evenly divisible by 4\n    return !(this.year % 4) ? true : false;\n  }\n\n\n  getJulianSecond() {\n    let seconds = this.getJulianDay() * 60 * 60 * 24; // first second of the day\n    if (this.seconds > 0) seconds = seconds + this.seconds;\n    if (this.minutes > 0) seconds = seconds + this.minutes * 60;\n    if (this.hours > 0) seconds = seconds + this.hours * 60 * 60;\n    return seconds;\n  }\n\n  /**\n   * Set this JulianDateTime from given julian second\n   * @param julianSecond julian second\n   */\n  fromJulianSecond(julianSecond) {\n\n    const secsPerDay = 60 * 60 * 24;\n\n    // number of full days\n    const julianDay = Math.floor(julianSecond / secsPerDay);\n\n    // number of seconds of the julian day\n    const secsOfDay = julianSecond % secsPerDay;\n\n    // number of ours of the day\n    this.hours = Math.floor(secsOfDay / (60 * 60))\n\n    // number of seconds of the last hour\n    const secsOfHour = this.hours % (60 * 60);\n\n    // number of ours of the day\n    this.minutes = Math.floor(secsOfHour / 60)\n\n    // secs of the last minute\n    this.seconds = this.minutes % 60;\n\n    return this.fromJulianDay(julianDay);\n\n  }\n\n\n}\n","import { DateTimeCommons, Granularity } from './date-time-commons';\nimport { DateTime } from './interfaces';\nimport { JulianDateTime } from './julian-date-time';\n\n\n/**\n * Class to represent a Julian Date and Time\n * TODO: Move this class to common folder as it is needed by server and client\n */\nexport class GregorianDateTime extends DateTimeCommons implements DateTime {\n\n\n\n  lengthOfMonth() {\n    let y = this.year, m = this.month;\n\n    if (!(m > 0) && !(m <= 12)) {\n      return undefined;\n    }\n\n    // Assume not leap year by default (note zero index for Jan)\n    const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    // If evenly divisible by 4 and not evenly divisible by 100,\n    // or is evenly divisible by 400, then a leap year\n    if (this.isLeapYear()) {\n      daysInMonth[1] = 29;\n    }\n    return daysInMonth[--m];\n  }\n\n  getEndOf(duration: Granularity = this.getGranularity()): GregorianDateTime {\n\n    const dt = new GregorianDateTime(this);\n    dt.toLastSecondOf(duration);\n\n    return dt;\n  }\n\n\n  /**\n   * getJulianDay - Implemented according to this page [2018-03-12]:\n   * https://de.wikipedia.org/wiki/Umrechnung_zwischen_julianischem_Datum_und_gregorianischem_Kalender\n   *\n   * @return  description\n   */\n  getJulianDay() {\n    // running day (conut of days that year)\n    const runningDay = this.calcRunningDay(this.month, this.day, this.isLeapYear());\n\n    // running year\n    const runningYear = this.year - 1;\n\n    // julian day of year 1 AD\n    const julianDay0 = 1721426;\n\n    // number of full 400 year cycles\n    const n400 = Math.floor(runningYear / 400);\n\n    // rest of division: number of years of the last uncomplete 400 years cycle\n    const r400 = runningYear % 400;\n\n    // number of full 100 year cycles\n    const n100 = Math.floor(r400 / 100)\n\n    // rest of division: number of years of the last uncomplete 100 years cycle\n    const r100 = r400 % 100;\n\n    // number of full 4 year cycles\n    const n4 = Math.floor(r100 / 4)\n\n    // rest of division: number of full years of the last uncomplete 4 years cycle\n    const n1 = r100 % 4;\n\n    return julianDay0 + n400 * 146097 + n100 * 36524 + n4 * 1461 + n1 * 365 + runningDay;\n  }\n\n\n  fromJulianDay(julianDay: number) {\n\n    if (typeof julianDay === 'string') {\n      julianDay = parseInt(julianDay)\n    }\n\n    // julian day of year 1 AD\n    const julianDay0 = 1721426;\n\n    const firstDayOfGregorianCal = 2299161;\n\n    // conversion of julian day earlier than the introduction of\n    // the gregorian calendar October 15th of 1582 are calculated\n    // with the julian calendar algoritms\n    if (julianDay < firstDayOfGregorianCal) {\n\n      const jdt = new JulianDateTime().fromJulianDay(julianDay);\n      this.year = jdt.year;\n      this.month = jdt.month;\n      this.day = jdt.day;\n\n    }\n    else {\n\n      // number of full 400 year cycles\n      const n400 = Math.floor((julianDay - julianDay0) / 146097);\n\n      // number of days of the last uncomplete 400 years cycle\n      const r400 = (julianDay - julianDay0) % 146097;\n\n      // number of full 100 year cycles\n      let n100 = Math.floor(r400 / 36524);\n\n      // number of days of the last uncomplete 100 years cycle\n      let r100 = r400 % 36524;\n\n\n      if (n100 === 4) {\n        n100 = 3;\n        r100 = 36524;\n      }\n\n      // number of full 4 year cycles\n      const n4 = Math.floor(r100 / 1461);\n\n      // number of days of the last uncomplete 4 years cycle\n      const r4 = r100 % 1461;\n\n      // number of full years of the last uncomplete 4 years cycle\n      let n1 = Math.floor(r4 / 365);\n\n      // number of days in the last year\n      let runningDay = r4 % 365;\n\n      if (n1 === 4) {\n        n1 = 3;\n        runningDay = 365;\n      }\n\n      // running year\n      const runningYear = 400 * n400 + 100 * n100 + 4 * n4 + n1;\n\n      // resulting year\n      this.year = runningYear + 1;\n\n      const monthDay = this.calcDateByRunningDay(runningDay, this.isLeapYear())\n\n      // resulting month\n      this.month = monthDay.month;\n\n      // resulting day\n      this.day = monthDay.day;\n    }\n\n    return this;\n  }\n\n\n\n  /**\n   * Returns true if given year is a leap year\n   */\n  isLeapYear(): boolean {\n    const year = this.year;\n    // Return true if evenly divisible by 4 and not evenly divisible by 100,\n    // or is evenly divisible by 400, then a leap year\n    return ((!(year % 4) && year % 100) || !(year % 400)) ? true : false;\n  }\n\n  /**\n   * returns julian day in seconds\n   *\n   * TODO: return julian day plus time in seconds\n   */\n  getJulianSecond() {\n    let seconds = this.getJulianDay() * 60 * 60 * 24; // first second of the day\n    if (this.seconds > 0) seconds = seconds + this.seconds;\n    if (this.minutes > 0) seconds = seconds + this.minutes * 60;\n    if (this.hours > 0) seconds = seconds + this.hours * 60 * 60;\n    return seconds;\n  }\n\n  /**\n   * Set this JulianDateTime from given julian second\n   * @param julianSecond julian second\n   */\n  fromJulianSecond(julianSecond) {\n\n    const secsPerDay = 60 * 60 * 24;\n\n    // number of full days\n    const julianDay = Math.floor(julianSecond / secsPerDay);\n\n    // number of seconds of the julian day\n    const secsOfDay = julianSecond % secsPerDay;\n\n    // number of ours of the day\n    this.hours = Math.floor(secsOfDay / (60 * 60))\n\n    // number of seconds of the last hour\n    const secsOfHour = this.hours % (60 * 60);\n\n    // number of ours of the day\n    this.minutes = Math.floor(secsOfHour / 60)\n\n    // secs of the last minute\n    this.seconds = this.minutes % 60;\n\n    return this.fromJulianDay(julianDay);\n\n  }\n\n\n}\n","\nimport { Granularity } from './date-time-commons';\nimport { GregorianDateTime } from './gregorian-date-time';\nimport { JulianDateTime } from './julian-date-time';\n\nexport type CalendarType = 'gregorian' | 'julian';\n\ninterface ITimePrimitive {\n  julianDay?: number;\n  duration?: Granularity;\n  calendar?: CalendarType;\n}\n\nexport class TimePrimitive {\n\n  // Last day of the era before christ\n  readonly LAST_DAY_BC = 1721422;\n\n  julianDay: number;\n  duration: Granularity;\n  calendar: CalendarType; // the calendar initialy used by user to create time primitive\n\n  constructor(data?: ITimePrimitive) {\n    Object.assign(this, data);\n    if((data as any).julian_day) this.julianDay = (data as any).julian_day\n  }\n\n  getGregorianDateTime(): GregorianDateTime {\n    const g = new GregorianDateTime()\n    g.fromJulianDay(this.julianDay);\n    return g;\n  }\n\n  getJulianDateTime(): JulianDateTime {\n    const j = new JulianDateTime()\n    j.fromJulianDay(this.julianDay);\n    return j;\n  }\n\n\n\n  /**\n   * Get a DateTime object according to the given calendar.\n   *\n   */\n  getDateTime(calendar: CalendarType = this.calendar): GregorianDateTime | JulianDateTime | null {\n\n    if (!calendar) return null;\n\n    if (calendar === 'gregorian') return this.getGregorianDateTime();\n\n    if (calendar === 'julian') return this.getJulianDateTime();\n  }\n\n\n  /**\n   * Get a Date object according to the given calendar.\n   *\n   */\n  getDate(calendar: CalendarType = this.calendar): Date | null {\n    return this.getDateTime(calendar).getDate();\n  }\n  /**\n   * Get a string that defines the format usable with the DatePipe,\n   * a according to the given granularity\n   */\n  getDateFormatString(granularity: Granularity): string {\n\n    if (this.julianDay <= this.LAST_DAY_BC) {\n      switch (granularity) {\n        case '1 year':\n          return 'y GG';\n        case '1 month':\n          return 'MMM, y GG';\n        case '1 day':\n          return 'MMM d, y GG';\n        case '1 hour':\n          return 'MMM d, y GG, HH';\n        case '1 minute':\n          return 'MMM d, y GG, HH:mm';\n        case '1 second':\n          return 'MMM d, y GG, HH:mm:ss';\n        default:\n          return '';\n      }\n    } else {\n      switch (granularity) {\n        case '1 year':\n          return 'y';\n        case '1 month':\n          return 'MMM, y';\n        case '1 day':\n          return 'MMM d, y';\n        case '1 hour':\n          return 'MMM d, y, HH';\n        case '1 minute':\n          return 'MMM d, y, HH:mm';\n        case '1 second':\n          return 'MMM d, y, HH:mm:ss';\n        default:\n          return '';\n      }\n    }\n  }\n\n  /**\n   * Get a display label of the current TimePrimitive.\n   */\n  getShortesDateFormatString(): string {\n\n    return this.getDateFormatString(this.duration);\n  }\n\n\n  /**\n   * Get the julian day in seconds\n   * TODO: integrate time\n  */\n  getJulianSecond(): number {\n    return this.julianDay * 60 * 60 * 24;\n  }\n\n\n  /**\n   * Get the last second of this TimePrimitive. This depends on the calendar,\n   * since the month february and leap years differ from one calendar to the other\n   *\n   */\n  getLastSecond(calendar: CalendarType = this.calendar): number | null {\n    const dt = this.getDateTime()\n    return dt.getEndOf(this.duration).getJulianSecond();\n  }\n\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}