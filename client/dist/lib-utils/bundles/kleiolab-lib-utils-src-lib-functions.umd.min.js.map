{"version":3,"sources":["ng://@kleiolab/lib-utils/src/lib/functions/util.ts"],"names":["U","obj2Arr","obj","arr","undefined","Object","keys","forEach","key","push","objNr2Arr","obj2KeyValueArr","value","firstProTextPropStringOfType","textProperties","fkSystemType","find","t","fk_system_type","string","uuid","replace","char","random","Math","toString","propertyFieldKeyFromParams","fkProp","isOutgoing","toStr0undef","val","toStrContains0undef","vals","i","length","recursiveMarkAsTouched","f","controls","Array","isArray","c","markAsTouched"],"mappings":"6dAkBA,IAAAA,EAAA,WAAA,SAAAA,KAwHA,OAtHSA,EAAAC,QAAP,SAAkBC,OACVC,EAAM,GAEZ,OAAWC,MAAPF,EAAyBC,GAE7BE,OAAOC,KAAKJ,GAAKK,SAAO,SAACC,GACvBL,EAAIM,KAAKP,EAAIM,OAGRL,IAGFH,EAAAU,UAAP,SAAoBR,OACZC,EAAM,GAEZ,OAAWC,MAAPF,EAAyBC,GAE7BE,OAAOC,KAAKJ,GAAKK,SAAO,SAACC,GACvBL,EAAIM,KAAKP,EAAIM,OAGRL,IASFH,EAAAW,gBAAP,SAA0BT,OAClBI,EAAO,GACb,IAAK,IAAME,KAAON,EACZA,EAAIM,IACNF,EAAKG,KAAK,CAAED,IAAKA,EAAKI,MAAOV,EAAIM,KAGrC,OAAOF,GAKFN,EAAAa,6BAAP,SAAoCC,EAAmCC,GACrE,OAAQD,EAAeE,MAAI,SAACC,GAAK,OAAAA,EAAEC,iBAAmBH,MAAiB,CAAEI,OAAQ,KAAMA,QAMlFnB,EAAAoB,KAAP,WACE,MAAO,uCAAuCC,QAAQ,SAAO,SAAGC,OACxDC,EAAyB,GAAhBC,KAAKD,SAAgB,EAEpC,OADuB,MAATD,EAAeC,EAAUA,EAAS,EAAI,GACvCE,SAAS,QA4BnBzB,EAAA0B,2BAAP,SAAkCC,EAAgBC,GAChD,MAAO,IAAMD,EAAS,KAAOC,EAAa,WAAa,YAQlD5B,EAAA6B,YAAP,SAAmBC,GACjB,OAAY,IAARA,OAAW,OACE1B,IAAR0B,OAAmB,EACX,OAARA,OAAc,EACXA,EAAIL,YAOXzB,EAAA+B,oBAAP,SAA2BC,GAEzB,QADIb,EAAS,GACJc,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAAK,KAC9BH,EAAME,EAAKC,GAEjB,GAAY,IAARH,EAAW,OACV,QAAY1B,IAAR0B,EAAmB,OACvB,GAAY,OAARA,EAAc,OAErBX,EADa,IAANc,EACEH,EAAIL,WAEDN,EAAM,IAAIW,EAAIL,WAI9B,OAAON,GAzDFnB,EAAAmC,uBAAsB,SAAIC,GAE/B,GAAIA,EAAEC,SACJ,GAAIC,MAAMC,QAAQH,EAAEC,UAElBD,EAAEC,SAAS9B,SAAO,SAAEiC,GAClBA,EAAEC,gBACED,EAAEH,UAAUrC,EAAEmC,uBAAuBK,WAK3C,GAAIJ,EAAEC,SAAuB,aAAG,KACxBG,EAAIJ,EAAEC,SAAwB,aACpCG,EAAEC,gBACED,EAAEH,UAAUrC,EAAEmC,uBAAuBK,KA4CnDxC,EAxHA","sourcesContent":["import { FormArray, FormGroup } from '@angular/forms';\nimport { ProTextProperty } from '@kleiolab/lib-sdk-lb3';\n\n\nexport interface LabelGeneratorSettings {\n  // maximum number of data unit children that are taken into account for the label generator\n  // e.g.: for a AppeForLanguage it will take only label and language, when you put it to 2\n  fieldsMax?: number;\n\n  // maximum number of statements per propertyField taken into account for the label generator\n  statementsMax?: number;\n\n  // path of that element in the store. useful to attatch leaf-pe-it-view\n  path: string[];\n}/**\n * Utilities class for static functions\n */\n\nexport class U {\n\n  static obj2Arr<T>(obj: { [key: string]: T }): T[] {\n    const arr = [];\n\n    if (obj == undefined) return arr;\n\n    Object.keys(obj).forEach(key => {\n      arr.push(obj[key]);\n    });\n\n    return arr;\n  }\n\n  static objNr2Arr<T>(obj: { [key: number]: T }): T[] {\n    const arr = [];\n\n    if (obj == undefined) return arr;\n\n    Object.keys(obj).forEach(key => {\n      arr.push(obj[key]);\n    });\n\n    return arr;\n  }\n\n  /**\n   * converts object to array with {key: value} objects, e.g.:\n   * {'a': 12, 'b': 99} --> [{key: 'a', value: 12, key: 'b', value: 99}]\n   *\n   * @param obj\n   */\n  static obj2KeyValueArr<T>(obj: { [key: string]: T }): { key: string, value: T }[] {\n    const keys = [];\n    for (const key in obj) {\n      if (obj[key]) {\n        keys.push({ key: key, value: obj[key] });\n      }\n    }\n    return keys;\n  }\n\n\n\n  static firstProTextPropStringOfType(textProperties: ProTextProperty[], fkSystemType): string {\n    return (textProperties.find(t => t.fk_system_type === fkSystemType) || { string: '' }).string\n  }\n\n  /**\n  * Erzeugt eine UUID nach RFC 4122\n  */\n  static uuid(): string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (char) => {\n      const random = Math.random() * 16 | 0; // Nachkommastellen abschneiden\n      const value = char === 'x' ? random : (random % 4 + 8); // Bei x Random 0-15 (0-F), bei y Random 0-3 + 8 = 8-11 (8-b) gemÃ¤ss RFC 4122\n      return value.toString(16); // Hexadezimales Zeichen zurÃ¼ckgeben\n    });\n  }\n\n\n\n  static recursiveMarkAsTouched = (f: FormArray | FormGroup) => {\n\n    if (f.controls) {\n      if (Array.isArray(f.controls)) {\n        // in this case it is a formArray\n        f.controls.forEach((c: FormArray) => {\n          c.markAsTouched()\n          if (c.controls) U.recursiveMarkAsTouched(c)\n        })\n      }\n      else {\n        // in this case it is a formGroup\n        if (f.controls['childControl']) {\n          const c = f.controls['childControl'] as FormArray;\n          c.markAsTouched()\n          if (c.controls) U.recursiveMarkAsTouched(c)\n\n        }\n      }\n    }\n  }\n\n  static propertyFieldKeyFromParams(fkProp: number, isOutgoing: boolean) {\n    return '_' + fkProp + '_' + (isOutgoing ? 'outgoing' : 'ingoing')\n  }\n\n\n  /**\n   * Helper function that converts given number to string\n   * but zero (=0) values return undefined.\n   */\n  static toStr0undef(val: number): string | undefined {\n    if (val === 0) return undefined\n    else if (val === undefined) return undefined\n    else if (val === null) return undefined\n    else return val.toString();\n  }\n  /**\n   * Helper function that converts given array to string\n   *\n   * If array contains 0, null or undefined, return underfined\n   */\n  static toStrContains0undef(vals: (number | boolean | string | object)[]): string | undefined {\n    let string = '';\n    for (let i = 0; i < vals.length; i++) {\n      const val = vals[i];\n\n      if (val === 0) return undefined;\n      else if (val === undefined) return undefined;\n      else if (val === null) return undefined\n      else if (i === 0) {\n        string = val.toString()\n      } else {\n        string = `${string}_${val.toString()}`\n      }\n    }\n\n    return string;\n  }\n}\n"]}