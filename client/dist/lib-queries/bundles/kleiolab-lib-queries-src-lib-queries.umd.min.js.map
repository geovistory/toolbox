{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@kleiolab/lib-queries/src/lib/queries/decorators/method-decorators.ts","ng://@kleiolab/lib-queries/src/lib/queries/functions/functions.ts","ng://@kleiolab/lib-queries/src/lib/queries/module/redux-queries.module.ts","ng://@kleiolab/lib-queries/src/lib/queries/selectors/dat.service.ts","ng://@kleiolab/lib-queries/src/lib/queries/services/should-pause.service.ts","ng://@kleiolab/lib-queries/src/lib/queries/selectors/dfh.service.ts","ng://@kleiolab/lib-queries/src/lib/queries/selectors/inf.service.ts","ng://@kleiolab/lib-queries/src/lib/queries/selectors/pro.service.ts","ng://@kleiolab/lib-queries/src/lib/queries/selectors/sys.service.ts","ng://@kleiolab/lib-queries/src/lib/queries/selectors/tab.service.ts","ng://@kleiolab/lib-queries/src/lib/queries/selectors/war.service.ts","ng://@kleiolab/lib-queries/src/lib/queries/services/schema-selectors.service.ts","ng://@kleiolab/lib-queries/src/lib/queries/services/active-project-pipes.service.ts","ng://@kleiolab/lib-queries/src/lib/queries/services/configuration-pipes.service.ts","ng://@kleiolab/lib-queries/src/lib/queries/services/information-basic-pipes.service.ts","ng://@kleiolab/lib-queries/src/lib/queries/services/information-pipes.service.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","cache","options","propertyKey","descriptor","refCount","Map","originalFunction","request","_i","uniq","JSON","stringify","has","boundOriginalFunction","bind","set","pipe","shareReplay","bufferSize","tag","name","join","get","spyTag","infTimePrimToTimePrimWithCal","infTimePrim","cal","julianDay","julian_day","duration","calendar","ReduxQueriesModule","parentModule","reduxModule","errors","Error","NgModule","args","declarations","imports","CommonModule","providers","type","Optional","SkipSelf","ReduxModule","Selector","ngRedux","configs","model","selector","indexKey","_this","all$","select","datRoot","x","DatDigitalSelections","_super","by_pk_entity__entity_version$","by_pk_entity$","by_pk_text$","tslib_1.__extends","latestVersion","pkDigital","map","versions","DatNamespaceSelections","by_fk_project$","DatChunkSelections","by_fk_text$","DatClassColumnMappingSelections","by_fk_column$","DatColumnSelections","by_fk_digital$","DatTextPropertySelections","by_fk_entity__fk_system_type$","DatSelector","digital$","datDefinitions","namespace$","chunk$","column$","class_column_mapping$","text_property$","Injectable","providedIn","NgRedux","DatActions","ShouldPauseService","shouldPause$","BehaviorSubject","slice$","dfhRoot","allNoPause$","switchMap","shouldPause","empty","noPause","DfhProfileSelections","by_pk_profile$","DfhClassSelections","by_pk_class$","by_basic_type$","DfhPropertySelections","pk_property__has_domain__has_range$","by_pk_property$","by_has_domain$","by_has_range$","by_is_has_type_subproperty$","DfhLabelSelections","by_fks$","by_fk_class__type$","by_fk_property__type$","by_fk_profile__type$","DfhSelector","pause","profile$","dfhDefinitions","class$","property$","label$","DfhActions","Selector$2","pkProject$","infRoot","equals","paginationSelector","pipePage","page","path","pagBy","paginateBy","subfieldIdToString","filter","count","undefined","start","offset","end","limit","obs$","combineLatestOrEmpty","pipeCount","pipePageLoadNeeded","trigger$","fromToString","getFromTo","first","loading","pipeItemsInProject","getFkEntity","items","pkProject","proRelsAndKey$","k","item","rel","throttleTime","proRels","itemsInProject","proRel","is_in_project","pipeItemInProject","of","InfPersistentItemSelections","_by_pk_entity$","_by_fk_class$","by_pk_entity_key$","ofProject","selection$","pk_entity","by_pk_entity_all$","by_fk_class_key$","InfTemporalEntitySelections","InfStatementSelections","by_fk_subject_data$","pagination$","by_subject$","foreignKeys","indexStatementBySubject","values","by_subject_and_property$","by_subject_and_property_indexed$","statementIdx","indexStatementBySubjectProperty","by_object$","indexStatementByObject","by_object_and_property$","by_object_and_property_indexed$","indexStatementByObjectProperty","InfTextPropertySelections","_by_fk_concerned_entity__fk_class_field$","_by_fk_concerned_entity$","by_fk_concerned_entity__fk_class_field_indexed$","by_fk_concerned_entity_indexed$","InfAppellationSelections","InfLangStringSelections","InfPlaceSelections","InfTimePrimitiveSelections","InfLanguageSelections","InfDimensionSelections","InfSelector","persistent_item$","infDefinitions","temporal_entity$","statement$","appellation$","place$","lang_string$","time_primitive$","language$","dimension$","pkEntityModelMap$","PR_ENTITY_MODEL_MAP","getModelOfEntity$","pkEntity","Selector$3","proRoot","part","toString","ProProjectSelector","ProInfoProjRelSelector","by_fk_project__fk_entity$","ProDfhClassProjRelSelector","by_fk_project__enabled_in_entities$","by_fk_project__fk_class$","ProDfhProfileProjRelSelector","by_fk_project__enabled$","by_fk_project__fk_profile$","ProClassFieldConfigSelector","ProTextPropertySelector","by_fks_without_lang$","ProAnalysisSelector","ProSelector","project$","proDefinitions","info_proj_rel$","dfh_class_proj_rel$","dfh_profile_proj_rel$","class_field_config$","analysis$","ProActions","sysRoot","SysSystemRelevantClassSelections","by_fk_class$","by_required_by_sources$","by_required$","SysConfigSelections","main$","SysSelector","system_relevant_class$","sysDefinitions","config$","SysActions","Selector$5","tabRoot","TabCellSelections","by_pk_cell$","by_fk_column_fk_row$","TabSelector","cell$","tabDefinitions","TabActions","Selector$6","warRoot","WarEntityPreviewSelector","WarSelector","entity_preview$","warDefinitions","WarActions","SchemaSelectorsService","dat$","tab$","pro$","dfh$","sys$","distinctUntilChanged","y","inf$","ActiveProjectPipesService","entityPreviewSocket","schemaService","requestedEntityPreviews","fromEvent","subscribe","disconnect","pks","keys","getState","war","entity_preview","emit","combineLatest","schemaObjectStored$","_a","_b","object","extendEntityPreviewStream","pipeActiveProject","l","pipeActiveDefaultLanguage","project","fk_language","streamEntityPreview","forceReload","by_pk_entity","pk","prev","EntityPreviewSocket","SchemaService","tslib_1.__decorate","Observable","ConfigurationPipesService","a","pipeProfilesEnabledByProject","projectProfileRels","enabled","fk_profile","DfhConfig","PK_PROFILE_GEOVISTORY_BASIC","pipeFields","pkClass","noNesting","indexed","domainClass","profiles","sourceKlass","outgoingProps","ingoingProps","sysConfig","enabledProfiles","isEnabled","prop","some","includes","outP","inP","ClASS_PK_TIME_SPAN","basic_type","createHasTimeSpanProperty","removed_from_api","has_domain","pk_property","PROPERTY_PK_P18_HAS_DEFINITION","has_range","domain_instances_max_quantifier","domain_instances_min_quantifier","range_instances_max_quantifier","range_instances_min_quantifier","identifier_in_namespace","identity_defining","is_inherited","is_has_type_subproperty","pipePropertiesToSubfields","pipeFieldConfigs","_d","subfields1","subfields2","fieldConfigs","subfields","fieldConfigIdx","indexBy","fk_domain_class","fk_range_class","fk_property","uniqFields","uniqSubfieldCache","subfields_1","tslib_1.__values","subfields_1_1","fieldId","sourceClass","property","pkProperty","isOutgoing","subfieldId","targetClass","fieldConfig","allSubfieldsRemovedFromAllProfiles","removedFromAllProfiles","targetClasses","targets","listType","targetClassLabel","isSpecialField","isHasTypeField","PROPERTY_PK_HAS_TIME_SPAN","sourceClassLabel","sourceMaxQuantity","sourceMinQuantity","targetMinQuantity","targetMaxQuantity","label","identityDefiningForSource","identityDefiningForTarget","ontoInfoLabel","ontoInfoUrl","placeOfDisplay","getPlaceOfDisplay","specialFields","_c","pipeSpecificFieldOfClass","fields","field","specificFields","sort","position","pipeBasicFieldsOfClass","basicFields","pipeFieldsForTeEnForm","allFields","whenField","find","typeField","pipeBasicAndSpecificFields","pipeSpecificAndBasicFields","properties","pipeSubfield","pipeSubfieldIdToSubfield","domain","range","dfhProp","sysConf","pipeClassLabel","tap","pipeSubfieldTypeOfClass","pipeFieldLabel","isRemovedFromAllProfiles","config","parentProperty","klass","pipeSubfieldType","classConfig","res","classes","pk_class","valueObjectType","typeItem","timeSpan","entityPreview","subentitySubfieldPage","fields_1","fields_1_1","nestedTargets","subTargetType","temporalEntity","isCircular","nestedPage","fkProperty","fkProject","activeProjectkey","proClassFieldConfgByProjectAndClassKey","fk_class_for_class_field","fk_project","defaultProjectkey","ProConfig","PK_PROJECT_OF_DEFAULT_CONFIG_PROJECT","activeProjectFields","defaultProjectFields","ord_num","language","pipeLabels","text","fk_system_type","SysConfig","PK_SYSTEM_TYPE__TEXT_PROPERTY__LABEL","console","warn","pipeProTextProperty","fk_dfh_class","fk_dfh_property","fk_dfh_property_domain","fkPropertyDomain","fk_dfh_property_range","fkPropertyRange","origin","string","pipeDfhLabel","iso6391","trim","fk_class","textPropertyByFksKey","dfhLabelByFksKey","pipeTableNameOfClass","targetClassPk","appellation","place","timePrimitive","langString","dimension","pipeClassesInEntitiesOrSources","pipeClassesEnabledInEntities","pipeClassesRequiredBySources","startWith","pipeClassesEnabledByProjectProfiles","classesByPk","profilesMap","profile","pipeTypeClassesEnabledByProjectProfiles","CLASS_PK_LANGUAGE","CLASS_PK_MANIFESTATION_PRODUCT_TYPE","rels","pipeSelectedTeEnClassesInProject","pipeTeEnClassesEnabledInEntities","pipeTeEnClassesRequiredBySources","cs","dfhClasses","filterTeEnCasses","pipeTypeAndTypedClasses","enabledIn","pks$","fromSources$","fromEntities$","arrayOfPkArrays","flatten","pipeTypeAndTypedClassesOfTypedClasses","pkTypedClasses","allHasTypeProps","byDomain","typedClass","typeClass","pipeTypeClassOfTypedClass","pkTypedClass","pipeTypedClassesOfTypeClasses","pkTypeClasses","pipeTypePropertyOfTypedClass","typeProp","pipeTargetClassesOfProperties","pkProperties","forEach","pkProp","subfield","projectFieldConfig","settings","hasTypeSubproperties","bySourceClass","outgoingProperties","incomingProperties","getSettingsFromSysConfig","displayInBasicFields","hidden","Number","POSITIVE_INFINITY","InformationBasicPipesService","timePrimitiveOfStatements","pipeInfTimePrimitive","fk_object_info","infTimePrimitive","statement","ipr","pipeStatements","pipeOutgoingStatements","pipeIngoingStatements","fk_subject_info","pipeOutgoingStatementsByProperty","pipeIngoingStatementsByProperty","pipeOutgoingBasicStatementItemsByProperty","statements","pipeBasicStatementItem","pipeIngoingBasicStatementItemsByProperty","projRel","ordNum","ord_num_of_range","ord_num_of_domain","pipeBasicStatementItemByPkStatement","pkStatement","pipeTimeSpan","_72","_71","_150","_151","_152","_153","TimeSpanUtil","p82","p81","p82a","p81a","p81b","p82b","pipeClassOfEntity","merge","pipeClassesOfPersistentItems","pkEntities","peIts","typePk","pipeRepoOutgoingStatements","pipeRepoIngoingStatements","pipeRepoOutgoingStatementsByProperty","rs","sortStatementsByRepoPopularity","slice","pipeRepoIngoingStatementsByProperty","pipeAlternativeBasicStatementItemByPkStatement","inrepo","pipeAlternativeIngoingStatements","inproject","omit","pipeAlternativeOutgoingStatements","pipePersistentItemPksByClass","ob","parseInt","pipeIconType","preview","entity_type","CLASS_PK_EXPRESSION_PORTION","CLASS_PKS_SOURCE_PE_IT","is_in_project_count","InfStatement","Boolean","InformationPipesService","timePrimitivePipe","timeSpanPipe","infRepo","pipeProjRelOfStatement","stmt","scope","inProject","pipeTargetOfStatement","targetInfo","subfieldType","fkClass","targetLabel","lat","long","fk_measurement_unit","unitPreview","numeric_value","entity_label","notes","entity","infoProjRel","timePrimWithCal","transform","pipeStatementWithTarget","pipeSubfieldPage","pkStmts","pkStmt","virtualStatementToTimeSpan","fkSourceEntity","subentityPages$","PROPERTY_PKS_WHERE_TIME_PRIMITIVE_IS_RANGE","notInProject","inRepo","trgts","CLASS_PK_TIME_PRIMITIVE","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__rest","timeSpanPreview","st","PROPERTY_PK_TO_EXISTENCE_TIME_KEY","stmtTarget","pipeLabelOfEntity","fkEntity","pipeClassLabelOfEntity","pipeTypeOfEntity","hasTypeProperty","pipeClassesAndTypes","pipeClassAndTypeNodes","pipeClassesAndTypesOfClasses","typeAndTypedClasses","data","pkType","node","iif","typePks","sortAbc","children","pipeClassesFromClassesAndTypes","classesAndTypes","types","typeClasses","typedClasses","pipePropertyOptionsFromClassesAndTypes","pipePropertyOptionsFormClasses","isTeEn","classFields","f","propertyFieldKey","propertyOptionFieldKey","pipePkClassesFromPropertySelectModel","ingoingProperties","out","ing","getPkClassesFromPropertySelectModel$","model$","getPropertyOptions$","classTypes$","TimePrimitivePipe","TimeSpanPipe","timeSpanItem","listDefinition"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// TODO DELETE\nimport { shareReplay } from 'rxjs/operators';\nimport { tag } from 'rxjs-spy/operators';\n\nexport interface CacheOptions {\n  refCount: boolean\n}\n/**\n * Decorator function for methods that take any argument and return an\n * obsevable. Decorated Methods will be extended by a cache:\n * For each call to the method with the same input arguments a cache\n * shareReplay operator is added, acting as a middleman subcribing to\n * the Source (the observable returned by the decorated function) and\n * emtting the latest value. Read more about shareReplay here:\n * https://itnext.io/the-magic-of-rxjs-sharing-operators-and-their-differences-3a03d699d255\n *\n * @options:\n */\n\nexport const cache = (options?: CacheOptions) => (target, propertyKey, descriptor) => {\n  const o: CacheOptions = {\n    // default option\n    refCount: true,\n    // override with custom options\n    ...options\n  }\n  const c = new Map()\n  const originalFunction = descriptor.value;\n  descriptor.value = function (...request) {\n    const uniq = JSON.stringify(request)\n    if (!c.has(uniq)) {\n      const boundOriginalFunction = originalFunction.bind(this)\n      // const x = target, y = propertyKey;\n      c.set(uniq, boundOriginalFunction(...request).pipe(\n        shareReplay({ refCount: o.refCount, bufferSize: 1 }),\n        tag(`FROM-CACHE-${target.constructor.name}::${propertyKey}::${request.join(':')}`)\n      ))\n    }\n    return c.get(uniq)\n  };\n  return descriptor;\n}\n\n\nexport function spyTag(target, propertyKey, descriptor) {\n  const originalFunction = descriptor.value;\n  descriptor.value = function (...request) {\n    const boundOriginalFunction = originalFunction.bind(this)\n    return boundOriginalFunction(...request).pipe(\n      tag(`${target.constructor.name}::${propertyKey}::${request.join(':')}`)\n    )\n  };\n  return descriptor;\n}\n","import { DfhConfig } from '@kleiolab/lib-config';\nimport { InfTimePrimitive, TimePrimitiveWithCal } from '@kleiolab/lib-sdk-lb4';\nimport { TimeSpanUtil } from '@kleiolab/lib-utils';\nimport { TimeSpanItem } from '../models/TimeSpanItem';\n\nexport function timeSpanItemToTimeSpan(timeSpanItem: TimeSpanItem): TimeSpanUtil {\n  const t = new TimeSpanUtil();\n\n  timeSpanItem.properties.forEach(p => {\n    const key = DfhConfig.PROPERTY_PK_TO_EXISTENCE_TIME_KEY[p.listDefinition.property.pkProperty]\n    if (p.items && p.items.length) t[key] = p.items[0].timePrimitive\n  })\n  return t;\n}\n\nexport function infTimePrimToTimePrimWithCal(infTimePrim: InfTimePrimitive, cal: TimePrimitiveWithCal.CalendarEnum): TimePrimitiveWithCal {\n  return {\n    julianDay: infTimePrim.julian_day,\n    duration: infTimePrim.duration as TimePrimitiveWithCal.DurationEnum,\n    calendar: cal,\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { ReduxModule } from '@kleiolab/lib-redux';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n  ],\n  providers: [\n\n  ]\n})\nexport class ReduxQueriesModule {\n  constructor(\n    @Optional() @SkipSelf() parentModule: ReduxQueriesModule,\n    @Optional() reduxModule: ReduxModule,\n  ) {\n    const errors: string[] = []\n    if (parentModule) errors.push('ReduxQueriesModule is already loaded. Import in your base AppModule only.');\n    if (!reduxModule) errors.push('You need to import the ReduxModule in your AppModule!');\n    if (errors.length) throw new Error(errors.join('\\n'));\n  }\n}\n","import { NgRedux } from '@angular-redux/store';\nimport { Injectable } from '@angular/core';\nimport { ByPk, DatActions, datDefinitions, datRoot, IAppState, ReducerConfigCollection } from '@kleiolab/lib-redux';\nimport { DatChunk, DatColumn, DatDigital, DatNamespace, DatTextProperty } from '@kleiolab/lib-sdk-lb3';\nimport { DatClassColumnMapping } from '@kleiolab/lib-sdk-lb4';\nimport { latestVersion } from '@kleiolab/lib-utils';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nclass Selector {\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { }\n\n  selector<M>(indexKey: string): { all$: Observable<ByPk<M>>, key: (x) => Observable<M> } {\n\n    const all$ = this.ngRedux.select<ByPk<M>>([datRoot, this.model, indexKey])\n    // .pipe(\n    //   distinctUntilChanged<M>(equals)\n    // )\n\n    const key = (x): Observable<M> => this.ngRedux.select<M>([datRoot, this.model, indexKey, x])\n    // .pipe(\n    //   distinctUntilChanged<M>(equals)\n    // )\n\n    return { all$, key }\n  }\n}\n\nclass DatDigitalSelections extends Selector {\n  public by_pk_entity__entity_version$ = this.selector<DatDigital>('by_pk_entity__entity_version')\n  public by_pk_entity$ = this.selector<ByPk<DatDigital>>('by_pk_entity')\n  public by_pk_text$ = this.selector<ByPk<DatDigital>>('by_pk_text')\n\n\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, configs, model) }\n\n  latestVersion(pkDigital: number): Observable<DatDigital> {\n    return this.by_pk_entity$.key(pkDigital).pipe(\n      map(versions => latestVersion(versions)),\n    )\n  }\n}\n\nclass DatNamespaceSelections extends Selector {\n  public by_pk_entity$ = this.selector<DatNamespace>('by_pk_entity')\n  public by_fk_project$ = this.selector<ByPk<DatNamespace>>('by_fk_project')\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, configs, model) }\n}\n\nclass DatChunkSelections extends Selector {\n  public by_pk_entity$ = this.selector<DatChunk>('by_pk_entity')\n  public by_fk_text$ = this.selector<ByPk<DatChunk>>('by_fk_text')\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, configs, model) }\n}\n\nclass DatClassColumnMappingSelections extends Selector {\n  public by_pk_entity$ = this.selector<DatClassColumnMapping>('by_pk_entity')\n  public by_fk_column$ = this.selector<ByPk<DatClassColumnMapping>>('by_fk_column')\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, configs, model) }\n}\n\nclass DatColumnSelections extends Selector {\n  public by_pk_entity$ = this.selector<DatColumn>('by_pk_entity')\n  public by_fk_digital$ = this.selector<ByPk<DatColumn>>('by_fk_digital')\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, configs, model) }\n}\n\nclass DatTextPropertySelections extends Selector {\n  public by_pk_entity$ = this.selector<DatTextProperty>('by_pk_entity')\n  public by_fk_entity__fk_system_type$ = this.selector<ByPk<DatTextProperty>>('by_fk_entity__fk_system_type')\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, configs, model) }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DatSelector extends DatActions {\n\n  digital$ = new DatDigitalSelections(this.ngRedux, datDefinitions, 'digital');\n  namespace$ = new DatNamespaceSelections(this.ngRedux, datDefinitions, 'namespace');\n  chunk$ = new DatChunkSelections(this.ngRedux, datDefinitions, 'chunk');\n  column$ = new DatColumnSelections(this.ngRedux, datDefinitions, 'column');\n  class_column_mapping$ = new DatClassColumnMappingSelections(this.ngRedux, datDefinitions, 'class_column_mapping');\n  text_property$ = new DatTextPropertySelections(this.ngRedux, datDefinitions, 'text_property');\n\n  constructor(public ngRedux: NgRedux<IAppState>) {\n    super(ngRedux)\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShouldPauseService {\n  shouldPause$ = new BehaviorSubject(false)\n  constructor() { }\n}\n","import { NgRedux } from '@angular-redux/store';\nimport { Injectable } from '@angular/core';\nimport { ByPk, DfhActions, DfhClassSlice, dfhDefinitions, DfhLabelSlice, DfhProfileSlice, DfhPropertySlice, dfhRoot, IAppState, ReducerConfigCollection } from '@kleiolab/lib-redux';\nimport { DfhClass, DfhLabel, DfhProfile, DfhProperty } from '@kleiolab/lib-sdk-lb4';\nimport { empty, Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { ShouldPauseService } from '../services/should-pause.service';\nclass Selector<Slice> {\n\n  slice$ = this.ngRedux.select<Slice>([dfhRoot, this.model])\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string,\n    public shouldPause$: Observable<boolean>\n  ) {\n  }\n\n  selector<M>(indexKey: string): { all$: Observable<ByPk<M>>, key: (x) => Observable<M>, noPause: { all$: Observable<ByPk<M>>, key: (x) => Observable<M> } } {\n\n    const allNoPause$ = this.ngRedux.select<ByPk<M>>([dfhRoot, this.model, indexKey]);\n    const all$ = this.shouldPause$.pipe(\n      switchMap(shouldPause => shouldPause ?\n        empty() :\n        allNoPause$\n      )\n    );\n\n    const keyNoPause = (x) => this.ngRedux.select<M>([dfhRoot, this.model, indexKey, x]);\n    const key = (x): Observable<M> => this.shouldPause$.pipe(\n      switchMap(shouldPause => shouldPause ?\n        empty() :\n        this.ngRedux.select<M>([dfhRoot, this.model, indexKey, x])\n      )\n    )\n\n    return { all$, key, noPause: { all$: allNoPause$, key: keyNoPause } }\n  }\n}\n// Profile Selectors\nclass DfhProfileSelections extends Selector<DfhProfileSlice> {\n  public by_pk_profile$ = this.selector<DfhProfile>('by_pk_profile');\n}\n\n// Class Selectors\nclass DfhClassSelections extends Selector<DfhClassSlice> {\n  public by_pk_class$ = this.selector<DfhClass>('by_pk_class');\n  public by_basic_type$ = this.selector<ByPk<DfhClass>>('by_basic_type');\n}\n\n// Property Selectors\nclass DfhPropertySelections extends Selector<DfhPropertySlice> {\n  public pk_property__has_domain__has_range$ = this.selector<DfhProperty>('by_pk_property__has_domain__has_range');\n  public by_pk_property$ = this.selector<ByPk<DfhProperty>>('by_pk_property');\n  // public by_has_domain__pk_property$ = this.selector<ByPk<DfhProperty>>('by_has_domain__fk_property');\n  // public by_has_range__pk_property$ = this.selector<ByPk<DfhProperty>>('by_has_range__fk_property');\n  public by_has_domain$ = this.selector<ByPk<DfhProperty>>('by_has_domain');\n  public by_has_range$ = this.selector<ByPk<DfhProperty>>('by_has_range');\n  public by_is_has_type_subproperty$ = this.selector<ByPk<DfhProperty>>('by_is_has_type_subproperty');\n}\n\n// Label Selectors\nclass DfhLabelSelections extends Selector<DfhLabelSlice> {\n  public by_fks$ = this.selector<DfhLabel>('by_fks');\n  public by_fk_class__type$ = this.selector<ByPk<DfhLabel>>('by_fk_class__type');\n  public by_fk_property__type$ = this.selector<ByPk<DfhLabel>>('by_fk_property__type');\n  public by_fk_profile__type$ = this.selector<ByPk<DfhLabel>>('by_fk_profile__type');\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DfhSelector extends DfhActions {\n\n  profile$ = new DfhProfileSelections(this.ngRedux, dfhDefinitions, 'profile', this.pause.shouldPause$)\n  class$ = new DfhClassSelections(this.ngRedux, dfhDefinitions, 'klass', this.pause.shouldPause$)\n  property$ = new DfhPropertySelections(this.ngRedux, dfhDefinitions, 'property', this.pause.shouldPause$)\n  label$ = new DfhLabelSelections(this.ngRedux, dfhDefinitions, 'label', this.pause.shouldPause$)\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public pause: ShouldPauseService\n  ) {\n    super(ngRedux)\n  }\n}\n","import { NgRedux } from '@angular-redux/store';\nimport { ByPk, EntityModelAndClass, getFromTo, IAppState, IndexStatementByObject, indexStatementByObject, IndexStatementByObjectProperty, indexStatementByObjectProperty, IndexStatementBySubject, indexStatementBySubject, IndexStatementBySubjectProperty, indexStatementBySubjectProperty, infDefinitions, infRoot, paginateBy, PR_ENTITY_MODEL_MAP, ReducerConfigCollection, subfieldIdToString } from '@kleiolab/lib-redux';\nimport { InfAppellation, InfDimension, InfLangString, InfLanguage, InfPersistentItem, InfPlace, InfStatement, InfTemporalEntity, InfTextProperty, InfTimePrimitive, ProInfoProjRel } from '@kleiolab/lib-sdk-lb3';\nimport { GvFieldId, GvFieldPage } from '@kleiolab/lib-sdk-lb4';\nimport { combineLatestOrEmpty } from '@kleiolab/lib-utils';\nimport { values } from 'd3';\nimport { equals } from 'ramda';\nimport { Observable, of, pipe } from 'rxjs';\nimport { filter, first, map, switchMap, throttleTime } from 'rxjs/operators';\nexport type InfModelName = 'persistent_item' | 'temporal_entity' | 'statement' | 'text_property' | 'appellation' | 'language' | 'place' | 'dimension' | 'lang_string' | 'time_primitive';\n\nclass Selector {\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public pkProject$: Observable<number | string>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { }\n\n  selector<M>(indexKey: string): { all$: Observable<ByPk<M>>, key: (x) => Observable<M> } {\n\n    const all$ = this.ngRedux.select<ByPk<M>>([infRoot, this.model, indexKey])\n    const key = (x): Observable<M> => {\n      // REMARK: 'equals' comparator is very very important for performance !\n      return this.ngRedux.select<M>([infRoot, this.model, indexKey, x], equals)\n    }\n    return { all$, key }\n  }\n\n  paginationSelector<M>() {\n\n    const pipePage = (page: GvFieldPage): Observable<M[]> => {\n      let path: any[];\n      const pagBy = paginateBy\n      const key = subfieldIdToString(page)\n      path = [infRoot, this.model, pagBy, key];\n      return this.ngRedux.select<number>([...path, 'count'])\n        .pipe(\n          filter(count => count !== undefined),\n          switchMap(count => {\n            const start = page.offset;\n            const end = count <= (start + page.limit) ? count : (start + page.limit);\n            const obs$: Observable<M>[] = [];\n            for (let i = start; i < end; i++) {\n              obs$.push(\n                this.ngRedux.select<M>([...path, 'rows', i]).pipe(filter(x => !!x))\n              )\n            }\n            return combineLatestOrEmpty(obs$)\n          })\n        )\n    }\n\n\n    const pipePageLoadNeeded = (page: GvFieldPage, trigger$: Observable<any>): Observable<boolean> => {\n      let path: any[];\n      const pagBy = paginateBy\n      const key = subfieldIdToString(page)\n\n      path = [infRoot, this.model, pagBy, key];\n      const fromToString = getFromTo(page.limit, page.offset)\n      // return this.ngRedux.select<boolean>([...path, 'loading', fromToString])\n      //   .pipe(\n      //     // map(loading => !loading),\n      //     switchMap((loading) => {\n      //       if (loading) return of(false)\n      //       else return trigger$.pipe(mapTo(true))\n      //     }),\n      //     // first(),\n      //   )\n\n      return trigger$.pipe(\n        switchMap(() => this.ngRedux.select<boolean>([...path, 'loading', fromToString])\n          .pipe(\n            first(),\n            map(loading => !loading)\n          )\n        ))\n\n    }\n\n\n    const pipeCount = (page: GvFieldId): Observable<number | undefined> => {\n      let path: any[];\n      const pagBy = paginateBy\n      const key = subfieldIdToString(page)\n\n      path = [infRoot, this.model, pagBy, key];\n      return this.ngRedux.select<number>([...path, 'count'])\n    }\n\n\n    return { pipePage, pipeCount, pipePageLoadNeeded }\n\n  }\n\n\n  pipeItemsInProject<M>(pkProject$: Observable<number | string>, getFkEntity: (item: M) => number) {\n\n    return pipe(\n      switchMap((items: ByPk<M>) => {\n        return pkProject$.pipe(\n          switchMap(pkProject => {\n            const proRelsAndKey$: Observable<{ key: string, rel: ProInfoProjRel }>[] = [];\n            for (const k in items) {\n              if (items.hasOwnProperty(k)) {\n                const item = items[k];\n                proRelsAndKey$.push(\n                  this.ngRedux.select<ProInfoProjRel>(['pro', 'info_proj_rel', 'by_fk_project__fk_entity', pkProject + '_' + getFkEntity(item)])\n                    .pipe(map(rel => ({ key: k, rel })))\n                )\n              }\n            }\n            return combineLatestOrEmpty(proRelsAndKey$).pipe(\n              throttleTime(0),\n              map(proRels => {\n                const itemsInProject: ByPk<M> = {};\n                for (let i = 0; i < proRels.length; i++) {\n                  const proRel = proRels[i];\n                  if (proRel.rel && proRel.rel.is_in_project) {\n                    itemsInProject[proRel.key] = items[proRel.key]\n                  }\n                }\n                return itemsInProject;\n              })\n            )\n          })\n        )\n\n      })\n    )\n\n  }\n\n  pipeItemInProject<M>(pkProject$: Observable<number | string>, getFkEntity: (item: M) => number) {\n    return pipe(\n      switchMap((item: M) => {\n        if (!item) return of(undefined);\n        return pkProject$.pipe(\n          switchMap(pkProject => {\n            const proRel$ = this.ngRedux.select<ProInfoProjRel>(['pro', 'info_proj_rel', 'by_fk_project__fk_entity', pkProject + '_' + getFkEntity(item)])\n            return proRel$.pipe(\n              // filter(proRel => proRel.is_in_project == true),\n              map((proRel) => proRel && proRel.is_in_project == true ? item : undefined)\n            )\n          })\n        )\n      })\n    )\n  }\n}\n\nclass InfPersistentItemSelections extends Selector {\n  private _by_pk_entity$ = this.selector<InfPersistentItem>('by_pk_entity')\n  private _by_fk_class$ = this.selector<ByPk<InfPersistentItem>>('by_fk_class')\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public pkProject$: Observable<number | string>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, pkProject$, configs, model) }\n\n  by_pk_entity_key$(key: string | number, ofProject = true) {\n    const selection$ = this._by_pk_entity$.key(key)\n    if (ofProject) return selection$.pipe(this.pipeItemInProject(this.pkProject$, (i) => i.pk_entity))\n    return selection$\n  }\n  by_pk_entity_all$(ofProject = true) {\n    const selection$ = this._by_pk_entity$.all$\n    if (ofProject) return selection$.pipe(this.pipeItemsInProject(this.pkProject$, (i) => i.pk_entity))\n    return selection$\n  }\n  by_fk_class_key$(key: string | number, ofProject = true) {\n    const selection$ = this._by_fk_class$.key(key)\n    if (ofProject) return selection$.pipe(this.pipeItemsInProject(this.pkProject$, (i) => i.pk_entity))\n    return selection$\n  }\n}\n\nclass InfTemporalEntitySelections extends Selector {\n  _by_pk_entity$ = this.selector<InfTemporalEntity>('by_pk_entity')\n  // public by_fk_class$ = this.selector<ByPk<InfTemporalEntity>>('by_fk_class')\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public pkProject$: Observable<number | string>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, pkProject$, configs, model) }\n\n  by_pk_entity_key$(key: string | number, ofProject = true) {\n    const selection$ = this._by_pk_entity$.key(key)\n    if (ofProject) return selection$.pipe(this.pipeItemInProject(this.pkProject$, (i) => i.pk_entity))\n    return selection$\n  }\n}\n\n\nclass InfStatementSelections extends Selector {\n\n  public by_pk_entity$ = this.selector<InfStatement>('by_pk_entity')\n  public by_fk_subject_data$ = this.selector<ByPk<InfStatement>>('by_fk_subject_data')\n\n  public pagination$ = this.paginationSelector<number>()\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public pkProject$: Observable<number | string>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, pkProject$, configs, model) }\n\n  by_pk_entity_key$(key: string | number, ofProject = true) {\n    const selection$ = this.by_pk_entity$.key(key)\n    if (ofProject) return selection$.pipe(this.pipeItemInProject(this.pkProject$, (i) => i.pk_entity))\n    return selection$\n  }\n\n  by_subject$(foreignKeys: IndexStatementBySubject, ofProject = true): Observable<InfStatement[]> {\n    const key = indexStatementBySubject(foreignKeys);\n    const selection$ = this.selector<ByPk<InfStatement>>('by_subject').key(key)\n    if (ofProject) {\n      return selection$.pipe(\n        this.pipeItemsInProject(this.pkProject$, (item) => item.pk_entity),\n        map(items => values(items))\n      )\n    }\n    return selection$.pipe(\n      map(items => values(items))\n    );\n  }\n\n  by_subject_and_property$(foreignKeys: IndexStatementBySubjectProperty, ofProject = true): Observable<InfStatement[]> {\n    return this.by_subject_and_property_indexed$(foreignKeys, ofProject).pipe(\n      map(statementIdx => values(statementIdx))\n    )\n  }\n  by_subject_and_property_indexed$(foreignKeys: IndexStatementBySubjectProperty, ofProject = true): Observable<ByPk<InfStatement>> {\n    const key = indexStatementBySubjectProperty(foreignKeys);\n    const selection$ = this.selector<ByPk<InfStatement>>('by_subject+property').key(key)\n    if (ofProject) {\n      return selection$.pipe(this.pipeItemsInProject(this.pkProject$, (item) => item.pk_entity))\n    }\n    return selection$\n  }\n\n  by_object$(foreignKeys: IndexStatementByObject, ofProject = true): Observable<InfStatement[]> {\n    const key = indexStatementByObject(foreignKeys);\n    const selection$ = this.selector<ByPk<InfStatement>>('by_object').key(key)\n    if (ofProject) {\n      return selection$.pipe(\n        this.pipeItemsInProject(this.pkProject$, (item) => item.pk_entity),\n        map(items => values(items))\n      )\n    }\n    return selection$.pipe(\n      map(items => values(items))\n    );\n  }\n\n  by_object_and_property$(foreignKeys: IndexStatementByObjectProperty, ofProject = true): Observable<InfStatement[]> {\n    return this.by_object_and_property_indexed$(foreignKeys, ofProject).pipe(\n      map(statementIdx => values(statementIdx))\n    )\n  }\n\n  by_object_and_property_indexed$(foreignKeys: IndexStatementByObjectProperty, ofProject = true): Observable<ByPk<InfStatement>> {\n    const key = indexStatementByObjectProperty(foreignKeys);\n    const selection$ = this.selector<ByPk<InfStatement>>('by_object+property').key(key)\n    if (ofProject) {\n      return selection$.pipe(\n        this.pipeItemsInProject(this.pkProject$, (item) => item.pk_entity),\n      )\n    }\n    return selection$\n  }\n\n}\n\n\nclass InfTextPropertySelections extends Selector {\n  private _by_pk_entity$ = this.selector<InfTextProperty>('by_pk_entity')\n  private _by_fk_concerned_entity__fk_class_field$ = this.selector<ByPk<InfTextProperty>>('by_fk_concerned_entity__fk_class_field')\n  private _by_fk_concerned_entity$ = this.selector<ByPk<InfTextProperty>>('by_fk_concerned_entity')\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public pkProject$: Observable<number | string>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, pkProject$, configs, model) }\n\n  by_pk_entity_key$(key: string | number, ofProject = true) {\n    const selection$ = this._by_pk_entity$.key(key)\n    if (ofProject) return selection$.pipe(this.pipeItemInProject(this.pkProject$, (i) => i.pk_entity))\n    return selection$\n  }\n\n  by_fk_concerned_entity__fk_class_field_indexed$(key: string, ofProject = true): Observable<ByPk<InfTextProperty>> {\n    const selection$ = this._by_fk_concerned_entity__fk_class_field$.key(key)\n    if (ofProject) {\n      return selection$.pipe(\n        this.pipeItemsInProject(this.pkProject$, (item) => item.pk_entity),\n      )\n    }\n    return selection$\n  }\n\n\n  by_fk_concerned_entity_indexed$(key: string | number, ofProject = true): Observable<ByPk<InfTextProperty>> {\n    const selection$ = this._by_fk_concerned_entity$.key(key)\n    if (ofProject) {\n      return selection$.pipe(\n        this.pipeItemsInProject(this.pkProject$, (item) => item.pk_entity),\n      )\n    }\n    return selection$\n  }\n\n}\n\n\nclass InfAppellationSelections extends Selector {\n  public by_pk_entity$ = this.selector<InfAppellation>('by_pk_entity')\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public pkProject$: Observable<number | string>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, pkProject$, configs, model) }\n}\n\nclass InfLangStringSelections extends Selector {\n  public by_pk_entity$ = this.selector<InfLangString>('by_pk_entity')\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public pkProject$: Observable<number | string>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, pkProject$, configs, model) }\n}\n\nclass InfPlaceSelections extends Selector {\n  public by_pk_entity$ = this.selector<InfPlace>('by_pk_entity')\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public pkProject$: Observable<number | string>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, pkProject$, configs, model) }\n}\n\nclass InfTimePrimitiveSelections extends Selector {\n  public by_pk_entity$ = this.selector<InfTimePrimitive>('by_pk_entity')\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public pkProject$: Observable<number | string>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, pkProject$, configs, model) }\n}\n\nclass InfLanguageSelections extends Selector {\n  public by_pk_entity$ = this.selector<InfLanguage>('by_pk_entity')\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public pkProject$: Observable<number | string>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, pkProject$, configs, model) }\n}\n\nclass InfDimensionSelections extends Selector {\n  public by_pk_entity$ = this.selector<InfDimension>('by_pk_entity')\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public pkProject$: Observable<number | string>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, pkProject$, configs, model) }\n}\n\nexport class InfSelector {\n\n  persistent_item$ = new InfPersistentItemSelections(this.ngRedux, this.pkProject$, infDefinitions, 'persistent_item');\n  temporal_entity$ = new InfTemporalEntitySelections(this.ngRedux, this.pkProject$, infDefinitions, 'temporal_entity');\n  statement$ = new InfStatementSelections(this.ngRedux, this.pkProject$, infDefinitions, 'statement');\n  appellation$ = new InfAppellationSelections(this.ngRedux, this.pkProject$, infDefinitions, 'appellation');\n  place$ = new InfPlaceSelections(this.ngRedux, this.pkProject$, infDefinitions, 'place');\n  text_property$ = new InfTextPropertySelections(this.ngRedux, this.pkProject$, infDefinitions, 'text_property');\n  lang_string$ = new InfLangStringSelections(this.ngRedux, this.pkProject$, infDefinitions, 'lang_string');\n  time_primitive$ = new InfTimePrimitiveSelections(this.ngRedux, this.pkProject$, infDefinitions, 'time_primitive');\n  language$ = new InfLanguageSelections(this.ngRedux, this.pkProject$, infDefinitions, 'language');\n  dimension$ = new InfDimensionSelections(this.ngRedux, this.pkProject$, infDefinitions, 'dimension');\n\n  pkEntityModelMap$ = this.ngRedux.select([infRoot, PR_ENTITY_MODEL_MAP]);\n  constructor(public ngRedux: NgRedux<IAppState>, public pkProject$: Observable<number | string>) { }\n\n  getModelOfEntity$(pkEntity: number) {\n    return this.ngRedux.select<EntityModelAndClass<InfModelName>>([infRoot, PR_ENTITY_MODEL_MAP, pkEntity]);\n  }\n}\n","import { NgRedux } from '@angular-redux/store';\nimport { Injectable } from '@angular/core';\nimport { ByPk, IAppState, ProActions, proDefinitions, proRoot, ReducerConfigCollection } from '@kleiolab/lib-redux';\nimport { ProDfhClassProjRel, ProDfhProfileProjRel, ProInfoProjRel, ProTextProperty } from '@kleiolab/lib-sdk-lb3';\nimport { ProAnalysis, ProClassFieldConfig, ProProject } from '@kleiolab/lib-sdk-lb4';\nimport { toString } from 'ramda';\nimport { Observable } from 'rxjs';\n\n\n\n\nclass Selector {\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { }\n\n  selector<M>(indexKey: string): { all$: Observable<ByPk<M>>, key: (x: string | (string | number)[]) => Observable<M> } {\n\n    const all$ = this.ngRedux.select<ByPk<M>>([proRoot, this.model, indexKey])\n\n    const key = (x: string | (string | number)[]): Observable<M> => {\n      const k = typeof x === 'string' ? x : x.map((part: string | number) => toString(part)).join('_');;\n\n      return this.ngRedux.select<M>([proRoot, this.model, indexKey, k])\n    }\n\n    return { all$, key }\n  }\n}\n\nclass ProProjectSelector extends Selector {\n  public by_pk_entity$ = this.selector<ProProject>('by_pk_entity')\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, configs, model) }\n}\n\n\nclass ProInfoProjRelSelector extends Selector {\n  public by_fk_project__fk_entity$ = this.selector<ProInfoProjRel>('by_fk_project__fk_entity')\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, configs, model) }\n}\n\n\nclass ProDfhClassProjRelSelector extends Selector {\n  public by_fk_project__enabled_in_entities$ = this.selector<ByPk<ProDfhClassProjRel>>('by_fk_project__enabled_in_entities')\n  public by_fk_project__fk_class$ = this.selector<ProDfhClassProjRel>('by_fk_project__fk_class')\n  public by_fk_project$ = this.selector<ProDfhClassProjRel>('by_fk_project')\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, configs, model) }\n}\n\nclass ProDfhProfileProjRelSelector extends Selector {\n  public by_fk_project__enabled$ = this.selector<ByPk<ProDfhProfileProjRel>>('by_fk_project__enabled')\n  public by_fk_project__fk_profile$ = this.selector<ProDfhProfileProjRel>('by_fk_project__fk_profile')\n  public by_fk_project$ = this.selector<ProDfhProfileProjRel>('by_fk_project')\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, configs, model) }\n}\n\nclass ProClassFieldConfigSelector extends Selector {\n  public by_fk_project__fk_class$ = this.selector<ByPk<ProClassFieldConfig>>('by_fk_project__fk_class')\n  public by_pk_entity$ = this.selector<ProClassFieldConfig>('by_pk_entity')\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, configs, model) }\n}\n\n\nclass ProTextPropertySelector extends Selector {\n  public by_fks$ = this.selector<ProTextProperty>('by_fks')\n  public by_fks_without_lang$ = this.selector<ByPk<ProTextProperty>>('by_fks_without_lang')\n  // public fk_project__fk_dfh_property__fk_dfh_property_domain__fk_system_type__fk_language$ = this.selector<ByPk<ProTextProperty>>('fk_project__fk_dfh_property__fk_dfh_property_domain__fk_system_type__fk_language')\n  // public fk_project__fk_dfh_property__fk_dfh_property_range__fk_system_type__fk_language$ = this.selector<ByPk<ProTextProperty>>('fk_project__fk_dfh_property__fk_dfh_property_range__fk_system_type__fk_language')\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, configs, model) }\n}\n\n\nclass ProAnalysisSelector extends Selector {\n\n  public by_pk_entity$ = this.selector<ProAnalysis>('by_pk_entity')\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, configs, model) }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProSelector extends ProActions {\n\n  project$ = new ProProjectSelector(this.ngRedux, proDefinitions, 'project');\n  info_proj_rel$ = new ProInfoProjRelSelector(this.ngRedux, proDefinitions, 'info_proj_rel');\n  dfh_class_proj_rel$ = new ProDfhClassProjRelSelector(this.ngRedux, proDefinitions, 'dfh_class_proj_rel');\n  dfh_profile_proj_rel$ = new ProDfhProfileProjRelSelector(this.ngRedux, proDefinitions, 'dfh_profile_proj_rel');\n  class_field_config$ = new ProClassFieldConfigSelector(this.ngRedux, proDefinitions, 'class_field_config');\n  text_property$ = new ProTextPropertySelector(this.ngRedux, proDefinitions, 'text_property');\n  analysis$ = new ProAnalysisSelector(this.ngRedux, proDefinitions, 'analysis');\n\n  constructor(public ngRedux: NgRedux<IAppState>) {\n    super(ngRedux)\n  }\n}\n","import { NgRedux } from '@angular-redux/store';\nimport { ByPk, IAppState, ReducerConfigCollection, SysActions, SysConfigSlice, sysDefinitions, SysRelevantClassSlice, sysRoot } from '@kleiolab/lib-redux';\nimport { SysSystemRelevantClass } from '@kleiolab/lib-sdk-lb3';\nimport { SysConfigValue } from '@kleiolab/lib-sdk-lb4';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\nclass Selector<Slice> {\n\n  slice$ = this.ngRedux.select<Slice>([sysRoot, this.model])\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { }\n\n  selector<M>(indexKey: string): { all$: Observable<ByPk<M>>, key: (x) => Observable<M> } {\n\n    const all$ = this.ngRedux.select<ByPk<M>>([sysRoot, this.model, indexKey])\n\n    const key = (x): Observable<M> => this.ngRedux.select<M>([sysRoot, this.model, indexKey, x])\n\n    return { all$, key }\n  }\n}\n\n// SystemRelevantClass Selectors\nclass SysSystemRelevantClassSelections extends Selector<SysRelevantClassSlice> {\n  public by_pk_entity$ = this.selector<SysSystemRelevantClass>('by_pk_entity');\n  public by_fk_class$ = this.selector<ByPk<SysSystemRelevantClass>>('by_fk_class');\n  public by_required_by_sources$ = this.selector<ByPk<SysSystemRelevantClass>>('by_required_by_sources');\n  public by_required$ = this.selector<ByPk<SysSystemRelevantClass>>('by_required');\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, configs, model) }\n}\n\n// // AnalysisType Selectors\n// class SysAnalysisTypeSelections extends Selector<SysAnalysisTypeSlice> {\n//   public by_pk_entity$ = this.selector<SysAnalysisType>('by_pk_entity');\n//   constructor(\n//     public ngRedux: NgRedux<IAppState>,\n//     public configs: ReducerConfigCollection,\n//     public model: string\n//   ) { super(ngRedux, configs, model) }\n// }\n\n\n// Config Selectors\nclass SysConfigSelections extends Selector<SysConfigSlice> {\n  public main$ = this.ngRedux.select<SysConfigValue>([sysRoot, this.model, 'by_main', 'main'])\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, configs, model) }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SysSelector extends SysActions {\n  system_relevant_class$ = new SysSystemRelevantClassSelections(this.ngRedux, sysDefinitions, 'system_relevant_class')\n  // analysis_type$ = new SysAnalysisTypeSelections(this.ngRedux, sysDefinitions, 'analysis_type')\n\n  config$ = new SysConfigSelections(this.ngRedux, sysDefinitions, 'config')\n}\n","import { NgRedux } from '@angular-redux/store';\nimport { Injectable } from '@angular/core';\nimport { ByPk, IAppState, ReducerConfigCollection, TabActions, tabDefinitions, tabRoot } from '@kleiolab/lib-redux';\nimport { TabCell } from '@kleiolab/lib-sdk-lb4';\nimport { Observable } from 'rxjs';\n\nclass Selector {\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { }\n\n  selector<M>(indexKey: string): { all$: Observable<ByPk<M>>, key: (x) => Observable<M> } {\n\n    const all$ = this.ngRedux.select<ByPk<M>>([tabRoot, this.model, indexKey])\n\n    const key = (x): Observable<M> => this.ngRedux.select<M>([tabRoot, this.model, indexKey, x])\n\n    return { all$, key }\n  }\n}\n\nclass TabCellSelections extends Selector {\n  public by_pk_cell$ = this.selector<TabCell>('by_pk_cell')\n  public by_fk_column_fk_row$ = this.selector<ByPk<TabCell>>('by_fk_column_fk_row')\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, configs, model) }\n\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TabSelector extends TabActions {\n\n  cell$ = new TabCellSelections(this.ngRedux, tabDefinitions, 'cell');\n\n  constructor(public ngRedux: NgRedux<IAppState>) {\n    super(ngRedux)\n  }\n\n}\n","import { NgRedux } from '@angular-redux/store';\nimport { Injectable } from '@angular/core';\nimport { ByPk, IAppState, ReducerConfigCollection, WarActions, warDefinitions, warRoot } from '@kleiolab/lib-redux';\nimport { WarEntityPreview } from '@kleiolab/lib-sdk-lb4';\nimport { toString } from 'ramda';\nimport { Observable } from 'rxjs';\n\n\nclass Selector {\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { }\n\n  selector<M>(indexKey: string): { all$: Observable<ByPk<M>>, key: (x: string | (string | number)[]) => Observable<M> } {\n\n    const all$ = this.ngRedux.select<ByPk<M>>([warRoot, this.model, indexKey])\n\n    const key = (x: string | (string | number)[]): Observable<M> => {\n      const k = typeof x === 'string' ? x : x.map((part: string | number) => toString(part)).join('_');;\n\n      return this.ngRedux.select<M>([warRoot, this.model, indexKey, k])\n    }\n\n    return { all$, key }\n  }\n}\n\nclass WarEntityPreviewSelector extends Selector {\n  public by_pk_entity$ = this.selector<WarEntityPreview>('by_pk_entity')\n\n  constructor(\n    public ngRedux: NgRedux<IAppState>,\n    public configs: ReducerConfigCollection,\n    public model: string\n  ) { super(ngRedux, configs, model) }\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WarSelector extends WarActions {\n\n  entity_preview$ = new WarEntityPreviewSelector(this.ngRedux, warDefinitions, 'entity_preview');\n\n  constructor(public ngRedux: NgRedux<IAppState>) {\n    super(ngRedux)\n  }\n}\n","import { NgRedux } from '@angular-redux/store';\nimport { Injectable } from '@angular/core';\nimport { IAppState } from '@kleiolab/lib-redux';\nimport { distinctUntilChanged, filter } from 'rxjs/operators';\nimport { InfSelector } from '../selectors/inf.service';\nimport { DatSelector } from '../selectors/dat.service';\nimport { TabSelector } from '../selectors/tab.service';\nimport { ProSelector } from '../selectors/pro.service';\nimport { DfhSelector } from '../selectors/dfh.service';\nimport { SysSelector } from '../selectors/sys.service';\n\n/**\n * This class provides access to the part of the redux store\n * that mirrors the geovistory schema (inf, dat, sys, etc.)\n *\n * The selecors of inf are wrapped into helpers that select\n * the items that are in the current project (redux.activeProject)\n * using pro.info_proj_rel\n *\n * All other selectors (dat, sys, tab, pro, dfh) are directly\n * accessing the store.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SchemaSelectorsService {\n  inf$: InfSelector;\n\n  constructor(\n    ngRedux: NgRedux<IAppState>,\n    public dat$: DatSelector,\n    public tab$: TabSelector,\n    public pro$: ProSelector,\n    public dfh$: DfhSelector,\n    public sys$: SysSelector,\n  ) {\n    const pkProject$ = ngRedux.select<number>(['activeProject', 'pk_project']).pipe(\n      filter(p => p !== undefined),\n      distinctUntilChanged((x, y) => {\n        return x === y\n      })\n    );\n    this.inf$ = new InfSelector(ngRedux, pkProject$);\n  }\n}\n","import { NgRedux } from '@angular-redux/store';\nimport { Injectable } from '@angular/core';\nimport { IAppState, SchemaService } from '@kleiolab/lib-redux';\nimport { GvSchemaObject, InfLanguage, ProProject, WarEntityPreview } from '@kleiolab/lib-sdk-lb4';\nimport { EntityPreviewSocket } from '@kleiolab/lib-sockets';\nimport { equals } from 'ramda';\nimport { combineLatest, Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, first, switchMap } from 'rxjs/operators';\nimport { cache } from '../decorators/method-decorators';\nimport { SchemaSelectorsService } from './schema-selectors.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ActiveProjectPipesService {\n  public pkProject$: Observable<number>;\n\n  requestedEntityPreviews: { [pkEntity: number]: boolean } = {}\n\n\n  constructor(\n    private ngRedux: NgRedux<IAppState>,\n    private s: SchemaSelectorsService,\n    private entityPreviewSocket: EntityPreviewSocket,\n    private schemaService: SchemaService\n\n  ) {\n    this.pkProject$ = ngRedux.select<number>(['activeProject', 'pk_project'])\n      .pipe(\n        filter(p => p !== undefined),\n        distinctUntilChanged((x, y) => {\n          return x === y\n        })\n      );\n\n\n\n    this.entityPreviewSocket.fromEvent('reconnect').subscribe(disconnect => {\n      // get all EntityPreview keys from state and send them to the\n      // server so that they will be streamed. This is important for\n      // when connection was lost.\n      this.pkProject$.pipe(first())\n        .subscribe((pkProject) => {\n          const pks = Object.keys({\n            ...this.ngRedux.getState().war.entity_preview,\n            ...this.requestedEntityPreviews\n          });\n          if (pks.length) {\n            this.entityPreviewSocket.emit('addToStream', {\n              pkProject,\n              pks\n            })\n          }\n        })\n    })\n\n    combineLatest(this.schemaService.schemaObjectStored$, this.pkProject$).subscribe(([object, pkProject]) => {\n      this.extendEntityPreviewStream(object, pkProject)\n    })\n\n  }\n  @cache({ refCount: false }) pipeActiveProject(): Observable<ProProject> {\n    return this.pkProject$.pipe(\n      switchMap(pkProject => this.s.pro$.project$.by_pk_entity$.key(pkProject.toString()))\n    ).pipe(filter(l => !!l))\n  }\n  @cache({ refCount: false }) pipeActiveDefaultLanguage(): Observable<InfLanguage> {\n\n    return this.pipeActiveProject().pipe(\n      filter(p => !!p),\n      switchMap(project => {\n\n        return this.s.inf$.language$.by_pk_entity$.key(project.fk_language.toString())\n      })\n    ).pipe(filter(l => !!l))\n  }\n\n\n\n  /**\n   * Loads a data unit preview, if it is not yet available in state or if\n   * forceReload is true;\n   *\n   * @param pkEntity\n   * @param forceReload\n   */\n  streamEntityPreview(pkEntity: number, forceReload?: boolean): Observable<WarEntityPreview> {\n    const state = this.ngRedux.getState();\n\n    if (\n      (\n        !(((state.war || {}).entity_preview || {}).by_pk_entity || {})[pkEntity] &&\n        !this.requestedEntityPreviews[pkEntity]\n      ) || forceReload) {\n      this.pkProject$.pipe(first(pk => !!pk)).subscribe(pkProject => {\n\n        this.entityPreviewSocket.emit('addToStream', {\n          pkProject,\n          pks: [pkEntity]\n        })\n        // const pkUiContext = SysConfig.PK_UI_CONTEXT_DATAUNITS_EDITABLE;\n\n        // this.ngRedux.dispatch(this.actions.loadEntityPreview(pkProject, pkEntity, pkUiContext))\n        this.requestedEntityPreviews[pkEntity] = true;\n      })\n    }\n\n    return this.ngRedux.select<WarEntityPreview>(['war', 'entity_preview', 'by_pk_entity', pkEntity])\n      .pipe(\n        distinctUntilChanged<WarEntityPreview>(equals),\n        filter(prev => (!!prev))\n      )\n  }\n\n  /**\n   * Adds the entity previews to the streamed entity previews (for ws communication)\n   * @param object\n   * @param pkProject\n   */\n  private extendEntityPreviewStream(object: GvSchemaObject, pkProject: number) {\n\n    if (object && object.war && object.war.entity_preview && object.war.entity_preview.length) {\n      this.entityPreviewSocket.emit('extendStream', {\n        pkProject,\n        pks: object.war.entity_preview.map(p => p.pk_entity)\n      });\n    }\n  }\n}\n","\nimport { Injectable } from '@angular/core';\nimport { DfhConfig, ProConfig, SysConfig } from '@kleiolab/lib-config';\nimport { dfhLabelByFksKey, proClassFieldConfgByProjectAndClassKey, textPropertyByFksKey } from '@kleiolab/lib-redux';\nimport { ClassConfig, DfhClass, DfhLabel, DfhProperty, GvSubentitFieldPageReq, GvSubentityFieldTargets, GvSubentityTargetType, GvTargetType, InfLanguage, ProClassFieldConfig, ProTextProperty, RelatedProfile, SysConfigFieldDisplay, SysConfigSpecialFields, SysConfigValue } from '@kleiolab/lib-sdk-lb4';\nimport { combineLatestOrEmpty } from '@kleiolab/lib-utils';\nimport { flatten, indexBy, uniq, values } from 'ramda';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { filter, map, shareReplay, startWith, switchMap, tap } from 'rxjs/operators';\nimport { cache } from '../decorators/method-decorators';\nimport { Field } from '../models/Field';\nimport { FieldPlaceOfDisplay } from '../models/FieldPosition';\nimport { Profiles } from '../models/Profiles';\nimport { SpecialFieldType } from '../models/SpecialFieldType';\nimport { Subfield } from '../models/Subfield';\nimport { ActiveProjectPipesService } from './active-project-pipes.service';\nimport { SchemaSelectorsService } from './schema-selectors.service';\n\n\n// this is the\nexport type TableName = 'appellation' | 'language' | 'place' | 'time_primitive' | 'lang_string' | 'dimension' | 'persistent_item' | 'temporal_entity'\n\nexport interface DfhPropertyStatus extends DfhProperty {\n  // true, if removed from all profiles of the current project\n  removedFromAllProfiles: boolean\n}\n\ntype LabelOrigin = 'of project in project lang' | 'of default project in project lang' | 'of default project in english' | 'of ontome in project lang' | 'of ontome in english'\n@Injectable({\n  providedIn: 'root'\n})\n\n/**\n * This Service provides a collection of pipes that aggregate or transform configuration data.\n * When talking about configuration, we mean the conceptual reference model and the additional\n * configurations on system and project level.\n * For Example\n * - the fields of a class\n * - the labels of classes and properties\n */\nexport class ConfigurationPipesService {\n\n  constructor(\n    private a: ActiveProjectPipesService,\n    private s: SchemaSelectorsService,\n  ) { }\n\n\n  /**\n  * returns observable number[] wher the numbers are the pk_profile\n  * of all profiles that are enabled by the given project.\n  * The array will always include PK_PROFILE_GEOVISTORY_BASIC\n  */\n  // @spyTag\n  // @cache({ refCount: false })\n  public pipeProfilesEnabledByProject(): Observable<number[]> {\n    return this.a.pkProject$.pipe(\n      switchMap(pkProject => this.s.pro$.dfh_profile_proj_rel$.by_fk_project__enabled$\n        .key(pkProject + '_true').pipe(\n          map(projectProfileRels => values(projectProfileRels)\n            .filter(rel => rel.enabled)\n            .map(rel => rel.fk_profile)\n          ),\n          map(enabled => [...enabled, DfhConfig.PK_PROFILE_GEOVISTORY_BASIC]),\n        )),\n      shareReplay()\n    )\n  }\n\n  /**\n   * Pipe all fields of given class\n   * The Fields are not ordered and not filtered\n   * If you want specific subsets of Fields and/or ordered Fields, use the pipes\n   * that build on this pipe.\n   */\n  @cache({ refCount: false }) public pipeFields(pkClass: number, noNesting = false): Observable<Field[]> {\n\n    return combineLatest(\n      // pipe source class\n      this.s.dfh$.class$.by_pk_class$.key(pkClass),\n      // pipe outgoing properties\n      this.s.dfh$.property$.by_has_domain$.key(pkClass).pipe(map(indexed => values(indexed))),\n      // pipe ingoing properties\n      this.s.dfh$.property$.by_has_range$.key(pkClass).pipe(map(indexed => values(indexed))),\n      // pipe sys config\n      this.s.sys$.config$.main$.pipe(filter(x => !!x)),\n      // pipe enabled profiles\n      this.pipeProfilesEnabledByProject(),\n    ).pipe(\n      switchMap(([sourceKlass, outgoingProps, ingoingProps, sysConfig, enabledProfiles]) => {\n        const isEnabled = (prop: DfhProperty): boolean => enabledProfiles.some(\n          (enabled) => prop.profiles.map(p => p.fk_profile).includes(enabled)\n        );\n        const outP = outgoingProps.filter((prop) => isEnabled(prop))\n        let inP = ingoingProps.filter((prop) => isEnabled(prop))\n\n        if (pkClass === DfhConfig.ClASS_PK_TIME_SPAN) {\n          // remove the has time span property\n          inP = []\n\n        } else {\n          // // if class is not appellation for language, add appellation for language (1111) property\n          // if (pkClass !== DfhConfig.CLASS_PK_APPELLATION_FOR_LANGUAGE) {\n          //   ingoingProps.push(createAppellationProperty(pkClass))\n          // }\n\n          // if is temporal entity, add has time span property\n          if (sourceKlass.basic_type === 9) {\n            outP.push(createHasTimeSpanProperty(pkClass))\n          }\n\n          outP.push(createHasDefinitionProperty(pkClass))\n        }\n        return combineLatest(\n          this.pipePropertiesToSubfields(outP, true, enabledProfiles, sysConfig, noNesting),\n          this.pipePropertiesToSubfields(inP, false, enabledProfiles, sysConfig, noNesting),\n          this.pipeFieldConfigs(pkClass)\n        ).pipe(\n          map(([subfields1, subfields2, fieldConfigs]) => {\n            const subfields = [...subfields1, ...subfields2]\n\n            const fieldConfigIdx = indexBy((x) => [\n              (x.fk_domain_class || x.fk_range_class),\n              x.fk_property,\n              !!x.fk_domain_class\n            ].join('_'), fieldConfigs)\n\n            const uniqFields: { [uid: string]: Field } = {}\n            const uniqSubfieldCache: { [uid: string]: true } = {}\n\n\n            // group by source, pkProperty and isOutgoing\n            for (const s of subfields) {\n              const fieldId = [s.sourceClass, s.property.pkProperty, s.isOutgoing].join('_')\n              const subfieldId = [s.sourceClass, s.property.pkProperty, s.isOutgoing, s.targetClass].join('_')\n              const fieldConfig: ProClassFieldConfig | undefined = fieldConfigIdx[fieldId];\n              // the first time the group is established\n              if (!uniqFields[fieldId]) {\n                let isSpecialField: SpecialFieldType = false;\n                if (s.isHasTypeField) isSpecialField = 'has-type';\n                else if (s.property.pkProperty === DfhConfig.PROPERTY_PK_HAS_TIME_SPAN) isSpecialField = 'time-span';\n                uniqFields[fieldId] = {\n                  sourceClass: s.sourceClass,\n                  sourceClassLabel: s.sourceClassLabel,\n                  sourceMaxQuantity: s.sourceMaxQuantity,\n                  sourceMinQuantity: s.sourceMinQuantity,\n                  targetMinQuantity: s.targetMinQuantity,\n                  targetMaxQuantity: s.targetMaxQuantity,\n                  label: s.label,\n                  isHasTypeField: s.isHasTypeField,\n                  property: s.property,\n                  isOutgoing: s.isOutgoing,\n                  identityDefiningForSource: s.identityDefiningForSource,\n                  identityDefiningForTarget: s.identityDefiningForTarget,\n                  ontoInfoLabel: s.ontoInfoLabel,\n                  ontoInfoUrl: s.ontoInfoUrl,\n                  allSubfieldsRemovedFromAllProfiles: s.removedFromAllProfiles,\n                  targetClasses: [s.targetClass],\n                  fieldConfig,\n                  placeOfDisplay: getPlaceOfDisplay(sysConfig.specialFields, s, fieldConfig),\n                  isSpecialField,\n                  targets: {\n                    [s.targetClass]: {\n                      listType: s.listType,\n                      removedFromAllProfiles: s.removedFromAllProfiles,\n                      targetClass: s.targetClass,\n                      targetClassLabel: s.targetClassLabel\n                    }\n                  }\n                }\n\n                // mark subfield as added\n                uniqSubfieldCache[subfieldId] = true;\n\n\n              }\n              // ignore duplications of subfields\n              else if (!uniqSubfieldCache[subfieldId]) {\n                uniqFields[fieldId].allSubfieldsRemovedFromAllProfiles === false ?\n                  uniqFields[fieldId].allSubfieldsRemovedFromAllProfiles = false :\n                  uniqFields[fieldId].allSubfieldsRemovedFromAllProfiles = s.removedFromAllProfiles;\n                uniqFields[fieldId].targetClasses.push(s.targetClass)\n                uniqFields[fieldId].targets[s.targetClass] = {\n                  listType: s.listType,\n                  removedFromAllProfiles: s.removedFromAllProfiles,\n                  targetClass: s.targetClass,\n                  targetClassLabel: s.targetClassLabel\n                }\n              }\n            }\n\n            return values(uniqFields)\n          })\n        )\n      })\n    )\n  }\n\n\n\n  /**\n   * pipe all the specific fields of a class,\n   * ordered by the position of the field within the specific fields\n   */\n  // @spyTag\n  @cache({ refCount: false }) public pipeSpecificFieldOfClass(pkClass: number, noNesting = false): Observable<Field[]> {\n\n    return this.pipeFields(pkClass, noNesting).pipe(\n      map(fields => fields\n        // filter fields that are displayd in specific fields\n        .filter(field => field.placeOfDisplay.specificFields)\n        // sort fields by the position defined in the specific fields\n        .sort((a, b) => a.placeOfDisplay.specificFields.position - b.placeOfDisplay.specificFields.position)\n      )\n    )\n  }\n\n  /**\n    * pipe all the basic fields of a class,\n    * ordered by the position of the field within the basic fields\n    */\n  // @spyTag\n  @cache({ refCount: false }) public pipeBasicFieldsOfClass(pkClass: number, noNesting = false): Observable<Field[]> {\n    return this.pipeFields(pkClass, noNesting).pipe(\n      map(fields => fields\n        // filter fields that are displayd in basic fields\n        .filter(field => field.placeOfDisplay.basicFields)\n        // sort fields by the position defined in the basic fields\n        .sort((a, b) => a.placeOfDisplay.basicFields.position - b.placeOfDisplay.basicFields.position)\n      )\n    )\n  }\n\n\n\n\n  /**\n     * Pipes the fields for temporal entity forms\n     * - the specific fields\n     * - the when field\n     * - if available: the type field\n     */\n  // @spyTag\n  @cache({ refCount: false }) public pipeFieldsForTeEnForm(pkClass: number, noNesting = false): Observable<Field[]> {\n    return this.pipeFields(pkClass, noNesting).pipe(\n      // filter fields that are displayd in specific fields\n      map(allFields => {\n        const fields = allFields\n          // filter fields that are displayd in specific fields and not removed from all profiles\n          .filter(field => (field.placeOfDisplay.specificFields && field.allSubfieldsRemovedFromAllProfiles === false))\n          // sort fields by the position defined in the specific fields\n          .sort((a, b) => a.placeOfDisplay.specificFields.position - a.placeOfDisplay.specificFields.position)\n\n        const whenField = allFields.find(field => field.property.pkProperty === DfhConfig.PROPERTY_PK_HAS_TIME_SPAN)\n        if (whenField) fields.push(whenField)\n\n        const typeField = allFields.find(field => field.isHasTypeField)\n        if (typeField) fields.push(typeField)\n\n        return fields;\n      })\n    )\n  }\n\n\n\n\n\n\n  /**\n   * Pipes the fields of given class in this order:\n   * - basic fields\n   * - specific fields\n   */\n  // @spyTag\n  @cache({ refCount: false }) pipeBasicAndSpecificFields(pkClass: number, noNesting = false): Observable<Field[]> {\n    return combineLatest(\n      this.pipeBasicFieldsOfClass(pkClass, noNesting),\n      this.pipeSpecificFieldOfClass(pkClass, noNesting)\n    )\n      .pipe(\n        map(([a, b]) => [...a, ...b])\n      )\n  }\n\n  /**\n  * Pipes the fields of given class in this order:\n  * - specific fields\n  * - basic fields\n  */\n  // @spyTag\n  @cache({ refCount: false }) pipeSpecificAndBasicFields(pkClass: number, noNesting = false): Observable<Field[]> {\n    return combineLatest(\n      this.pipeSpecificFieldOfClass(pkClass, noNesting),\n      this.pipeBasicFieldsOfClass(pkClass, noNesting),\n    )\n      .pipe(\n        map(([a, b]) => [...a, ...b])\n      )\n  }\n\n\n  @cache({ refCount: false }) pipePropertiesToSubfields(\n    properties: DfhProperty[],\n    isOutgoing: boolean,\n    enabledProfiles: number[],\n    sysConfig: SysConfigValue,\n    noNesting = false\n  ): Observable<Subfield[]> {\n    return combineLatestOrEmpty(\n      properties.map(p => {\n        return this.pipeSubfield(isOutgoing, p, sysConfig, enabledProfiles, noNesting);\n      })\n    )\n\n  }\n\n\n  @cache({ refCount: false })\n  pipeSubfieldIdToSubfield(sourceClass: number, property: number, targetClass: number, isOutgoing: boolean, noNesting = false): Observable<Subfield> {\n    const domain = isOutgoing ? sourceClass : targetClass;\n    const range = isOutgoing ? targetClass : sourceClass;\n    return combineLatest(\n      this.s.dfh$.property$.pk_property__has_domain__has_range$.key([property, domain, range].join('_'))\n        .pipe(filter(x => {\n          return !!x\n        })),\n      this.s.sys$.config$.main$.pipe(filter(x => {\n        return !!x\n      })),\n      this.pipeProfilesEnabledByProject().pipe(filter(x => {\n        return !!x\n      })),\n    ).pipe(\n      switchMap(([dfhProp, sysConf, enabledProfiles]) => this.pipeSubfield(\n        isOutgoing,\n        dfhProp,\n        sysConf,\n        enabledProfiles,\n        noNesting\n      ))\n    )\n  }\n\n\n  private pipeSubfield(\n    isOutgoing: boolean,\n    p: DfhProperty,\n    sysConfig: SysConfigValue,\n    enabledProfiles: number[],\n    noNesting = false\n  ): Observable<Subfield> {\n    const o = isOutgoing;\n    const targetClass = o ? p.has_range : p.has_domain;\n    const sourceClass = o ? p.has_domain : p.has_range;\n    const targetMaxQuantity = o ?\n      p.range_instances_max_quantifier :\n      p.domain_instances_max_quantifier;\n    const sourceMaxQuantity = o ?\n      p.domain_instances_max_quantifier :\n      p.range_instances_max_quantifier;\n    const targetMinQuantity = o ?\n      p.range_instances_min_quantifier :\n      p.domain_instances_min_quantifier;\n    const sourceMinQuantity = o ?\n      p.domain_instances_min_quantifier :\n      p.range_instances_min_quantifier;\n\n    // console.log('pppp wanted: ', [sourceClass, p.pk_property, targetClass, isOutgoing])\n\n    return combineLatest(\n      this.pipeClassLabel(sourceClass).pipe(tap(x => {\n        // console.log('pppp found sourceClassLabel: ', [sourceClass, p.pk_property, targetClass, isOutgoing])\n\n        return x\n      })),\n      this.pipeClassLabel(targetClass).pipe(tap(x => {\n        // console.log('pppp found targetClassLabel: ', [sourceClass, p.pk_property, targetClass, isOutgoing])\n\n        return x\n      })),\n      this.pipeSubfieldTypeOfClass(sysConfig, targetClass, targetMaxQuantity, p.pk_property, noNesting).pipe(tap(x => {\n        // console.log('pppp found subfieldType: ', [sourceClass, p.pk_property, targetClass, isOutgoing])\n        return x\n      })),\n      this.pipeFieldLabel(p.pk_property, isOutgoing ? p.has_domain : null, isOutgoing ? null : p.has_range).pipe(tap(x => {\n        // console.log('pppp found fieldLabel: ', [sourceClass, p.pk_property, targetClass, isOutgoing])\n        return x\n      })),\n    )\n      .pipe(map(([sourceClassLabel, targetClassLabel, listType, label]\n      ) => {\n\n        // console.log('pppp found: ', [sourceClass, p.pk_property, targetClass, isOutgoing])\n\n        const node: Subfield = {\n          listType,\n          sourceClass,\n          sourceClassLabel,\n          sourceMaxQuantity,\n          sourceMinQuantity,\n          targetClass,\n          targetClassLabel,\n          targetMinQuantity,\n          targetMaxQuantity,\n          label,\n          isHasTypeField: o && p.is_has_type_subproperty,\n          property: { pkProperty: p.pk_property },\n          isOutgoing: o,\n          identityDefiningForSource: o ? p.identity_defining : false,\n          identityDefiningForTarget: o ? false : p.identity_defining,\n          ontoInfoLabel: p.identifier_in_namespace,\n          ontoInfoUrl: 'https://ontome.dataforhistory.org/property/' + p.pk_property,\n          removedFromAllProfiles: isRemovedFromAllProfiles(enabledProfiles, (p.profiles || [])),\n        };\n        return node;\n      }));\n  }\n\n  /**\n   * Pipes the type of Subfield for a given class\n   *\n   * Currently (to be revised if good) sublcasses of E55 Type,\n   * that are the target of a field with targetMaxQantity=1,\n   * get Subfield type 'hasType'.\n   * Therefore targetMaxQuantity is needed.\n   *\n   * If we are nesting subfields, we'll end up with circular fields.\n   * E.g.: Person 21 -> has appellation 1111 -> AppeTeEn 365 -> is appellation of 1111 -> Person 21\n   * In order to detect them, we can additionally pass in the parent property.\n   *\n   * This behavior has to be revised, because it can lead to problems\n   * when the Subfield belongs to a Field with multiple target classes\n   * (and thus Subfields) because the UI then does not allow to choose\n   * the right target class.\n   */\n  // @spyTag\n  @cache({ refCount: false }) pipeSubfieldTypeOfClass(config: SysConfigValue, pkClass: number, targetMaxQuantity: number, parentProperty?: number, noNesting = false): Observable<GvTargetType> {\n    return this.s.dfh$.class$.by_pk_class$.key(pkClass).pipe(\n      filter(i => !!i),\n      switchMap((klass) => this.pipeSubfieldType(config, klass, targetMaxQuantity, parentProperty, noNesting))\n    )\n  }\n\n\n  pipeSubfieldType(config: SysConfigValue, klass: DfhClass, targetMaxQuantity: number, parentProperty?: number, noNesting = false): Observable<GvTargetType> {\n\n    const res = (x: GvTargetType) => new BehaviorSubject(x)\n    let classConfig: ClassConfig\n    if (config) classConfig = config.classes[klass.pk_class];\n    if (classConfig && classConfig.valueObjectType) {\n      return res(classConfig.valueObjectType)\n    }\n\n\n    else if (klass.basic_type === 30 && targetMaxQuantity == 1) {\n      return res({ typeItem: 'true' })\n    }\n    // TODO add this to sysConfigValue\n    else if (klass.pk_class === DfhConfig.ClASS_PK_TIME_SPAN) {\n      return res({ timeSpan: 'true' })\n    }\n    else if (klass.basic_type === 8 || klass.basic_type === 30 || noNesting) {\n      return res({ entityPreview: 'true' })\n    }\n    else {\n      // pipe the subfields of the temporalEntity class\n      const noNest = true;\n      return this.pipeSpecificAndBasicFields(klass.pk_class, noNest).pipe(\n        map(fields => {\n          const subentitySubfieldPage: GvSubentitFieldPageReq[] = []\n          for (const field of fields) {\n            // for each of these subfields\n            // create page:GvSubfieldPage\n\n            const nestedTargets: GvSubentityFieldTargets = {};\n            for (const key in field.targets) {\n              if (Object.prototype.hasOwnProperty.call(field.targets, key)) {\n                const listType = field.targets[key].listType;\n                // put temporalEntity to entityPreview\n                const subTargetType: GvSubentityTargetType = listType.temporalEntity ?\n                  { entityPreview: 'true' } :\n                  listType\n                nestedTargets[key] = subTargetType\n              }\n            }\n            let isCircular = false;\n            if (\n              parentProperty &&\n              field.property.pkProperty == parentProperty &&\n              field.targetMaxQuantity === 1\n            ) {\n              isCircular = true\n            }\n            const nestedPage: GvSubentitFieldPageReq = {\n              targets: nestedTargets,\n              page: {\n                fkProperty: field.property.pkProperty,\n                isOutgoing: field.isOutgoing,\n                limit: 1,\n                offset: 0,\n                isCircular\n              }\n            }\n            subentitySubfieldPage.push(nestedPage)\n          }\n          return { temporalEntity: subentitySubfieldPage }\n        }),\n\n      )\n    }\n  }\n\n\n  /**\n   * Gets class field configs of given pkClass\n   *\n   * - of active project, if any, else\n   * - of default config project, else\n   * - empty array\n   *\n   */\n  // @spyTag\n  @cache({ refCount: false }) pipeFieldConfigs(pkClass: number): Observable<ProClassFieldConfig[]> {\n    return this.a.pkProject$.pipe(\n      switchMap((fkProject) => {\n\n        const activeProjectkey = proClassFieldConfgByProjectAndClassKey({\n          fk_class_for_class_field: pkClass,\n          fk_project: fkProject\n        })\n        const defaultProjectkey = proClassFieldConfgByProjectAndClassKey({\n          fk_class_for_class_field: pkClass,\n          fk_project: ProConfig.PK_PROJECT_OF_DEFAULT_CONFIG_PROJECT\n        })\n        return combineLatest(\n          this.s.pro$.class_field_config$.by_fk_project__fk_class$.key(activeProjectkey),\n          this.s.pro$.class_field_config$.by_fk_project__fk_class$.key(defaultProjectkey)\n        )\n          .pipe(\n            map(([activeProjectFields, defaultProjectFields]) => {\n              if (activeProjectFields && values(activeProjectFields).length) return activeProjectFields;\n\n              return defaultProjectFields\n            }),\n            map((items) => values(items).sort((a, b) => (a.ord_num > b.ord_num ? 1 : -1))),\n          )\n      })\n    )\n  }\n\n  /********************************************** */\n\n\n  /**\n   * Delivers class label for active project\n   */\n  // @spyTag\n  @cache({ refCount: false }) pipeClassLabel(pkClass?: number): Observable<string> {\n\n    return combineLatest(\n      this.a.pkProject$,\n      this.a.pipeActiveDefaultLanguage()\n    ).pipe(\n      switchMap(([fkProject, language]) => this.pipeLabels({ pkClass, fkProject, language, type: 'label' })\n        .pipe(\n          map(items => {\n\n            const i = items.find(item => !!item)\n            return i ? i.text : `* no label (id: ${pkClass}) *`\n          })\n        ))\n    )\n  }\n\n\n  /**\n   * Delivers array of objects with\n   * text ~ the text of the property\n   * origin, in this order:\n   * - origin == 'of project in project lang'         (from projects.text_property)\n   * - origin == 'of default project in project lang' (from projects.text_property)\n   * - origin == 'of default project in english'      (from projects.text_property)\n   * - origin == 'of ontome in project lang'          (from data_for_history.label)\n   * - origin == 'of ontome in english'               (from data_for_history.label)\n   */\n  // @spyTag\n  @cache({ refCount: false }) pipeLabels(d: {\n    fkProject: number,\n    type: 'label' | 'definition' | 'scopeNote',\n    language: InfLanguage,\n    pkClass?: number,\n    fkProperty?: number,\n    fkPropertyDomain?: number,\n    fkPropertyRange?: number,\n  }): Observable<{\n    origin: LabelOrigin\n    text: string\n  }[]> {\n    let fk_system_type: number;\n\n    if (d.pkClass) {\n      switch (d.type) {\n        case 'label':\n          fk_system_type = SysConfig.PK_SYSTEM_TYPE__TEXT_PROPERTY__LABEL\n          break;\n        default:\n          console.warn('fk_system_type not found')\n          break;\n      }\n    }\n    else if (d.fkProperty) {\n      switch (d.type) {\n        case 'label':\n          fk_system_type = SysConfig.PK_SYSTEM_TYPE__TEXT_PROPERTY__LABEL\n          break;\n        default:\n          console.warn('fk_system_type not found')\n          break;\n      }\n    }\n\n\n    return combineLatest(\n      // label of project in default language of project\n      this.pipeProTextProperty({\n        fk_project: d.fkProject,\n        fk_language: d.language.pk_entity,\n        fk_system_type,\n        fk_dfh_class: d.pkClass,\n        fk_dfh_property: d.fkProperty,\n        fk_dfh_property_domain: d.fkPropertyDomain,\n        fk_dfh_property_range: d.fkPropertyRange\n      }).pipe(map((item) => {\n        if (!item) return undefined;\n        const origin: LabelOrigin = 'of project in project lang';\n        return { origin, text: item.string }\n      })),\n\n      // label of default project\n      this.pipeProTextProperty({\n        fk_project: ProConfig.PK_PROJECT_OF_DEFAULT_CONFIG_PROJECT,\n        fk_language: d.language.pk_entity,\n        fk_system_type,\n        fk_dfh_class: d.pkClass,\n        fk_dfh_property: d.fkProperty,\n        fk_dfh_property_domain: d.fkPropertyDomain,\n        fk_dfh_property_range: d.fkPropertyRange\n      }).pipe(map((item) => {\n        if (!item) return undefined;\n        const origin: LabelOrigin = 'of default project in project lang';\n        return { origin, text: item.string }\n      })),\n\n      // label of default project\n      this.pipeProTextProperty({\n        fk_project: ProConfig.PK_PROJECT_OF_DEFAULT_CONFIG_PROJECT,\n        fk_language: 18889,\n        fk_system_type,\n        fk_dfh_class: d.pkClass,\n        fk_dfh_property: d.fkProperty,\n        fk_dfh_property_domain: d.fkPropertyDomain,\n        fk_dfh_property_range: d.fkPropertyRange\n      }).pipe(map((item) => {\n        if (!item) return undefined;\n        const origin: LabelOrigin = 'of default project in english';\n        return { origin, text: item.string }\n      })),\n\n      // label from ontome in default language of project\n      this.pipeDfhLabel({\n        language: d.language.iso6391.trim(),\n        type: 'label',\n        fk_class: d.pkClass,\n        fk_property: d.fkProperty\n      }).pipe(map((item) => {\n        if (!item) return undefined;\n        const origin: LabelOrigin = 'of ontome in project lang';\n        return { origin, text: item.label }\n      })),\n\n      // label from ontome in english\n      this.pipeDfhLabel({\n        language: 'en',\n        type: 'label',\n        fk_class: d.pkClass,\n        fk_property: d.fkProperty\n      }).pipe(map((item) => {\n        if (!item) return undefined;\n        const origin: LabelOrigin = 'of ontome in english';\n        return { origin, text: item.label }\n      })),\n    )\n  }\n\n  /**\n   * Pipes ProTextProperty\n   */\n  // @spyTag\n  @cache({ refCount: false }) pipeProTextProperty(d: {\n    fk_project: number,\n    fk_system_type: number,\n    fk_language: number,\n    fk_dfh_class?: number,\n    fk_dfh_property?: number,\n    fk_dfh_property_domain?: number,\n    fk_dfh_property_range?: number,\n  }): Observable<ProTextProperty> {\n    const key = textPropertyByFksKey(d)\n    return this.s.pro$.text_property$.by_fks$.key(key)\n  }\n\n  /**\n   * Pipes DfhLabel\n   */\n  // @spyTag\n  @cache({ refCount: false }) pipeDfhLabel(d: {\n    type: 'label' | 'definition' | 'scopeNote',\n    language: string,\n    fk_class?: number,\n    fk_profile?: number,\n    fk_property?: number,\n    fk_project?: number,\n  }): Observable<DfhLabel> {\n    const key = dfhLabelByFksKey(d)\n    return this.s.dfh$.label$.by_fks$.key(key)\n  }\n\n  /**\n   * Delivers best fitting field label for active project\n  */\n  // @spyTag\n  @cache({ refCount: false }) pipeFieldLabel(fkProperty: number, fkPropertyDomain: number, fkPropertyRange: number): Observable<string> {\n    const isOutgoing = !!fkPropertyDomain;\n    // const system_type = isOutgoing ? (singular ? 180 : 181) : (singular ? 182 : 183)\n\n    return combineLatest(\n      this.a.pkProject$,\n      this.a.pipeActiveDefaultLanguage()\n    ).pipe(\n      switchMap(([fkProject, language]) => this.pipeLabels(\n        {\n          fkProject,\n          type: 'label',\n          language,\n          fkProperty,\n          fkPropertyDomain,\n          fkPropertyRange\n        }\n      )\n        .pipe(\n          map(items => {\n            let label = `* no label (id: ${fkProperty}) *`;\n            items.some((item) => {\n              if (\n                item &&\n                (\n                  item.origin === 'of project in project lang' ||\n                  item.origin === 'of default project in project lang' ||\n                  item.origin === 'of default project in english'\n                )\n              ) {\n                label = item.text\n                return true\n              }\n              else if (\n                item &&\n                (\n                  item.origin === 'of ontome in project lang' ||\n                  item.origin === 'of ontome in english'\n                )\n              ) {\n                label = isOutgoing ? item.text : '* reverse of: ' + item.text + '*'\n                return true\n              }\n            })\n            return label\n          })\n        ))\n    )\n\n  }\n\n\n  /**\n   * maps the class to the corresponding model (database table)\n   * this is used by Forms to create new data in the shape of\n   * the data model\n   */\n  // @spyTag\n  @cache({ refCount: false }) pipeTableNameOfClass(targetClassPk: number): Observable<TableName> {\n    return combineLatest(\n      this.s.sys$.config$.main$,\n      this.s.dfh$.class$.by_pk_class$.key(targetClassPk)\n    ).pipe(\n      filter(i => !i.includes(undefined)),\n      map(([config, klass]) => {\n        const classConfig: ClassConfig = config.classes[targetClassPk];\n        if (classConfig && classConfig.valueObjectType) {\n\n          const keys = Object.keys(classConfig.valueObjectType)\n          if (classConfig.valueObjectType.appellation) return\n          const key = keys[0];\n          if (classConfig.valueObjectType.appellation) return 'appellation';\n          else if (classConfig.valueObjectType.language) return 'language';\n          else if (classConfig.valueObjectType.place) return 'place';\n          else if (classConfig.valueObjectType.timePrimitive) return 'time_primitive';\n          else if (classConfig.valueObjectType.langString) return 'lang_string';\n          else if (classConfig.valueObjectType.dimension) return 'dimension';\n          else {\n            console.warn('unsupported list type')\n          }\n        }\n        else if (klass.basic_type === 8 || klass.basic_type === 30) {\n          return 'persistent_item'\n        }\n        else {\n          return 'temporal_entity'\n        }\n      })\n    )\n  }\n\n\n  /**\n   * returns an object where the keys are the pks of the Classes\n   * used by the given project:\n   * - or because the class is enabled by class_proj_rel\n   * - or because the class is required by sources\n   *\n   * This is usefull to create select dropdowns of classes users will know\n   */\n  // @spyTag\n  @cache({ refCount: false }) pipeClassesInEntitiesOrSources(): Observable<{ [key: string]: number }> {\n    return combineLatest(\n      this.pipeClassesEnabledInEntities(),\n      this.pipeClassesRequiredBySources()\n    ).pipe(\n      map(([a, b]) => indexBy((x) => x.toString(), uniq([...a, ...b]))),\n      startWith({})\n    )\n  }\n\n  // @spyTag\n  @cache({ refCount: false }) pipeClassesRequiredBySources() {\n    return this.s.sys$.system_relevant_class$.by_required_by_sources$.key('true')\n      .pipe(map(c => values(c).map(k => k.fk_class)))\n  }\n\n  /**\n   * returns observable number[] wher the numbers are the pk_class\n   * of all classes that are enabled by at least one of the activated profiles\n   * of thte given project\n   */\n  // @spyTag\n  @cache({ refCount: false }) pipeClassesEnabledByProjectProfiles(): Observable<DfhClass[]> {\n    return this.a.pkProject$.pipe(switchMap(pkProject => combineLatest([\n      this.s.dfh$.class$.by_pk_class$.all$,\n      this.pipeProfilesEnabledByProject()\n    ]).pipe(\n      map(([classesByPk, enabledProfiles]) => {\n        const profilesMap = indexBy((k) => k.toString(), values(enabledProfiles))\n        return values(classesByPk)\n          .filter(klass => klass.profiles.some(profile => profilesMap[profile.fk_profile]))\n      })\n    )\n    ))\n  }\n\n  /**\n  * returns observable number[] wher the numbers are the pk_class\n  * of all type classes that are enabled by at least one of the activated profiles\n  * of thte given project\n  */\n  // @spyTag\n  @cache({ refCount: false }) pipeTypeClassesEnabledByProjectProfiles(): Observable<DfhClass[]> {\n    return combineLatest([\n      this.s.dfh$.class$.by_basic_type$.key(30),\n      this.pipeProfilesEnabledByProject()\n    ]).pipe(\n      map(([classesByPk, enabledProfiles]) => {\n        const profilesMap = indexBy((k) => k.toString(), values(enabledProfiles))\n        return values(classesByPk)\n          .filter(klass => {\n            return klass.profiles.some(profile => profilesMap[profile.fk_profile]) &&\n              // Exclude Manifestation product type and language\n              ![\n                DfhConfig.CLASS_PK_LANGUAGE,\n                DfhConfig.CLASS_PK_MANIFESTATION_PRODUCT_TYPE\n              ].includes(klass.pk_class)\n          })\n      })\n    )\n  }\n\n\n\n  /**\n   * returns observable number[] where the numbers are the pk_class\n   * of all classes that are enabled by active project (using class_proj_rel)\n   */\n  // @spyTag\n  @cache({ refCount: false }) pipeClassesEnabledInEntities() {\n    return this.a.pkProject$.pipe(switchMap(pkProject => this.s.pro$.dfh_class_proj_rel$.by_fk_project__enabled_in_entities$.key(pkProject + '_true')\n      .pipe(\n        map((rels) => values(rels).map(rel => rel.fk_class))\n      )\n    ))\n  }\n\n  /**\n  * returns an object where the keys are the pks of the TeEn Classes\n  * used by the given project\n  */\n  // @spyTag\n  @cache({ refCount: false }) pipeSelectedTeEnClassesInProject(): Observable<{ [key: string]: number }> {\n    return combineLatest(\n      this.pipeTeEnClassesEnabledInEntities(),\n      this.pipeTeEnClassesRequiredBySources()\n    ).pipe(\n      map(([a, b]) => indexBy((x) => x.toString(), uniq([...a, ...b]))),\n      startWith({})\n    )\n  }\n\n  /**\n   * Gets array of pk_class with teEn classes enabled in entities\n   */\n  // @spyTag\n  @cache({ refCount: false }) pipeTeEnClassesEnabledInEntities() {\n    return this.a.pkProject$.pipe(switchMap(pkProject => this.s.pro$.dfh_class_proj_rel$.by_fk_project__enabled_in_entities$.key(pkProject + '_true')\n      .pipe(\n        switchMap((cs) => combineLatest(\n          values(cs).map(c => this.s.dfh$.class$.by_pk_class$.key(c.fk_class).pipe(\n            filter(item => !!item)\n          ))\n        ).pipe(\n          map(dfhClasses => this.filterTeEnCasses(dfhClasses))\n        ))\n      )\n    ))\n  }\n\n  /**\n   * Filters array of DfhClass for TeEn Classes and returns array of pk_class\n   * @param dfhClasses array of DfhClass\n   * @returns returns array of pk_class where class is TeEn class\n   */\n  private filterTeEnCasses(dfhClasses: DfhClass[]): number[] {\n    const pks: number[] = [];\n    for (let i = 0; i < dfhClasses.length; i++) {\n      const c = dfhClasses[i];\n      if (c.basic_type === 9) pks.push(c.pk_class);\n    }\n    return pks;\n  }\n\n  /**\n   * Gets array of pk_class with teEn classes required by sources\n   */\n  // @spyTag\n  @cache({ refCount: false }) pipeTeEnClassesRequiredBySources() {\n    return this.s.sys$.system_relevant_class$.by_required_by_sources$.key('true')\n      .pipe(\n        switchMap((cs) => combineLatest(\n          values(cs).map(c => this.s.dfh$.class$.by_pk_class$.key(c.fk_class).pipe(\n            filter(item => !!item)\n          ))\n        ).pipe(\n          map(dfhClasses => {\n            return this.filterTeEnCasses(dfhClasses)\n          })\n        ))\n      )\n  }\n\n\n\n\n\n\n  /**\n   *\n   */\n  // @spyTag\n  @cache({ refCount: false }) pipeTypeAndTypedClasses(enabledIn?: 'entities' | 'sources'): Observable<{ typedClass: number, typeClass: number }[]> {\n\n    let pks$: Observable<number[]>[];\n\n    const fromSources$ = this.s.sys$.system_relevant_class$.by_required_by_sources$.key('true').pipe(\n      map(classes => values(classes).map(k => k.fk_class)),\n    )\n\n    const fromEntities$ = this.pipeClassesEnabledInEntities()\n\n    if (enabledIn === 'sources') {\n      pks$ = [fromSources$];\n    } else if (enabledIn === 'entities') {\n      pks$ = [fromEntities$];\n    } else {\n      pks$ = [fromSources$, fromEntities$]\n    }\n\n    return combineLatest(pks$).pipe(\n      map(arrayOfPkArrays => uniq(flatten<number>(arrayOfPkArrays))),\n      switchMap(pks => this.pipeTypeAndTypedClassesOfTypedClasses(pks))\n    )\n  }\n\n  // @spyTag\n  @cache({ refCount: false }) pipeTypeAndTypedClassesOfTypedClasses(pkTypedClasses: number[]): Observable<{ typedClass: number, typeClass: number }[]> {\n\n    return this.s.dfh$.property$.by_is_has_type_subproperty$.key('true').pipe(\n      map((allHasTypeProps) => {\n        const byDomain = indexBy(k => k.has_domain.toString(), values(allHasTypeProps));\n        return pkTypedClasses.map(pk => ({\n          typedClass: pk,\n          typeClass: byDomain[pk] ? byDomain[pk].has_range : undefined\n        }))\n      }))\n  }\n\n  // @spyTag\n  @cache({ refCount: false }) pipeTypeClassOfTypedClass(pkTypedClass): Observable<number> {\n    return this.s.dfh$.property$.by_is_has_type_subproperty$.key('true').pipe(\n      map((allHasTypeProps) => {\n        const byDomain = indexBy(k => k.has_domain.toString(), values(allHasTypeProps));\n        return byDomain[pkTypedClass] ? byDomain[pkTypedClass].has_range : undefined\n      }))\n  }\n\n  // @spyTag\n  @cache({ refCount: false }) pipeTypedClassesOfTypeClasses(pkTypeClasses: number[]): Observable<number[]> {\n\n    return this.s.dfh$.property$.by_is_has_type_subproperty$.key('true').pipe(\n      map((allHasTypeProps) => {\n        const byDomain = indexBy(k => k.has_range.toString(), values(allHasTypeProps));\n        return pkTypeClasses.map(pk => byDomain[pk] ? byDomain[pk].has_domain : undefined)\n      }))\n  }\n\n\n  // @spyTag\n  @cache({ refCount: false }) pipeTypePropertyOfTypedClass(pkTypedClass): Observable<number> {\n    return this.s.dfh$.property$.by_is_has_type_subproperty$.key('true').pipe(\n      map((allHasTypeProps) => {\n        const typeProp = values(allHasTypeProps).find(p => p.has_domain === pkTypedClass)\n        return typeProp ? typeProp.pk_property : undefined;\n      }))\n  }\n\n  // @spyTag\n  @cache({ refCount: false }) pipeTargetClassesOfProperties(pkProperties: number[], isOutgoing: boolean): Observable<number[]> {\n    return this.s.dfh$.property$.by_pk_property$.all$.pipe(\n      map(x => {\n        if (!pkProperties || !pkProperties.length) return [];\n\n        const res = []\n        const targetClasses = {};\n        pkProperties.forEach(pkProp => {\n          const props = values(x[pkProp]);\n          props.forEach(prop => {\n            const targetClass = isOutgoing ? prop.has_range : prop.has_domain;\n            if (!targetClasses[targetClass]) {\n              targetClasses[targetClass] = true;\n              res.push(targetClass)\n            }\n          })\n        })\n        return res;\n      })\n    )\n  }\n}\n\n\n\nfunction createHasDefinitionProperty(domainClass: number) {\n  const profiles: Profiles = [\n    {\n      removed_from_api: false,\n      fk_profile: DfhConfig.PK_PROFILE_GEOVISTORY_BASIC\n    }\n  ]\n\n  const hasDefinition: DfhProperty = {\n    has_domain: domainClass,\n    pk_property: DfhConfig.PROPERTY_PK_P18_HAS_DEFINITION,\n    has_range: 785,\n    domain_instances_max_quantifier: -1,\n    domain_instances_min_quantifier: 1,\n    range_instances_max_quantifier: 1,\n    range_instances_min_quantifier: 1,\n    identifier_in_namespace: 'P18',\n    identity_defining: false,\n    is_inherited: true,\n    is_has_type_subproperty: false,\n    profiles\n  }\n  return hasDefinition\n}\n\n\n\nexport function createHasTimeSpanProperty(domainClass: number) {\n  const profiles: Profiles = [\n    {\n      removed_from_api: false,\n      fk_profile: DfhConfig.PK_PROFILE_GEOVISTORY_BASIC\n    }\n  ]\n  const hasAppeProp: DfhProperty = {\n    has_domain: domainClass,\n    pk_property: DfhConfig.PROPERTY_PK_HAS_TIME_SPAN,\n    has_range: DfhConfig.ClASS_PK_TIME_SPAN,\n    domain_instances_max_quantifier: -1,\n    domain_instances_min_quantifier: 1,\n    range_instances_max_quantifier: 1,\n    range_instances_min_quantifier: 1,\n    identifier_in_namespace: 'P4',\n    identity_defining: false,\n    is_inherited: true,\n    is_has_type_subproperty: false,\n    profiles\n  }\n  return hasAppeProp\n}\n\n\nfunction isRemovedFromAllProfiles(enabledProfiles: number[], profiles: RelatedProfile[]): boolean {\n  return !profiles.some(p => p.removed_from_api === false && enabledProfiles.includes(p.fk_profile))\n\n}\n\nfunction getPlaceOfDisplay(specialFields: SysConfigSpecialFields, subfield: Subfield, projectFieldConfig?: ProClassFieldConfig): FieldPlaceOfDisplay {\n  let settings: SysConfigFieldDisplay;\n\n  settings = getSettingsFromSysConfig(subfield, specialFields, settings);\n\n  // if this is a special field, create corresponding display settings and return it\n  if (settings) {\n    if (settings.displayInBasicFields) {\n      return { basicFields: { position: settings.displayInBasicFields.position } }\n    } else if (settings.hidden) {\n      return { hidden: true }\n    }\n  }\n\n  // otherwise display the field in specific fields (default)\n  let position = Number.POSITIVE_INFINITY;\n  if (projectFieldConfig) position = projectFieldConfig.ord_num\n  return { specificFields: { position } }\n\n}\nfunction getSettingsFromSysConfig(\n  subfield: Subfield, specialFields: SysConfigSpecialFields, settings: SysConfigFieldDisplay) {\n  if (subfield.isOutgoing) {\n    // get settings by has-type-subproperty\n    if (subfield.isHasTypeField &&\n      specialFields.hasTypeSubproperties) {\n      settings = specialFields.hasTypeSubproperties;\n    }\n    // get settings by source class and property\n    else if (specialFields.bySourceClass &&\n      specialFields.bySourceClass[subfield.sourceClass] &&\n      specialFields.bySourceClass[subfield.sourceClass].outgoingProperties &&\n      specialFields.bySourceClass[subfield.sourceClass].outgoingProperties[subfield.property.pkProperty]) {\n      settings = specialFields.bySourceClass[subfield.sourceClass].outgoingProperties[subfield.property.pkProperty];\n    }\n    // get seetings by property\n    else if (specialFields.outgoingProperties &&\n      specialFields.outgoingProperties[subfield.property.pkProperty]) {\n      settings = specialFields.outgoingProperties[subfield.property.pkProperty];\n    }\n  }\n  else {\n    // get settings by source class and property\n    if (specialFields.bySourceClass &&\n      specialFields.bySourceClass[subfield.sourceClass] &&\n      specialFields.bySourceClass[subfield.sourceClass].incomingProperties &&\n      specialFields.bySourceClass[subfield.sourceClass].incomingProperties[subfield.property.pkProperty]) {\n      settings = specialFields.bySourceClass[subfield.sourceClass].incomingProperties[subfield.property.pkProperty];\n    }\n    // get seetings by property\n    else if (specialFields.incomingProperties &&\n      specialFields.incomingProperties[subfield.property.pkProperty]) {\n      settings = specialFields.incomingProperties[subfield.property.pkProperty];\n    }\n  }\n  return settings;\n}\n\n\n\n\n\n\n/**\n * Pipes the fields for temporal entity forms\n * - the specific fields\n * - the when field\n * - if available: the type field\n */\n// @spyTag @cache({ refCount: false }) pipeFieldDefinitionsForTeEnForm(pkClass: number): Observable<Field[]> {\n//   return of([])\n// const hasTypeListDef$ = this.pipeHasTypeSubfield(pkClass)\n// return combineLatest(\n//   this.pipeSpecificFieldDefinitions(pkClass)\n//     .pipe(\n//       map(fields => fields.filter(f => f.allSubfieldsRemovedFromAllProfiles === false))\n//     )\n//   ,\n//   hasTypeListDef$,\n// ).pipe(\n//   map(([fields, hasTypeListDefs]) => {\n//     const when = this.getClassFieldDefinition(SysConfig.PK_CLASS_FIELD_WHEN)\n//     return [\n//       ...fields,\n//       when,\n//       ...hasTypeListDefs.map((hasTypeListDef) => {\n//         const typeField: Field = { ...hasTypeListDef, listDefinitions: [hasTypeListDef] }\n//         return typeField;\n//       })\n//     ]\n//   })\n// )\n// }\n\n\n/**\n * Pipe the specific fields of given class\n */\n// @spyTag @cache({ refCount: false }) pipeSpecificFieldDefinitions(pkClass: number): Observable<Field[]> {\n// return combineLatest(\n//   this.pipePropertiesOfClass(pkClass, true).pipe(\n//     // filter out the 'has type' property, since it is part of the default fields\n//     map(outgoing => outgoing.filter(o => !o.is_has_type_subproperty))\n//   ),\n//   this.pipePropertiesOfClass(pkClass, false).pipe(\n//     // filter out the 'has appellation' property, since it is part of the default fields\n//     map(ingoing => ingoing.filter(i =>\n//       i.pk_property !== DfhConfig.PROPERTY_PK_IS_APPELLATION_OF\n//       && i.pk_property !== DfhConfig.PROPERTY_PK_GEOVP1_IS_REPRODUCTION_OF\n//     ))\n//   ),\n//   this.pipeFieldConfigs(pkClass)\n// ).pipe(\n//   switchMap(([outgoing, ingoing, fieldConfigs]) => {\n\n//     const key = (fc: Partial<ProClassFieldConfig>) => `${fc.fk_property}_${fc.fk_domain_class}_${fc.fk_range_class}`;\n//     const indexed = indexBy((fc) => `${fc.fk_property}_${fc.fk_domain_class}_${fc.fk_range_class}`, fieldConfigs)\n//     const getFieldConfig = (listDef: Subfield): ProClassFieldConfig => {\n//       return indexed[key({\n//         fk_property: listDef.property.pkProperty,\n//         fk_domain_class: listDef.isOutgoing ? listDef.sourceClass : null,\n//         fk_range_class: listDef.isOutgoing ? null : listDef.sourceClass,\n//       })]\n//     }\n\n//     // Create list definitions\n//     return combineLatest(\n//       this.pipePropertiesToSubfields(ingoing, false),\n//       this.pipePropertiesToSubfields(outgoing, true)\n//     ).pipe(\n//       map(([ingoingListDefs, outgoingListDefs]) => {\n//         const listDefinitions = [...ingoingListDefs, ...outgoingListDefs];\n\n//         // Create field definitions\n//         const fieldDefs: { [key: string]: Field } = {}\n//         listDefinitions.forEach(listDef => {\n\n//           const k = listDef.property.pkProperty + '_' + listDef.isOutgoing;\n\n//           if (!fieldDefs[k]) {\n//             fieldDefs[k] = {\n//               ...listDef,\n//               placeOfDisplay: {},\n//               allSubfieldsRemovedFromAllProfiles: false,\n//               fieldConfig: getFieldConfig(listDef),\n//               listDefinitions: [listDef],\n//               targetClasses: [listDef.targetClass]\n//             }\n//           } else {\n//             fieldDefs[k].listDefinitions.push(listDef)\n//             fieldDefs[k].targetClasses.push(listDef.targetClass)\n//           }\n\n//           // }\n\n//         })\n//         // Order the fields according to ord_num (from project's config, kleiolab's config) or put it at end of list.\n//         return sort(\n//           (a, b) => {\n//             const getOrdNum = (item: Field) => {\n//               if (item && item.fieldConfig) return item.fieldConfig.ord_num;\n//               return Number.POSITIVE_INFINITY;\n//             }\n//             const ordNumA = getOrdNum(a);\n//             const ordNumB = getOrdNum(b);\n//             return ordNumA - ordNumB;\n//           },\n//           values(fieldDefs))\n//       })\n//     )\n//   })\n// )\n// }\n\n\n/**\n * Pipe the fields for identification of given class\n */\n// @spyTag @cache({ refCount: false }) pipeDefaultFieldDefinitions(pkClass: number): Observable<Field[]> {\n\n\n// /**\n//  * Pipe the generic field has appellation\n//  * with the given class as range\n//  */\n// const hasAppeProp: DfhPropertyStatus = {\n//   has_domain: DfhConfig.CLASS_PK_APPELLATION_FOR_LANGUAGE,\n//   pk_property: DfhConfig.PROPERTY_PK_IS_APPELLATION_OF,\n//   has_range: pkClass,\n//   domain_instances_max_quantifier: -1,\n//   domain_instances_min_quantifier: 0,\n//   range_instances_max_quantifier: 1,\n//   range_instances_min_quantifier: 1,\n//   identifier_in_namespace: 'histP9',\n//   identity_defining: true,\n//   is_inherited: true,\n//   is_has_type_subproperty: false,\n//   removedFromAllProfiles: false,\n//   profiles: []\n// }\n// const hasAppeListDef$ = this.pipePropertiesToSubfields([hasAppeProp], false).pipe(\n//   filter(listDefs => !!listDefs && !!listDefs[0]),\n//   map(listDefs => listDefs[0])\n// );\n\n// /**\n//  * Pipe the generic field has type\n//  * with the given class as range\n//  */\n// const hasTypeListDef$ = this.pipeHasTypeSubfield(pkClass)\n// return combineLatest(\n//   hasAppeListDef$,\n//   hasTypeListDef$,\n//   this.s.dfh$.class$.by_pk_class$.key(pkClass).pipe(filter(c => !!c))\n// ).pipe(\n//   map(([hasAppeListDef, hasTypeListDefs, klass]) => {\n//     const fields: Field[] = []\n\n\n//     // /*\n//     //  * Add 'short title' text-property to\n//     //  *\n//     //  * Manifestation Product Type â F3, 219\n//     //  * Manifestation Singleton â F4, 220\n//     //  * Item â F5, 221\n//     //  * Web Request â geovC4, 502\n//     //  */\n//     // if ([\n//     //   DfhConfig.CLASS_PK_MANIFESTATION_PRODUCT_TYPE,\n//     //   DfhConfig.CLASS_PK_MANIFESTATION_SINGLETON,\n//     //   DfhConfig.CLASS_PK_ITEM,\n//     //   DfhConfig.CLASS_PK_WEB_REQUEST].includes(pkClass)) {\n//     //   fields.push(this.getClassFieldDefinition(SysConfig.PK_CLASS_FIELD_SHORT_TITLE));\n//     // }\n\n//     // /*\n//     // * Add 'has appellation for language â histP9' to\n//     // *\n//     // * all classes except 'Appellation for language â histC10', 365\n//     // */\n//     // if (pkClass !== DfhConfig.CLASS_PK_APPELLATION_FOR_LANGUAGE) {\n//     //   const appeField: Field = { ...hasAppeListDef, listDefinitions: [hasAppeListDef] }\n//     //   fields.push(appeField);\n//     // }\n\n\n//     // /*\n//     // * Add 'hasType' fields\n//     // */\n//     // if (hasTypeListDefs && hasTypeListDefs.length > 0) {\n//     //   hasTypeListDefs.forEach((hasTypeListDef) => {\n//     //     const typeField: Field = { ...hasTypeListDef, listDefinitions: [hasTypeListDef] }\n//     //     fields.push(typeField);\n//     //   })\n//     // }\n\n//     // /*\n//     // * Add 'entity definition' text-property to\n//     // *\n//     // * all classes except 'Appellation for language â histC10', 365\n//     // */\n//     // if (pkClass !== DfhConfig.CLASS_PK_APPELLATION_FOR_LANGUAGE) {\n//     //   fields.push(this.getClassFieldDefinition(SysConfig.PK_CLASS_FIELD_ENTITY_DEFINITION));\n//     // }\n//     // /*\n//     // * Add 'identifier / exact reference / url / ...' text-property to\n//     // *\n//     // * Web Request â geovC4, 502\n//     // */\n//     // if (DfhConfig.CLASS_PK_WEB_REQUEST === pkClass) {\n//     //   fields.push(this.getClassFieldDefinition(SysConfig.PK_CLASS_FIELD_EXACT_REFERENCE));\n//     // }\n\n//     // /*\n//     // * Add 'comment' text-property to\n//     // *\n//     // * Manifestation Product Type â F3, 219\n//     // * Manifestation Singleton â F4, 220\n//     // * Item â F5, 221\n//     // * Web Request â geovC4, 502\n//     // * Expression portion â geovC5, 503\n//     // */\n//     // if ([\n//     //   DfhConfig.CLASS_PK_MANIFESTATION_PRODUCT_TYPE,\n//     //   DfhConfig.CLASS_PK_MANIFESTATION_SINGLETON,\n//     //   DfhConfig.CLASS_PK_ITEM,\n//     //   DfhConfig.CLASS_PK_WEB_REQUEST,\n//     //   DfhConfig.CLASS_PK_EXPRESSION_PORTION].includes(pkClass)) {\n//     //   fields.push(this.getClassFieldDefinition(SysConfig.PK_CLASS_FIELD_COMMENT));\n//     // }\n\n//     // /*\n//     // * Add 'time-span' field to\n//     // *\n//     // * all temporal entity classes\n//     // */\n//     // if (klass.basic_type === 9) {\n//     //   fields.push(this.getClassFieldDefinition(SysConfig.PK_CLASS_FIELD_WHEN));\n//     // }\n\n//     return fields\n\n//   })\n// )\n// }\n\n\n// private pipeHasTypeSubfield(pkClass: number) {\n//   return this.pipePropertiesOfClass(pkClass, true).pipe(\n//     // check if this class has 'has type' subproperty\n//     map(outgoing => {\n//       return outgoing.filter((prop) => prop.is_has_type_subproperty);\n//     }), switchMap(hasTypeProps => combineLatestOrEmpty(hasTypeProps.map(dfhProp => {\n//       return this.pipePropertiesToSubfields([dfhProp], true).pipe(filter(listDefs => !!listDefs && !!listDefs[0]), map(listDefs => {\n//         const listDef = listDefs[0];\n//         listDef.listType = { typeItem: 'true' };\n//         return listDef;\n//       }));\n//     }))));\n// }\n\n// getClassFieldSubfield(pkClassField: number): Subfield {\n//   const template = {\n//     property: {},\n//     sourceClass: undefined,\n//     sourceClassLabel: undefined,\n//     targetClass: undefined,\n//     isOutgoing: undefined,\n//     identityDefiningForSource: undefined,\n//     identityDefiningForTarget: undefined,\n//     targetMaxQuantity: undefined,\n//     targetMinQuantity: undefined,\n//     sourceMaxQuantity: undefined,\n//     sourceMinQuantity: undefined,\n//     removedFromAllProfiles: false\n//   }\n//   switch (pkClassField) {\n//     case SysConfig.PK_CLASS_FIELD_WHEN:\n//       return {\n//         ...template,\n//         listType: { timeSpan: 'true' },\n//         label: 'When',\n//         isOutgoing: true,\n//         // fkClassField: pkClassField,\n//         ontoInfoLabel: 'P4',\n//         ontoInfoUrl: 'https://ontome.dataforhistory.org/property/4',\n//         targetMaxQuantity: 1\n//       }\n//     case SysConfig.PK_CLASS_FIELD_ENTITY_DEFINITION:\n//       return {\n//         ...template,\n//         listType:  { textProperty: 'true' },\n//         label: 'Description',\n//         // fkClassField: pkClassField,\n//         ontoInfoLabel: 'P3',\n//         ontoInfoUrl: 'https://ontome.dataforhistory.org/property/3',\n//         targetMaxQuantity: -1\n//       }\n//     case SysConfig.PK_CLASS_FIELD_COMMENT:\n//       return {\n//         ...template,\n//         // fkClassField: SysConfig.PK_CLASS_FIELD_COMMENT,\n//         listType:  { textProperty: 'true' },\n//         label: 'Comments',\n//         ontoInfoLabel: 'P3',\n//         ontoInfoUrl: 'https://ontome.dataforhistory.org/property/3',\n//         targetMaxQuantity: -1\n//       }\n//     case SysConfig.PK_CLASS_FIELD_EXACT_REFERENCE:\n//       return {\n//         ...template,\n//         listType:  { textProperty: 'true' },\n//         label: 'Exact Reference',\n//         // fkClassField: pkClassField,\n//         ontoInfoLabel: 'P3',\n//         ontoInfoUrl: 'https://ontome.dataforhistory.org/property/3',\n//         targetMaxQuantity: -1\n//       }\n//     case SysConfig.PK_CLASS_FIELD_SHORT_TITLE:\n//       return {\n//         ...template,\n//         listType:  { textProperty: 'true' },\n//         label: 'Short Title',\n//         // fkClassField: pkClassField,\n//         ontoInfoLabel: 'P3',\n//         ontoInfoUrl: 'https://ontome.dataforhistory.org/property/3',\n//         targetMaxQuantity: -1\n//       }\n//     default:\n//       break;\n//   }\n// }\n\n// getClassFieldDefinition(pkClassField: number): Field {\n//   const listDef = this.getClassFieldSubfield(pkClassField)\n//   return { ...listDef, listDefinitions: [listDef] }\n// }\n\n\n// @spyTag @cache({ refCount: false }) pipeClassesRequired() {\n//   return this.s.sys$.system_relevant_class$.by_required$.key('true')\n//     .pipe(map(c => values(c).map(k => k.fk_class)))\n// }\n\n\n\n// /**\n//  * Pipes all the enabled properties of a class\n//  */\n// @spyTag @cache({ refCount: false }) pipePropertiesOfClass(pkClass: number, isOutgoing: boolean): Observable<DfhPropertyStatus[]> {\n\n\n//   let $: Observable<ByPk<DfhProperty>>\n//   if (isOutgoing) {\n//     $ = this.s.dfh$.property$.by_has_domain$.key(pkClass)\n//   }\n//   else {\n//     $ = this.s.dfh$.property$.by_has_range$.key(pkClass)\n//   }\n\n//   // filter properties that are in at least one profile enabled by project\n//   const profiles$ = this.pipeProfilesEnabledByProject()\n\n\n//   // Filter out only the properties for which target class is allowed\n//   return combineLatest($, profiles$)\n//     .pipe(\n//       map(([props, profiles]) => {\n//         const p: DfhPropertyStatus[] = []\n\n//         values(props).forEach(prop => {\n\n\n//           const propProfileRel = prop.profiles as Profiles\n\n//           let enabledInAProfile = false;\n\n//           let removedFromAllProfiles = true;\n\n//           propProfileRel.forEach(item => {\n//             if (profiles.includes(item.fk_profile)) {\n//               enabledInAProfile = true;\n//               if (item.removed_from_api === false) {\n//                 removedFromAllProfiles = false\n//               }\n//             }\n//           })\n\n//           if (enabledInAProfile) {\n//             p.push({\n//               ...prop,\n//               removedFromAllProfiles\n//             })\n//           }\n//         })\n\n//         return p\n//       })\n//     )\n\n// }\n\n\n// /**\n//  * returns an object where the keys are the pks of the Classes\n//  * used by the given project\n//  * - or because the class is enabled by class_proj_rel\n//  * - or because the class is required by sources or by basics\n//  *\n//  * this is usefull to check if a class is available at all\n//  */\n// @spyTag @cache({ refCount: false }) pipeClassesInEntitesOrRequired(): Observable<{ [key: string]: number }> {\n//   return combineLatest(\n//     this.pipeClassesEnabledInEntities(),\n//     this.pipeClassesRequired()\n//   ).pipe(\n//     map(([a, b]) => indexBy((x) => x.toString(), uniq([...a, ...b]))),\n//     startWith({})\n//   )\n// }\n","import { Injectable } from '@angular/core';\nimport { DfhConfig } from '@kleiolab/lib-config';\nimport { IconType } from '@kleiolab/lib-redux';\nimport { InfStatement, InfTimePrimitive } from '@kleiolab/lib-sdk-lb3';\nimport { TimePrimitiveWithCal } from '@kleiolab/lib-sdk-lb4';\nimport { CalendarType, combineLatestOrEmpty, Granularity, TimeSpanUtil } from '@kleiolab/lib-utils';\nimport { omit, values } from 'ramda';\nimport { BehaviorSubject, combineLatest, merge, Observable, of, pipe } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { spyTag } from '../decorators/method-decorators';\nimport { BasicStatementItem } from '../models/BasicStatementItem';\nimport { ActiveProjectPipesService } from './active-project-pipes.service';\nimport { SchemaSelectorsService } from './schema-selectors.service';\n\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * This service contains a basic pipes for creating more complex\n * rxjs pipes. Each pipe takes non-observable parameters and\n * returns an observable. The method names are mainly\n * based on the type of the observable data\n */\nexport class InformationBasicPipesService {\n  // infRepo: InfSelector;\n\n  constructor(\n    private p: ActiveProjectPipesService,\n    private s: SchemaSelectorsService,\n  ) { }\n\n  /*********************************************************************\n   * Project\n  *********************************************************************/\n\n  // @spyTag pipeRelatedTemporalEntities(pkEntity: number): Observable<InfTemporalEntity[]> {\n  //   return this.s.inf$.statement$\n  //     .by_object$({ fk_object_info: pkEntity })\n  //     .pipe(\n  //       auditTime(1),\n  //       switchMapOr([], (statements) => combineLatest(\n  //         statements.map(statement => this.s.inf$.temporal_entity$.by_pk_entity_key$(statement.fk_subject_info).pipe(\n  //         ))\n  //       ).pipe(\n  //         map(x => x.filter((y) => !!y)),\n  //       )),\n  //     )\n  // }\n\n\n\n\n  /**\n * Pipe statements of an entity\n */\n  @spyTag pipeStatements(pkEntity: number, isOutgoing): Observable<InfStatement[]> {\n    return isOutgoing ? this.pipeOutgoingStatements(pkEntity) : this.pipeIngoingStatements(pkEntity)\n  }\n\n\n  /**\n  * Pipe outgoing statements of an entity\n  */\n  @spyTag pipeOutgoingStatements(pkEntity): Observable<InfStatement[]> {\n    return this.s.inf$.statement$.by_subject$({ fk_subject_info: pkEntity })\n  }\n\n\n  /**\n   * Pipe ingoing statements of an entity\n   */\n  @spyTag pipeIngoingStatements(pkEntity): Observable<InfStatement[]> {\n    return this.s.inf$.statement$.by_object$({ fk_object_info: pkEntity })\n  }\n\n\n  // pipeStatementsOfList(listDefinition: Subfield, pkEntity): Observable<InfStatement[]> {\n  //   if (listDefinition.isOutgoing) {\n  //     return this.s.inf$.statement$.by_subject_and_property$({\n  //       fk_property: listDefinition.property.pkProperty,\n  //       fk_property_of_property: listDefinition.property.pkPropertyOfProperty,\n  //       fk_subject_info: pkEntity\n  //     })\n  //   } else {\n  //     return this.s.inf$.statement$.by_object_and_property$({\n  //       fk_property: listDefinition.property.pkProperty,\n  //       fk_property_of_property: listDefinition.property.pkPropertyOfProperty,\n  //       fk_object_info: pkEntity\n  //     })\n  //   }\n  // }\n\n  /**\n   * Pipe outgoing statements of temporal entity\n   */\n  @spyTag pipeOutgoingStatementsByProperty(pkProperty, pkEntity): Observable<InfStatement[]> {\n    return this.s.inf$.statement$.by_subject_and_property$({\n      fk_property: pkProperty,\n      fk_subject_info: pkEntity\n    })\n\n  }\n\n\n  /**\n   * Pipe ingoing statements of an entity\n   */\n  @spyTag pipeIngoingStatementsByProperty(pkProperty, pkEntity): Observable<InfStatement[]> {\n    return this.s.inf$.statement$.by_object_and_property$({\n      fk_property: pkProperty,\n      fk_object_info: pkEntity\n    })\n  }\n\n  /**\n * Pipe outgoing statements of temporal entity\n */\n  @spyTag pipeOutgoingBasicStatementItemsByProperty(pkProperty, pkEntity, pkProject: number): Observable<BasicStatementItem[]> {\n    return this.s.inf$.statement$.by_subject_and_property$({\n      fk_property: pkProperty,\n      fk_subject_info: pkEntity\n    }).pipe(\n      switchMap(statements => combineLatestOrEmpty(\n        statements.map(statement => this.pipeBasicStatementItem(pkProject, statement, true))\n      ))\n    )\n  }\n\n\n\n  /**\n   * Pipe ingoing statements of an entity\n   */\n  @spyTag pipeIngoingBasicStatementItemsByProperty(pkProperty, pkEntity, pkProject: number): Observable<BasicStatementItem[]> {\n    return this.s.inf$.statement$.by_object_and_property$({\n      fk_property: pkProperty,\n      fk_object_info: pkEntity\n    }).pipe(\n      switchMap(statements => combineLatestOrEmpty(\n        statements.map(statement => this.pipeBasicStatementItem(pkProject, statement, false))\n      ))\n    )\n  }\n\n  @spyTag private pipeBasicStatementItem(pkProject: number, statement: InfStatement, isOutgoing: boolean): Observable<BasicStatementItem> {\n    return this.s.pro$.info_proj_rel$.by_fk_project__fk_entity$.key(pkProject + '_' + statement.pk_entity).pipe(\n      filter(x => !!x),\n      map(projRel => ({\n        projRel, statement, label: '', ordNum: (isOutgoing ? projRel.ord_num_of_range : projRel.ord_num_of_domain), isOutgoing\n      }))\n    );\n  }\n\n  @spyTag pipeBasicStatementItemByPkStatement(pkProject: number, pkStatement: number, isOutgoing: boolean): Observable<BasicStatementItem> {\n    return this.s.inf$.statement$.by_pk_entity_key$(pkStatement).pipe(\n      switchMap(statement => (!statement) ? of(undefined) : this.pipeBasicStatementItem(pkProject, statement, isOutgoing))\n    )\n  }\n\n\n  @spyTag pipeInfTimePrimitive(pkEntity: number): Observable<InfTimePrimitive> {\n    return this.s.inf$.time_primitive$.by_pk_entity$.key(pkEntity)\n  }\n\n  /**\n   * pipes the TimeSpan of a temporal entity\n   * @param pkEntity the pk_entity of the termporal entity\n   */\n  @spyTag pipeTimeSpan(pkEntity: number): Observable<TimeSpanUtil> {\n    // Get the properties leading to presences\n    return combineLatest(\n      this.pipeOutgoingStatementsByProperty(72, pkEntity).pipe(this.timePrimitiveOfStatements()),\n      this.pipeOutgoingStatementsByProperty(71, pkEntity).pipe(this.timePrimitiveOfStatements()),\n      this.pipeOutgoingStatementsByProperty(150, pkEntity).pipe(this.timePrimitiveOfStatements()),\n      this.pipeOutgoingStatementsByProperty(151, pkEntity).pipe(this.timePrimitiveOfStatements()),\n      this.pipeOutgoingStatementsByProperty(152, pkEntity).pipe(this.timePrimitiveOfStatements()),\n      this.pipeOutgoingStatementsByProperty(153, pkEntity).pipe(this.timePrimitiveOfStatements()),\n\n    ).pipe(\n      map(([_72, _71, _150, _151, _152, _153]) => new TimeSpanUtil({\n        p82: _72,\n        p81: _71,\n        p82a: _152,\n        p81a: _150,\n        p81b: _151,\n        p82b: _153,\n      })),\n    )\n  }\n\n\n\n  /**\n   * Pipes max. one time primitive for an array of statements, assuming that the statements\n   * are of the same properties.\n   */\n  timePrimitiveOfStatements = () => pipe(\n    map((r: InfStatement[]) => r[0]),\n    switchMap((r) => {\n      if (!r) return new BehaviorSubject(undefined)\n      return this.pipeInfTimePrimitive(r.fk_object_info).pipe(\n        switchMap((infTimePrimitive) => this.p.pkProject$.pipe(\n          switchMap((pkProject) => this.s.pro$.info_proj_rel$.by_fk_project__fk_entity$\n            .key(pkProject + '_' + r[0].pk_entity).pipe(\n              filter(statement => !!statement),\n              map(ipr => {\n                const y: TimePrimitiveWithCal = {\n                  calendar: (ipr.calendar ? ipr.calendar : 'gregorian') as CalendarType,\n                  julianDay: infTimePrimitive.julian_day,\n                  duration: infTimePrimitive.duration as Granularity\n                }\n                return y;\n              })\n            ))\n        ))\n      )\n    })\n  )\n\n  /**\n   * Pipes the fk_class of the given entity\n   */\n  @spyTag pipeClassOfEntity(pkEntity: number): Observable<number> {\n    return merge(\n      this.s.inf$.persistent_item$.by_pk_entity_key$(pkEntity).pipe(\n        filter(e => !!e),\n        map(e => e.fk_class)\n      ),\n      this.s.inf$.temporal_entity$.by_pk_entity_key$(pkEntity).pipe(\n        filter(e => !!e),\n        map(e => e.fk_class)\n      )\n    )\n  }\n\n  /**\n   * Pipes distinct fk_classes of the given persistent items\n   */\n  @spyTag pipeClassesOfPersistentItems(pkEntities: number[]): Observable<number[]> {\n    return this.s.inf$.persistent_item$.by_pk_entity_all$().pipe(\n      map((peIts) => {\n        if (!pkEntities || pkEntities.length === 0) {\n          return []\n        }\n        const classes = {};\n        const a = [];\n        pkEntities.forEach(typePk => {\n          if (!classes[peIts[typePk].fk_class]) {\n            classes[peIts[typePk].fk_class] = true;\n            a.push(peIts[typePk].fk_class)\n          }\n        })\n        return a;\n      })\n    )\n\n  }\n\n\n  /*********************************************************************\n   * Repo\n  *********************************************************************/\n\n  /**\n    * Pipe repo outgoing statements.\n    */\n  @spyTag pipeRepoOutgoingStatements(pkEntity): Observable<InfStatement[]> {\n    return this.s.inf$.statement$.by_subject$({ fk_subject_info: pkEntity }, false)\n  }\n\n  /**\n  * Pipe repo ingoing statements.\n  */\n  @spyTag pipeRepoIngoingStatements(pkEntity): Observable<InfStatement[]> {\n    return this.s.inf$.statement$.by_object$({ fk_object_info: pkEntity }, false)\n  }\n\n  /**\n    * Pipe repo outgoing statements.\n    * If max quantity is limited, takes only max allowed number of statements, starting with highest is_in_project_count\n    */\n  @spyTag pipeRepoOutgoingStatementsByProperty(pkProperty, pkEntity): Observable<InfStatement[]> {\n    return combineLatest(\n      this.s.dfh$.property$.by_pk_property$.key(pkProperty)\n        .pipe(filter(x => !!x && Object.keys(x).length > 0), map(p => values(p)[0].range_instances_max_quantifier)),\n      this.s.inf$.statement$\n        .by_subject_and_property$({\n          fk_property: pkProperty,\n          fk_subject_info: pkEntity\n        }, false)\n      // .pipe(filter(x => !!x))\n    ).pipe(\n      map(([m, rs]) => {\n        if (rs.length === 0) return rs;\n        const r = this.sortStatementsByRepoPopularity(rs);\n        return (m === -1 || m === null) ? r : r.slice(0, m);\n      })\n    )\n  }\n\n  /**\n  * Pipe repo ingoing statements.\n  * If max quantity is limited, takes only max allowed number of statements, starting with highest is_in_project_count\n  */\n  @spyTag pipeRepoIngoingStatementsByProperty(pkProperty, pkEntity): Observable<InfStatement[]> {\n    return combineLatest(\n      this.s.dfh$.property$.by_pk_property$.key(pkProperty)\n        .pipe(filter(x => !!x && Object.keys(x).length > 0), map(p => values(p)[0].domain_instances_max_quantifier)),\n      this.s.inf$.statement$\n        .by_object_and_property$({\n          fk_property: pkProperty,\n          fk_object_info: pkEntity\n        }, false)\n      // .pipe(filter(x => !!x))\n    ).pipe(\n      map(([m, rs]) => {\n        if (rs.length === 0) return rs;\n        const r = this.sortStatementsByRepoPopularity(rs);\n        return (m === -1 || m === null) ? r : r.slice(0, m);\n      })\n    )\n  }\n\n\n  /*********************************************************************\n   * Alternatives (Repo minus Project)\n  *********************************************************************/\n\n  @spyTag pipeAlternativeBasicStatementItemByPkStatement(pkStatement: number, isOutgoing: boolean): Observable<BasicStatementItem> {\n    return combineLatest(\n      this.s.inf$.statement$.by_pk_entity_key$(pkStatement, false),\n      this.s.inf$.statement$.by_pk_entity_key$(pkStatement),\n    )\n      .pipe(\n        filter(([inrepo]) => !!inrepo),\n        map(([inrepo, inproject]) => {\n          if (inproject) {\n            return undefined\n          } else {\n            const i: BasicStatementItem = {\n              projRel: undefined,\n              statement: inrepo,\n              ordNum: undefined,\n              isOutgoing,\n              label: ''\n            }\n            return i\n          }\n        })\n      )\n  }\n\n\n  /**\n     * Pipe alternative ingoing statements (= statements not in active project)\n     */\n  @spyTag pipeAlternativeIngoingStatements(pkProperty, pkEntity): Observable<InfStatement[]> {\n    return combineLatest(\n      this.s.inf$.statement$.by_object_and_property_indexed$({\n        fk_property: pkProperty,\n        fk_object_info: pkEntity\n      }, false),\n      this.s.inf$.statement$.by_object_and_property_indexed$({\n        fk_property: pkProperty,\n        fk_object_info: pkEntity\n      }).pipe(\n        map(inproject => inproject ? Object.keys(inproject) : [])\n      )\n    ).pipe(\n      map(([inrepo, inproject]) => omit(inproject, inrepo)),\n      map(statements => values(statements))\n    )\n  }\n\n\n  /**\n   * Pipe alternative outgoing statements (= statements not in active project)\n   */\n  @spyTag pipeAlternativeOutgoingStatements(pkProperty, pkEntity): Observable<InfStatement[]> {\n    return combineLatest(\n      this.s.inf$.statement$.by_subject_and_property_indexed$({\n        fk_property: pkProperty,\n        fk_subject_info: pkEntity\n      }, false),\n      this.s.inf$.statement$.by_subject_and_property_indexed$({\n        fk_property: pkProperty,\n        fk_subject_info: pkEntity\n      }).pipe(\n        map(inproject => inproject ? Object.keys(inproject) : [])\n      ),\n    ).pipe(\n      map(([inrepo, inproject]) => omit(inproject, inrepo)),\n      map(statements => values(statements))\n    )\n  }\n\n\n\n  /**\n   * get array of pks of persistent items of a specific class\n   */\n  @spyTag pipePersistentItemPksByClass(pkClass): Observable<number[]> {\n    return this.s.inf$.persistent_item$.by_fk_class_key$(pkClass).pipe(\n      map(ob => {\n        if (ob) return Object.keys(ob).map(k => parseInt(k, 10));\n        return []\n      }))\n  }\n\n  /**\n   * gets the css classes for that entity\n   * @param pkEntity\n   */\n  pipeIconType(pkEntity: number): Observable<IconType> {\n\n    return this.p.streamEntityPreview(pkEntity).pipe(\n      map(preview => {\n        if (preview.entity_type == 'teEn') {\n          return 'temporal-entity'\n        }\n        if (preview.fk_class === DfhConfig.CLASS_PK_EXPRESSION_PORTION) {\n          return 'expression-portion'\n        } else if (DfhConfig.CLASS_PKS_SOURCE_PE_IT.includes(preview.fk_class)) {\n          return 'source'\n        }\n        return 'persistent-entity'\n      })\n    )\n\n  }\n\n\n  /*********************************************************************\n   * Helpers\n   *********************************************************************/\n  sortStatementsByRepoPopularity(statements: InfStatement[]): InfStatement[] {\n    return statements.sort((a, b) => a.is_in_project_count > b.is_in_project_count ? 1 : -1)\n  }\n\n\n\n}\n","\nimport { NgRedux } from '@angular-redux/store';\nimport { Injectable } from '@angular/core';\nimport { DfhConfig } from '@kleiolab/lib-config';\nimport { IAppState } from '@kleiolab/lib-redux';\nimport { InfStatement } from '@kleiolab/lib-sdk-lb3';\nimport { GvFieldPage, GvFieldTargets, GvTargetType, TimePrimitiveWithCal, WarEntityPreviewTimeSpan } from '@kleiolab/lib-sdk-lb4';\nimport { combineLatestOrEmpty, sortAbc, TimePrimitivePipe, TimeSpanPipe, TimeSpanUtil } from '@kleiolab/lib-utils';\nimport { equals, flatten, uniq, values } from 'ramda';\nimport { BehaviorSubject, combineLatest, empty, iif, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { cache, spyTag } from '../decorators/method-decorators';\nimport { infTimePrimToTimePrimWithCal } from '../functions/functions';\nimport { ClassAndTypeNode } from '../models/ClassAndTypeNode';\nimport { ClassAndTypeSelectModel } from '../models/ClassAndTypeSelectModel';\nimport { PropertyOption } from '../models/PropertyOption';\nimport { PropertySelectModel } from '../models/PropertySelectModel';\nimport { StatementProjRel, StatementTarget, StatementWithTarget, SubentitySubfieldPage, SubfieldPage } from '../models/StatementWithTarget';\nimport { InfSelector } from '../selectors/inf.service';\nimport { ActiveProjectPipesService } from './active-project-pipes.service';\nimport { ConfigurationPipesService } from './configuration-pipes.service';\nimport { InformationBasicPipesService } from './information-basic-pipes.service';\nimport { SchemaSelectorsService } from './schema-selectors.service';\n\n\n\n\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * This Service provides a collecion of pipes that aggregate or transform information.\n * For Example\n * - the lists of text properties, appellaitons, places, time-primitives / time-spans etc.\n * - the label of temporal entity or persistent item\n *\n * This mainly selects data from the information schema and the relation to projects.\n * It combines pipes selecting data from the\n * - activated project\n * - alternatives (not in project but in others)\n * - repo\n *\n */\nexport class InformationPipesService {\n\n  infRepo: InfSelector;\n\n  constructor(\n    private b: InformationBasicPipesService,\n    private p: ActiveProjectPipesService,\n    private s: SchemaSelectorsService,\n    private c: ConfigurationPipesService,\n    public timePrimitivePipe: TimePrimitivePipe,\n    private timeSpanPipe: TimeSpanPipe,\n    ngRedux: NgRedux<IAppState>\n  ) {\n    this.infRepo = new InfSelector(ngRedux, of('repo'))\n  }\n\n\n  /*********************************************************************\n   * Pipe the project entities\n   *********************************************************************/\n\n  //   // @spyTag\n  //   pipeListLength(l: Subfield, pkEntity: number): Observable<number> {\n  //     switch (l.listType) {\n  //       case 'appellation':\n  //       case 'entity-preview':\n  //       case 'language':\n  //       case 'place':\n  //       case 'dimension':\n  //       case 'langString':\n  //       case 'temporal-entity':\n  //         return this.pipeList(l, pkEntity).pipe(map(items => items.length))\n\n  //       case 'time-span':\n  //         return combineLatest(\n  //           this.b.pipeOutgoingStatementsByProperty(72, pkEntity),\n  //           this.b.pipeOutgoingStatementsByProperty(71, pkEntity),\n  //           this.b.pipeOutgoingStatementsByProperty(150, pkEntity),\n  //           this.b.pipeOutgoingStatementsByProperty(151, pkEntity),\n  //           this.b.pipeOutgoingStatementsByProperty(152, pkEntity),\n  //           this.b.pipeOutgoingStatementsByProperty(153, pkEntity)\n  //         ).pipe(\n  //           tap((x) => {\n\n  //           }),\n  //           map(items => items.filter(x => x.length > 0).length))\n\n  //       // case 'text-property':\n  //       //   return this.pipeListTextProperty(l, pkEntity).pipe(map(items => items.length))\n\n  //       default:\n  //         console.warn('unsupported listType')\n  //         return new BehaviorSubject(0);\n  //     }\n  //   }\n\n  //   // @spyTag\n  //   pipeList(l: Subfield, pkEntity, limit?: number): Observable<ItemList> {\n  //     if (l.listType.appellation) return this.pipeListAppellation(l, pkEntity, limit)\n  //     else if (l.listType.entityPreview) return this.pipeListEntityPreview(l, pkEntity, limit)\n  //     else if (l.listType.language) return this.pipeListLanguage(l, pkEntity, limit)\n  //     else if (l.listType.place) return this.pipeListPlace(l, pkEntity, limit)\n  //     else if (l.listType.dimension) return this.pipeListDimension(l, pkEntity, limit)\n  //     else if (l.listType.langString) return this.pipeListLangString(l, pkEntity, limit)\n  //     else if (l.listType.temporalEntity) return this.pipeListEntityPreview(l, pkEntity, limit)\n  //     else if (l.listType.timeSpan) {\n  //       return this.pipeItemTimeSpan(pkEntity).pipe(\n  //         map((ts) => [ts].filter(i => i.properties.length > 0))\n  //       )\n  //     }\n  //     else console.warn('unsupported listType')\n  //   }\n\n  //   // @spyTag\n  //   pipeListBasicStatementItems(listDefinition: Subfield, pkEntity: number, pkProject: number): Observable<BasicStatementItem[]> {\n  //     return (listDefinition.isOutgoing ?\n  //       this.b.pipeOutgoingBasicStatementItemsByProperty(listDefinition.property.pkProperty, pkEntity, pkProject) :\n  //       this.b.pipeIngoingBasicStatementItemsByProperty(listDefinition.property.pkProperty, pkEntity, pkProject)\n  //     )\n  //   }\n\n  //   /**\n  //    * Pipe the items in appellation field\n  //    */\n  //   // @spyTag\n  //   pipeListAppellation<T>(listDefinition: Subfield, pkEntity: number, limit?: number): Observable<AppellationItem[]> {\n  //     return this.b.pipeStatementsOfList(listDefinition, pkEntity)\n  //       .pipe(\n  //         switchMap((statements) => {\n  //           return combineLatest(statements.map((r, i) => this.pipeItemAppellation(r)))\n  //             .pipe(\n  //               map(nodes => nodes.filter(node => !!node && node.fkClass === listDefinition.targetClass)),\n  //               limitTo(limit),\n  //               startWith([]))\n  //         }))\n  //   }\n\n  //   /**\n  //  * Pipe the items in entity preview field\n  //  */\n  //   // @spyTag\n  //   pipeListEntityPreview<T>(listDefinition: Subfield, pkEntity: number, limit?: number): Observable<EntityPreviewItem[]> {\n\n  //     return this.b.pipeStatementsOfList(listDefinition, pkEntity)\n  //       .pipe(\n  //         tag(`before-${pkEntity}-${listDefinition.property.pkProperty}-${listDefinition.targetClass}`),\n  //         switchMap((statements) => {\n  //           return combineLatest(statements.map((r, i) => this.pipeItemEntityPreview(r, listDefinition.isOutgoing)))\n  //             .pipe(\n  //               map(nodes => nodes.filter(node => !!node && node.fkClass === listDefinition.targetClass)\n  //                 .sort((a, b) => a.ordNum > b.ordNum ? 1 : -1),\n  //                 limitTo(limit),\n  //               ),\n  //               startWith([])\n  //             )\n  //         }),\n  //         tag(`after-${pkEntity}-${listDefinition.property.pkProperty}-${listDefinition.targetClass}`),\n  //       )\n\n  //   }\n\n\n  //   // @spyTag\n  //   pipeListLanguage<T>(listDefinition: Subfield, pkEntity: number, limit?: number): Observable<LanguageItem[]> {\n\n  //     return this.b.pipeStatementsOfList(listDefinition, pkEntity)\n  //       .pipe(\n  //         switchMap((statements) => {\n  //           return combineLatest(statements.map((r, i) => this.pipeItemLanguage(r)))\n  //             .pipe(\n  //               map(nodes => nodes.filter(node => !!node && node.fkClass === listDefinition.targetClass)),\n  //               limitTo(limit),\n  //               startWith([]))\n  //         }))\n  //   }\n\n  //   /**\n  //    * Pipe the items in place list\n  //    */\n  //   // @spyTag\n  //   pipeListPlace<T>(listDefinition: Subfield, pkEntity: number, limit?: number): Observable<PlaceItem[]> {\n\n  //     return this.b.pipeStatementsOfList(listDefinition, pkEntity)\n  //       .pipe(\n  //         switchMap((statements) => {\n  //           return combineLatest(statements.map((r, i) => this.pipeItemPlace(r)))\n  //             .pipe(\n  //               map(nodes => nodes.filter(node => !!node && node.fkClass === listDefinition.targetClass)),\n  //               limitTo(limit),\n  //               startWith([]))\n  //         }))\n  //   }\n\n  //   /**\n  //    * Pipe the items in place list\n  //    */\n  //   // @spyTag\n  //   pipeListDimension<T>(listDefinition: Subfield, pkEntity: number, limit?: number): Observable<DimensionItem[]> {\n\n  //     return this.b.pipeStatementsOfList(listDefinition, pkEntity)\n  //       .pipe(\n  //         switchMap((statements) => {\n  //           return combineLatest(statements.map((r, i) => this.pipeItemDimension(r)))\n  //             .pipe(\n  //               map(nodes => nodes.filter(node => !!node && node.fkClass === listDefinition.targetClass)),\n  //               limitTo(limit),\n  //               startWith([]))\n  //         }))\n  //   }\n\n  //   /**\n  //  * Pipe the items in langString list\n  //  */\n  //   // @spyTag\n  //   pipeListLangString<T>(listDefinition: Subfield, pkEntity: number, limit?: number): Observable<LangStringItem[]> {\n\n  //     return this.b.pipeStatementsOfList(listDefinition, pkEntity)\n  //       .pipe(\n  //         switchMap((statements) => {\n  //           return combineLatest(statements.map((r, i) => this.pipeItemLangString(r)))\n  //             .pipe(\n  //               map(nodes => nodes.filter(node => !!node && node.fkClass === listDefinition.targetClass)),\n  //               limitTo(limit),\n  //               startWith([]))\n  //         }))\n\n  //   }\n\n  /**\n   * pipe the project relation of given statment, if the scope of this page is inProject\n   * @param stmt InfStatement to be completed with projRel\n   * @param page page for which we are piping this stuff\n   */\n  pipeProjRelOfStatement(stmt: InfStatement, page: GvFieldPage): Observable<StatementProjRel> {\n    if (page.scope.inProject) {\n      return this.s.pro$.info_proj_rel$.by_fk_project__fk_entity$\n        .key(page.scope.inProject + '_' + stmt.pk_entity).pipe(\n          map(\n            projRel => ({\n              projRel,\n              ordNum: page.isOutgoing ? projRel.ord_num_of_range : projRel.ord_num_of_domain\n            })\n          )\n        )\n    } else {\n      return new BehaviorSubject({\n        projRel: undefined,\n        ordNum: 0\n      })\n    }\n  }\n  /**\n   * pipe the target of given statment\n   * @param stmt InfStatement to be completed with target\n   * @param page page for which we are piping this stuff\n   * @param subfieldType type of subfield for which we pipe this stuff\n   */\n  pipeTargetOfStatement(stmt: InfStatement, page: GvFieldPage, targets: GvFieldTargets): Observable<StatementTarget> {\n    const isOutgoing = page.isOutgoing\n    const targetInfo = isOutgoing ? stmt.fk_object_info : stmt.fk_subject_info;\n    // here you could add targetData or targetCell\n\n\n    return this.s.inf$.getModelOfEntity$(targetInfo).pipe(\n      filter(x => !!x),\n      switchMap(item => {\n        const subfieldType: GvTargetType = targets[item.fkClass]\n        if (subfieldType.appellation) {\n          return this.s.inf$.appellation$.by_pk_entity$.key(targetInfo).pipe(\n            filter(x => !!x),\n            map(appellation => {\n              const stmtTarget: StatementTarget = {\n                statement: stmt,\n                isOutgoing,\n                targetLabel: appellation.string,\n                targetClass: appellation.fk_class,\n                target: {\n                  appellation\n                }\n              }\n              return stmtTarget\n            })\n          )\n        }\n        else if (subfieldType.place) {\n          return this.s.inf$.place$.by_pk_entity$.key(targetInfo).pipe(\n            filter(x => !!x),\n            map(place => {\n              const stmtTarget: StatementTarget = {\n                statement: stmt,\n                isOutgoing,\n                targetLabel: `WGS84: ${place.lat}Â°, ${place.long}Â°`,\n                targetClass: place.fk_class,\n                target: {\n                  place\n                }\n              }\n              return stmtTarget\n            })\n          )\n        }\n        else if (subfieldType.dimension) {\n          return this.s.inf$.dimension$.by_pk_entity$.key(targetInfo).pipe(\n            filter(x => !!x),\n            switchMap(dimension => {\n              return this.p.streamEntityPreview(dimension.fk_measurement_unit)\n                .pipe(\n                  map(\n                    unitPreview => {\n                      const stmtTarget: StatementTarget = {\n                        statement: stmt,\n                        isOutgoing,\n                        targetLabel: `${dimension.numeric_value} ${unitPreview.entity_label}`,\n                        targetClass: dimension.fk_class,\n                        target: {\n                          dimension\n                        }\n                      }\n                      return stmtTarget\n\n                    }\n                  )\n                )\n            })\n          )\n        }\n        else if (subfieldType.langString) {\n          return this.s.inf$.lang_string$.by_pk_entity$.key(targetInfo).pipe(\n            filter(x => !!x),\n            switchMap(langString => {\n              return this.s.inf$.language$.by_pk_entity$.key(langString.fk_language)\n                .pipe(\n                  map(\n                    language => {\n                      const stmtTarget: StatementTarget = {\n                        statement: stmt,\n                        isOutgoing,\n                        targetLabel: `${langString.string} (${language.iso6391})`,\n                        targetClass: langString.fk_class,\n                        target: {\n                          langString\n                        }\n                      }\n                      return stmtTarget\n\n                    }\n                  )\n                )\n            })\n          )\n        }\n        else if (subfieldType.language) {\n          return this.s.inf$.language$.by_pk_entity$.key(targetInfo).pipe(\n            filter(x => !!x),\n            map(language => {\n              const stmtTarget: StatementTarget = {\n                statement: stmt,\n                isOutgoing,\n                targetLabel: `${language.notes || language.iso6391}`,\n                targetClass: language.fk_class,\n                target: {\n                  language\n                }\n              }\n              return stmtTarget\n            })\n          )\n        }\n        else if (subfieldType.entityPreview || subfieldType.typeItem) {\n          return this.p.streamEntityPreview(targetInfo).pipe(\n            filter(x => !!x),\n            map(entityPreview => {\n              const stmtTarget: StatementTarget = {\n                statement: stmt,\n                isOutgoing,\n                targetLabel: `${entityPreview.entity_label}`,\n                targetClass: entityPreview.fk_class,\n                target: {\n                  entityPreview\n                }\n              }\n              return stmtTarget\n            })\n          )\n        }\n\n        else if (subfieldType.temporalEntity) {\n\n          return this.s.inf$.temporal_entity$._by_pk_entity$.key(targetInfo).pipe(\n            filter(x => !!x),\n            map(temporalEntity => {\n              const stmtTarget: StatementTarget = {\n                statement: stmt,\n                isOutgoing,\n                targetLabel: ``,\n                targetClass: temporalEntity.fk_class,\n                target: {\n                  entity: {\n                    pkEntity: temporalEntity.pk_entity,\n                    fkClass: temporalEntity.fk_class\n                  }\n                }\n              }\n              return stmtTarget\n            })\n          )\n          // console.log('subfieldType.temporalEntity.length', subfieldType.temporalEntity.length)\n\n          // // for each of these subfields\n          // const subentityPages$ = subfieldType.temporalEntity.map(subfieldReq => {\n\n          //   // console.log('subentity subfield for targetInfo', targetInfo)\n\n          //   // create page:GvSubfieldPage\n          //   const { isCircular, ...p } = subfieldReq.page\n          //   const scope = page.scope.notInProject ? { inRepo: true } : page.scope\n          //   const nestedPage: GvFieldPage = {\n          //     ...p,\n          //     fkSourceEntity: targetInfo,\n          //     scope,\n          //   }\n\n          //   return this.pipeSubfieldPage(nestedPage, subfieldReq.subfieldType).pipe(\n          //     map(({ count, statements }) => {\n          //       const { limit, offset, ...s } = nestedPage;\n          //       const subentitySubfieldPage: SubentitySubfieldPage = {\n          //         subfield: s,\n          //         count,\n          //         statements\n          //       }\n          //       return subentitySubfieldPage\n          //     }),\n          //     // startWith(undefined) // TODO remove! this is for debugging\n          //   )\n          // })\n\n          // return combineLatestOrEmpty(subentityPages$)\n          //   .pipe(\n          //     // filter(subfields => {\n          //     //   console.log('subfields\\n', subfields.map((item, i) => {\n          //     //     const req = subfieldType.temporalEntity[i]\n          //     //     const fieldInfo = targetInfo + '_' + req.page.fkProperty + '_' + req.page.targetClass + '_' + keys(req.subfieldType)[0]\n          //     //     return `${i}: ${item === undefined ?\n          //     //       `undefined ${fieldInfo}` :\n          //     //       `ok        ${fieldInfo}`\n          //     //       }`\n          //     //   }).join('\\n'))\n          //     //   return !subfields.includes(undefined)\n          //     // }),\n          //     map(\n          //       subfields => {\n          //         const stmtTarget: StatementTarget = {\n          //           statement: stmt,\n          //           isOutgoing,\n          //           targetLabel: '',\n          //           targetClass: page.targetClass,\n          //           target: {\n          //             entity: {\n          //               pkEntity: targetInfo,\n          //               subfields\n          //             }\n          //           }\n          //         }\n          //         return stmtTarget\n          //       }\n          //     )\n          //   )\n        }\n\n        else if (subfieldType.timePrimitive) {\n          return this.s.inf$.time_primitive$.by_pk_entity$.key(targetInfo).pipe(\n            filter(x => !!x),\n            switchMap(timePrimitive => {\n              // get calendar\n              let cal$: Observable<TimePrimitiveWithCal.CalendarEnum>\n              if (page.scope.inProject) {\n                cal$ = this.s.pro$.info_proj_rel$.by_fk_project__fk_entity$.key(page.scope.inProject + '_' + stmt.pk_entity)\n                  .pipe(\n                    map(\n                      infoProjRel => infoProjRel.calendar as TimePrimitiveWithCal.CalendarEnum\n                    )\n                  )\n              }\n              else {\n                cal$ = new BehaviorSubject(stmt.community_favorite_calendar as TimePrimitiveWithCal.CalendarEnum)\n              }\n              // pipe target time primitive of stmt\n              return cal$.pipe(\n                map(\n                  cal => {\n                    const timePrimWithCal = infTimePrimToTimePrimWithCal(timePrimitive, cal)\n                    const stmtTarget: StatementTarget = {\n                      statement: stmt,\n                      isOutgoing,\n                      targetLabel: this.timePrimitivePipe.transform(timePrimWithCal),\n                      targetClass: timePrimitive.fk_class,\n                      target: {\n                        timePrimitive: timePrimWithCal\n                      }\n                    }\n                    return stmtTarget\n\n                  }\n                )\n              )\n            })\n          )\n        }\n\n        throw new Error(`No implementation found for subfieldType ${JSON.stringify(subfieldType)}`);\n      })\n    )\n\n\n  }\n\n  /**\n   * pipe target and projRel of the given statement\n   */\n  pipeStatementWithTarget(stmt: InfStatement, page: GvFieldPage, targets: GvFieldTargets): Observable<StatementWithTarget> {\n\n    return combineLatest(\n      this.pipeTargetOfStatement(stmt, page, targets),\n      this.pipeProjRelOfStatement(stmt, page)\n    ).pipe(\n      map(([target, projRel]) => ({ ...target, ...projRel }))\n    )\n  }\n\n  pipeSubfieldPage(page: GvFieldPage, targets: GvFieldTargets): Observable<SubfieldPage> {\n    if (page.fkProperty === DfhConfig.PROPERTY_PK_HAS_TIME_SPAN && page.isOutgoing) {\n      // if timeSpan make a short cut: produce a virtual statementWithTarget from entity to timeSpan\n      return this.pipeTimeSpan(page)\n    }\n    else {\n      // get the statments of that page\n      return combineLatest(\n        this.s.inf$.statement$.pagination$.pipeCount(page),\n        this.s.inf$.statement$.pagination$.pipePage(page)\n          .pipe(\n            switchMap(\n              pkStmts => combineLatestOrEmpty(\n                pkStmts.map(pkStmt => this.s.inf$.statement$.by_pk_entity$.key(pkStmt)\n                  // for each statement, depending on the subfieldType, load the corresponding target\n                  .pipe(\n                    filter(stmt => !!stmt),\n                    switchMap(stmt => this.pipeStatementWithTarget(stmt, page, targets))\n                  )\n                )\n              )\n            ),\n          )\n      ).pipe(\n        map(([count, statements]) => ({ count, statements }))\n      )\n    }\n\n  }\n\n  private pipeTimeSpan(page: GvFieldPage) {\n    const virtualStatementToTimeSpan = { fk_object_info: page.fkSourceEntity };\n    const targets: GvFieldTargets = { [DfhConfig.ClASS_PK_TIME_SPAN]: { timeSpan: 'true' } }\n\n    // console.log('subfieldType.temporalEntity.length', subfieldType.temporalEntity.length)\n\n    // for each of these subfields\n    const subentityPages$ = DfhConfig.PROPERTY_PKS_WHERE_TIME_PRIMITIVE_IS_RANGE\n      .map(fkProperty => {\n\n        // console.log('subentity subfield for targetInfo', targetInfo)\n\n        // create page:GvSubfieldPage\n        const scope = page.scope.notInProject ? { inRepo: true } : page.scope\n\n        const nestedPage: GvFieldPage = {\n          fkProperty,\n          isOutgoing: true,\n          limit: 1,\n          offset: 0,\n          fkSourceEntity: page.fkSourceEntity,\n          scope,\n        }\n        const subfType: GvTargetType = {\n          timePrimitive: 'true'\n        }\n        const trgts = {\n          [DfhConfig.CLASS_PK_TIME_PRIMITIVE]: subfType\n        }\n        return this.pipeSubfieldPage(nestedPage, trgts).pipe(\n          map(({ count, statements }) => {\n            const { limit, offset, ...s } = nestedPage;\n            const subentitySubfieldPage: SubentitySubfieldPage = {\n              subfield: s,\n              count,\n              statements\n            }\n            return subentitySubfieldPage\n          })\n        )\n      })\n\n\n    return combineLatestOrEmpty(subentityPages$)\n      .pipe(\n        map(\n          subfields => {\n            const timeSpanPreview: WarEntityPreviewTimeSpan = {}\n            subfields.forEach(s => {\n              if (s.statements[0]) {\n                const st = s.statements[0]\n                const key = DfhConfig.PROPERTY_PK_TO_EXISTENCE_TIME_KEY[st.statement.fk_property]\n                timeSpanPreview[key] = st.target.timePrimitive\n              }\n            })\n            const stmtTarget: StatementTarget = {\n              statement: virtualStatementToTimeSpan,\n              isOutgoing: page.isOutgoing,\n              targetLabel: this.timeSpanPipe.transform(new TimeSpanUtil(timeSpanPreview)),\n              targetClass: DfhConfig.ClASS_PK_TIME_SPAN,\n              target: {\n                timeSpan: {\n                  preview: timeSpanPreview,\n                  subfields\n                }\n              }\n            }\n            return stmtTarget\n          }\n        )\n      ).pipe(map(stmtTarget => {\n        const stmtWT: StatementWithTarget = {\n          ...stmtTarget,\n          projRel: undefined,\n          ordNum: undefined\n        };\n        return { count: 1, statements: [stmtWT] };\n      }));\n  }\n\n  // pipeStatementListPage(\n  //   paginateBy: PaginateByParam[],\n  //   limit: number,\n  //   offset: number,\n  //   pkProject: number,\n  //   listDefinition: Subfield,\n  //   alternative = false): Observable<EntityPreviewItem[]> {\n\n  //   // prepare page loader\n  //   const pageLoader$ = alternative ? this.infRepo.statement$.pagination$ : this.s.inf$.statement$.pagination$;\n\n  //   // prepare basic statement item loader\n  //   const basicStatementItemLoader = (pkStatement, isOutgoing, pkProj) => {\n  //     return alternative ?\n  //       this.b.pipeAlternativeBasicStatementItemByPkStatement(pkStatement, isOutgoing) :\n  //       this.b.pipeBasicStatementItemByPkStatement(pkProj, pkStatement, isOutgoing)\n  //   }\n\n  //   const paginatedStatementPks$ = pageLoader$.pipePage(paginateBy, limit, offset)\n\n  //   return paginatedStatementPks$.pipe(\n  //     switchMap((paginatedStatementPks) => combineLatestOrEmpty(\n  //       paginatedStatementPks.map(pkStatement => basicStatementItemLoader(pkStatement, listDefinition.isOutgoing, pkProject)\n  //         .pipe(\n  //           filter(x => !!x),\n  //           switchMap(x => this.p.streamEntityPreview(x.isOutgoing ? x.statement.fk_object_info : x.statement.fk_subject_info)\n  //             .pipe(\n  //               map((preview) => {\n  //                 const item: EntityPreviewItem = {\n  //                   ...x,\n  //                   preview,\n  //                   fkClass: preview.fk_class\n  //                 }\n  //                 return item;\n  //               })\n  //             )\n  //           ))\n\n  //       )\n  //     )\n  //     ))\n\n  // }\n\n\n  // /**\n  //  * Pipe the temporal entities connected to given entity by statements that are in the current project\n  //  */\n  // // @spyTag\n  // // pipeTemporalEntityTableRows(\n  // //   paginateBy: PaginateByParam[],\n  // //   limit: number,\n  // //   offset: number,\n  // //   pkProject: number,\n  // //   listDefinition: Subfield,\n  // //   fieldDefinitions: Field[],\n  // //   alternative = false): Observable<TemporalEntityItem[]> {\n\n  // //   // const propertyItemType = this.propertyItemType(fieldDefinitions)\n\n  // //   const targetEntityOfStatementItem = (r: BasicStatementItem) => r.isOutgoing ? r.statement.fk_object_info : r.statement.fk_subject_info;\n\n  // //   // prepare page loader\n  // //   const pageLoader$ = alternative ? this.infRepo.statement$.pagination$ : this.s.inf$.statement$.pagination$;\n\n  // //   // prepare basic statement item loader\n  // //   const basicStatementItemLoader = (pkStatement, isOutgoing, pkProj) => {\n  // //     return alternative ?\n  // //       this.b.pipeAlternativeBasicStatementItemByPkStatement(pkStatement, isOutgoing) :\n  // //       this.b.pipeBasicStatementItemByPkStatement(pkProj, pkStatement, isOutgoing)\n  // //   }\n\n  // //   // prepare TeEnRow loader\n  // //   const rowLoader = (targetEntityPk, fieldDef, pkProj) => {\n  // //     return alternative ?\n  // //       this.pipeItemTeEnRow(targetEntityPk, fieldDef, null, true) :\n  // //       this.pipeItemTeEnRow(targetEntityPk, fieldDef, pkProj, false)\n  // //   }\n\n  // //   const paginatedStatementPks$ = pageLoader$.pipePage(paginateBy, limit, offset)\n\n  // //   const rows$ = paginatedStatementPks$.pipe(\n  // //     switchMap((paginatedStatementPks) => combineLatestOrEmpty(\n  // //       paginatedStatementPks.map(pkStatement => basicStatementItemLoader(pkStatement, listDefinition.isOutgoing, pkProject)\n  // //         .pipe(filter(x => !!x))\n  // //       )\n  // //     )\n  // //       .pipe(\n  // //         switchMap((teEnStatement) => combineLatestOrEmpty(\n  // //           teEnStatement.map((basicStatementItem) => {\n  // //             const pkTeEn = targetEntityOfStatementItem(basicStatementItem);\n  // //             return combineLatest(\n  // //               rowLoader(\n  // //                 pkTeEn,\n  // //                 fieldDefinitions,\n  // //                 // propertyItemType,\n  // //                 pkProject\n  // //               ),\n  // //               this.s.pro$.info_proj_rel$.by_fk_project__fk_entity$.key(pkProject + '_' + pkTeEn)\n  // //             ).pipe(\n  // //               map(([row, teEnProjRel]) => {\n  // //                 const item: TemporalEntityItem = {\n  // //                   ...basicStatementItem,\n  // //                   row,\n  // //                   pkEntity: pkTeEn,\n  // //                   teEnProjRel\n  // //                 };\n  // //                 return item\n  // //               })\n  // //             )\n  // //           })\n  // //         )),\n  // //       )),\n\n  // //   )\n  // //   return rows$\n  // // }\n\n\n\n  // // @spyTag\n  // pipeItemTeEnRow(pkEntity: number, fieldDefinitions: Field[], pkProject: number, repo: boolean): Observable<TemporalEntityRow> {\n\n  //   // pipe outgoing statements\n  //   const outgoingStatements$ = repo ? this.b.pipeRepoOutgoingStatements(pkEntity) : this.b.pipeOutgoingStatements(pkEntity);\n  //   // pipe ingoing statements\n  //   const ingoingStatements$ = repo ? this.b.pipeRepoIngoingStatements(pkEntity) : this.b.pipeIngoingStatements(pkEntity);\n\n\n  //   // pipe all statements with information leaf items\n\n  //   const outgoingItems$: Observable<StatementItem[]> = outgoingStatements$.pipe(\n  //     switchMap(statements => combineLatestOrEmpty(\n  //       statements\n  //         .filter(statement => !!statement.fk_object_info) // remove statements not pointing to information\n  //         .map(s => {\n  //           const isOutgoing = true;\n  //           return this.pipeItem(s, pkProject, isOutgoing);\n  //         })\n  //     ))\n\n  //   )\n  //   const ingoingItems$: Observable<StatementItem[]> = ingoingStatements$.pipe(\n  //     switchMap(statements => combineLatestOrEmpty(\n  //       statements\n  //         .filter(statement => !!statement.fk_subject_info) // remove statements not pointing to information\n  //         .map(s => {\n  //           const isOutgoing = false;\n  //           return this.pipeItem(s, pkProject, isOutgoing);\n  //         })\n  //     ))\n\n  //   )\n\n  //   const sortItems = repo ?\n  //     (item: StatementItem[]) => item.sort((a, b) => a.statement.is_in_project_count > b.statement.is_in_project_count ? 1 : -1) :\n  //     (item: StatementItem[]) => item;\n\n\n  //   return combineLatest(outgoingItems$, ingoingItems$).pipe(\n\n  //     map(([outgoingItems, ingoingItems]) => {\n  //       const groupedOut = groupBy((i) => (i && i.statement ? i.statement.fk_property.toString() : undefined), outgoingItems);\n  //       const groupedIn = groupBy((i) => (i && i.statement ? i.statement.fk_property.toString() : undefined), ingoingItems);\n  //       return { groupedOut, groupedIn }\n  //     }),\n  //     // auditTime(10),\n  //     map((d) => {\n  //       const row: TemporalEntityRow = {}\n\n  //       fieldDefinitions.forEach(fieldDefinition => {\n\n  //         let cell: TemporalEntityCell;\n  //         fieldDefinition.listDefinitions.forEach(listDefinition => {\n  //           if (listDefinition.listType.timeSpan) {\n\n  //             const t = pick(['71', '72', '150', '151', '152', '153'], d.groupedOut);\n  //             const keys = Object.keys(t);\n  //             const itemsCount = keys.length;\n\n  //             let label;\n  //             if (itemsCount > 0) {\n  //               const timeSpanKeys: CtrlTimeSpanDialogResult = {}\n  //               keys.forEach(key => { timeSpanKeys[key] = t[key][0].timePrimitive })\n  //               const timeSpan = TimeSpanUtil.fromTimeSpanDialogData(timeSpanKeys);\n  //               label = this.timeSpanPipe.transform(timeSpan);\n  //             }\n  //             cell = {\n  //               isOutgoing: listDefinition.isOutgoing,\n  //               itemsCount,\n  //               label,\n  //               entityPreview: undefined,\n  //               pkProperty: undefined,\n  //               isTimeSpan: true\n  //             }\n  //           }\n  //           else {\n  //             if (listDefinition.isOutgoing) {\n  //               if (d.groupedOut[listDefinition.property.pkProperty]) {\n  //                 const items = sortItems(d.groupedOut[listDefinition.property.pkProperty])\n  //                 const firstItem = items[0];\n  //                 cell = {\n  //                   isOutgoing: listDefinition.isOutgoing,\n  //                   itemsCount: items.length,\n  //                   entityPreview: ((firstItem || {}) as EntityPreviewItem).preview,\n  //                   label: firstItem.label,\n  //                   pkProperty: listDefinition.property.pkProperty,\n  //                   firstItem,\n  //                   items\n  //                 }\n  //               }\n  //             } else {\n  //               if (d.groupedIn[listDefinition.property.pkProperty]) {\n  //                 const items = sortItems(d.groupedIn[listDefinition.property.pkProperty])\n  //                 const firstItem = items[0];\n  //                 cell = {\n  //                   isOutgoing: listDefinition.isOutgoing,\n  //                   itemsCount: items.length,\n  //                   entityPreview: ((firstItem || {}) as EntityPreviewItem).preview,\n  //                   label: firstItem.label,\n  //                   pkProperty: listDefinition.property.pkProperty,\n  //                   firstItem,\n  //                   items\n  //                 }\n  //               }\n  //             }\n  //           }\n\n  //         })\n\n\n  //         row[fieldDefinition.label] = cell;\n  //       })\n  //       return row\n  //     })\n\n\n  //   )\n  // }\n\n\n\n  // // @spyTag\n  // private pipeItem(r: InfStatement, pkProject: number, propIsOutgoing: boolean) {\n\n  //   const targetEntity = propIsOutgoing ? r.fk_object_info : r.fk_subject_info;\n  //   return this.s.inf$.getModelOfEntity$(targetEntity).pipe(\n  //     switchMap(m => {\n  //       const modelName: InfModelName = m ? m.modelName : undefined;\n  //       switch (modelName) {\n  //         case 'appellation':\n  //           return this.pipeItemAppellation(r);\n  //         case 'language':\n  //           return this.pipeItemLanguage(r);\n  //         case 'place':\n  //           return this.pipeItemPlace(r);\n  //         case 'dimension':\n  //           return this.pipeItemDimension(r);\n  //         case 'lang_string':\n  //           return this.pipeItemLangString(r);\n  //         case 'time_primitive':\n  //           return this.pipeItemTimePrimitive(r, pkProject); // TODO: emits twice\n  //         default:\n  //           return this.pipeItemEntityPreview(r, propIsOutgoing);\n  //       }\n\n\n  //     })\n  //   )\n\n\n  // }\n\n\n  // // @spyTag\n  // pipeEntityProperties(listDef: Subfield, fkEntity: number, limit?: number): Observable<EntityProperties> {\n\n  //   if (listDef.listType.appellation) {\n  //     return this.pipeListAppellation(listDef, fkEntity, limit)\n  //       .pipe(map((items) => this.getEntityProperties(listDef, items)))\n  //   }\n  //   else if (listDef.listType.language) {\n  //     return this.pipeListLanguage(listDef, fkEntity, limit)\n  //       .pipe(map((items) => this.getEntityProperties(listDef, items)))\n  //   }\n  //   else if (listDef.listType.place) {\n  //     return this.pipeListPlace(listDef, fkEntity, limit)\n  //       .pipe(map((items) => this.getEntityProperties(listDef, items)))\n  //   }\n  //   else if (listDef.listType.dimension) {\n  //     return this.pipeListDimension(listDef, fkEntity, limit)\n  //       .pipe(map((items) => this.getEntityProperties(listDef, items)))\n  //   }\n  //   else if (listDef.listType.langString) {\n  //     return this.pipeListLangString(listDef, fkEntity, limit)\n  //       .pipe(map((items) => this.getEntityProperties(listDef, items)))\n  //   }\n\n\n  //   else if (listDef.listType.entityPreview || listDef.listType.temporalEntity) {\n  //     return this.pipeListEntityPreview(listDef, fkEntity, limit)\n  //       .pipe(map((items) => this.getEntityProperties(listDef, items)))\n  //   }\n  //   else if (listDef.listType.timeSpan) {\n  //     return this.pipeItemTimeSpan(fkEntity)\n  //       .pipe(map((item) => {\n  //         const items = item.properties.find(p => p.items.length > 0) ? [{\n  //           label: this.timeSpanPipe.transform(timeSpanItemToTimeSpan(item)),\n  //           properties: [] // TODO check if the properties or the item are really not needed\n  //         }] : []\n  //         return {\n  //           listDefinition: listDef,\n  //           items\n  //         }\n  //       }))\n  //   }\n  //   else return of(null)\n  // }\n\n  // // @spyTag\n  // pipeTemporalEntityRemoveProperties(pkEntity: number): Observable<TemporalEntityRemoveProperties> {\n  //   return combineLatest(\n  //     this.s.inf$.temporal_entity$.by_pk_entity_key$(pkEntity),\n  //     this.s.inf$.statement$.by_subject$({ fk_subject_info: pkEntity }),\n  //     this.s.inf$.text_property$.by_fk_concerned_entity_indexed$(pkEntity)\n  //   ).pipe(\n  //     map(([temporalEntity, statements, textProperties]) => {\n  //       const res: TemporalEntityRemoveProperties = {\n  //         temporalEntity,\n  //         statements: statements,\n  //         textProperties: values(textProperties)\n  //       }\n  //       return res\n  //     })\n  //   )\n  // }\n\n  // getEntityProperties(listDefinition: Subfield, items): EntityProperties {\n  //   return {\n  //     listDefinition,\n  //     items,\n  //   }\n  // }\n\n  // /**\n  //  * Pipe time span item in version of project\n  //  */\n  // // @spyTag\n  // pipeItemTimeSpan(pkEntity): Observable<TimeSpanItem> {\n\n  //   return this.p.pkProject$.pipe(\n  //     switchMap(pkProject => {\n  //       return this.c.pipeSpecificFieldOfClass(\n  //         DfhConfig.ClASS_PK_TIME_SPAN\n  //       ).pipe(\n  //         switchMap(fieldDefs => {\n  //           return combineLatest(fieldDefs.map(fieldDef => this.s.inf$.statement$.by_subject_and_property$({\n  //             fk_property: fieldDef.property.pkProperty,\n  //             fk_subject_info: pkEntity\n  //           })\n  //             .pipe(\n  //               switchMapOr([], statements => combineLatest(\n  //                 statements.map(statement => combineLatest(\n  //                   this.s.inf$.time_primitive$.by_pk_entity$.key(statement.fk_object_info).pipe(filter(x => !!x)),\n  //                   this.s.pro$.info_proj_rel$.by_fk_project__fk_entity$.key(pkProject + '_' + statement.pk_entity)\n  //                 ).pipe(map(([infTimePrimitive, projRel]) => {\n  //                   const timePrimitive = new TimePrimitive({\n  //                     julianDay: infTimePrimitive.julian_day,\n  //                     calendar: ((projRel.calendar || 'gregorian') as CalendarType),\n  //                     duration: (infTimePrimitive.duration as Granularity)\n  //                   })\n  //                   const item: TimePrimitiveItem = {\n  //                     statement,\n  //                     ordNum: undefined,\n  //                     projRel,\n  //                     timePrimitive,\n  //                     label: this.timePrimitivePipe.transform(timePrimitive),\n  //                     fkClass: infTimePrimitive.fk_class\n  //                   }\n  //                   return item;\n  //                 }))\n  //                 )\n  //               )),\n  //               map(items => {\n  //                 const res: TimeSpanProperty = {\n  //                   listDefinition: fieldDef.listDefinitions[0], items\n  //                 }\n  //                 return res\n  //               })\n  //             )\n  //           )).pipe(\n  //             map((properties) => {\n  //               const props = properties.filter(p => p.items.length > 0);\n  //               const timespanitem: TimeSpanItem = {\n  //                 label: '',\n  //                 properties: props\n  //               }\n  //               return timespanitem\n  //             })\n  //           )\n  //         })\n  //       )\n  //     })\n\n  //   )\n  // }\n\n  // // @spyTag\n  // pipeItemAppellation(statement: InfStatement): Observable<AppellationItem> {\n  //   return this.s.inf$.appellation$.by_pk_entity$.key(statement.fk_object_info).pipe(\n  //     filter(x => !!x),\n  //     map(appellation => {\n  //       if (!appellation) return null;\n  //       const node: AppellationItem = {\n  //         ordNum: undefined,\n  //         projRel: undefined,\n  //         statement,\n  //         label: appellation.string,\n  //         fkClass: appellation.fk_class\n  //       }\n  //       return node\n  //     }))\n  // }\n\n  // // @spyTag\n  // pipeItemLanguage(statement: InfStatement): Observable<LanguageItem> {\n  //   return this.s.inf$.language$.by_pk_entity$.key(statement.fk_object_info).pipe(\n  //     filter(x => !!x),\n  //     map(language => {\n  //       if (!language) return null;\n  //       const node: LanguageItem = {\n  //         ordNum: undefined,\n  //         projRel: undefined,\n  //         statement,\n  //         label: language.notes,\n  //         fkClass: language.fk_class\n  //       }\n  //       return node\n  //     }))\n  // }\n\n  // // @spyTag\n  // pipeItemPlace(statement: InfStatement): Observable<PlaceItem> {\n  //   return this.s.inf$.place$.by_pk_entity$.key(statement.fk_object_info).pipe(\n  //     filter(x => !!x),\n  //     map(place => {\n  //       if (!place) return null;\n  //       const node: PlaceItem = {\n  //         ordNum: undefined,\n  //         projRel: undefined,\n  //         statement,\n  //         label: 'WGS84: ' + place.lat + 'Â°, ' + place.long + 'Â°',\n  //         fkClass: place.fk_class\n  //       }\n  //       return node\n  //     }))\n  // }\n\n  // // @spyTag\n  // pipeItemDimension(statement: InfStatement): Observable<DimensionItem> {\n  //   return this.s.inf$.dimension$.by_pk_entity$.key(statement.fk_object_info).pipe(\n  //     filter(x => !!x),\n  //     switchMap((dimension) => {\n  //       return this.p.streamEntityPreview(dimension.fk_measurement_unit)\n  //         .pipe(\n  //           map(preview => {\n\n  //             const node: DimensionItem = {\n  //               ordNum: undefined,\n  //               projRel: undefined,\n  //               statement,\n  //               label: `${dimension.numeric_value} ${preview.entity_label}`,\n  //               fkClass: dimension.fk_class,\n  //             }\n  //             return node\n  //           })\n  //         )\n  //     })\n  //   )\n  // }\n\n\n  // // @spyTag\n  // pipeItemLangString(statement: InfStatement): Observable<LangStringItem> {\n  //   return this.s.inf$.lang_string$.by_pk_entity$.key(statement.fk_object_info).pipe(\n  //     switchMap(\n  //       (langString) => {\n  //         if (!langString) return new BehaviorSubject(null)\n  //         return this.s.inf$.language$.by_pk_entity$.key(langString.fk_language)\n  //           .pipe(\n  //             map(language => {\n  //               if (!language) return null;\n  //               let label = '';\n  //               if (langString.string) label = langString.string\n  //               else if (langString.quill_doc && langString.quill_doc.ops && langString.quill_doc.ops.length) {\n  //                 label = langString.quill_doc.ops.map(op => op.insert).join('');\n  //               }\n  //               const node: LangStringItem = {\n  //                 ordNum: undefined,\n  //                 projRel: undefined,\n  //                 statement,\n  //                 label,\n  //                 fkClass: langString.fk_class,\n  //                 language,\n  //                 fkLanguage: langString.fk_language\n  //               }\n  //               return node\n  //             })\n  //           )\n  //       })\n  //   )\n  // }\n\n\n  // // @spyTag\n  // pipeItemEntityPreview(statement: InfStatement, isOutgoing: boolean): Observable<EntityPreviewItem> {\n  //   return this.p.streamEntityPreview((isOutgoing ? statement.fk_object_info : statement.fk_subject_info)).pipe(\n  //     // filter(preview => !preview.loading && !!preview && !!preview.entity_type),\n  //     map(preview => {\n  //       if (!preview) {\n  //         return null;\n  //       }\n  //       const node: EntityPreviewItem = {\n  //         ordNum: undefined,\n  //         projRel: undefined,\n  //         statement,\n  //         preview,\n  //         label: preview.entity_label || '',\n  //         fkClass: preview.fk_class\n  //       }\n  //       return node\n  //     }))\n  // }\n\n  // /**\n  //  * @param pk\n  //  */\n  // // @spyTag\n  // pipeItemTimePrimitive(statement: InfStatement, pkProject): Observable<TimePrimitiveItem> {\n  //   if (pkProject) {\n  //     return combineLatest(\n  //       this.s.inf$.time_primitive$.by_pk_entity$.key(statement.fk_object_info).pipe(filter(x => !!x)),\n  //       this.s.pro$.info_proj_rel$.by_fk_project__fk_entity$.key(pkProject + '_' + statement.pk_entity).pipe(filter(x => !!x))\n  //     ).pipe(\n  //       map(([infTimePrimitive, projRel]) => {\n  //         if (!infTimePrimitive) return null;\n  //         const timePrimitive = new TimePrimitive({\n  //           julianDay: infTimePrimitive.julian_day,\n  //           calendar: ((projRel.calendar || 'gregorian') as CalendarType),\n  //           duration: (infTimePrimitive.duration as Granularity)\n  //         })\n  //         const node: TimePrimitiveItem = {\n  //           ordNum: undefined,\n  //           projRel: undefined,\n  //           statement,\n  //           timePrimitive,\n  //           label: this.timePrimitivePipe.transform(timePrimitive),\n  //           fkClass: infTimePrimitive.fk_class\n  //         }\n  //         return node\n  //       }))\n  //   } else {\n  //     return this.infRepo.time_primitive$.by_pk_entity$.key(statement.fk_object_info).pipe(filter(x => !!x)).pipe(\n  //       map(infTimePrimitive => {\n  //         const timePrimitive = new TimePrimitive({\n  //           julianDay: infTimePrimitive.julian_day,\n  //           calendar: ((statement.community_favorite_calendar || 'gregorian') as CalendarType),\n  //           duration: (infTimePrimitive.duration as Granularity)\n  //         })\n  //         const node: TimePrimitiveItem = {\n  //           ordNum: undefined,\n  //           projRel: undefined,\n  //           statement,\n  //           timePrimitive,\n  //           label: this.timePrimitivePipe.transform(timePrimitive),\n  //           fkClass: infTimePrimitive.fk_class\n  //         }\n  //         return node\n  //       })\n  //     )\n  //   }\n  // }\n\n\n  // /*********************************************************************\n  // * Pipe alternatives (not in project)\n  // *********************************************************************/\n  // // @spyTag\n  // pipeAltListLength(l: Subfield, pkEntity: number): Observable<number> {\n  //   switch (l.listType) {\n  //     case 'appellation':\n  //     case 'entity-preview':\n  //     case 'language':\n  //     case 'place':\n  //     case 'langString':\n  //     case 'temporal-entity':\n  //     case 'time-span':\n  //       return this.pipeAltListStatements(l, pkEntity).pipe(map(items => items.length))\n\n  //     default:\n  //       console.warn('unsupported listType')\n  //       break;\n  //   }\n  // }\n\n  // // @spyTag\n  // pipeAltList(l: Subfield, pkEntity): Observable<ItemList> {\n  //   if (l.listType.appellation) return this.pipeAltListAppellation(l, pkEntity)\n  //   else if (l.listType.entityPreview) return this.pipeAltListEntityPreview(l, pkEntity)\n  //   else if (l.listType.language) return this.pipeAltListLanguage(l, pkEntity)\n  //   else if (l.listType.place) return this.pipeAltListPlace(l, pkEntity)\n  //   else if (l.listType.dimension) return this.pipeAltListDimension(l, pkEntity)\n  //   else if (l.listType.langString) return this.pipeAltListLangString(l, pkEntity)\n  //   else if (l.listType.temporalEntity) return this.pipeAltListEntityPreview(l, pkEntity)\n  //   else console.warn('unsupported listType')\n  // }\n\n  // // @spyTag\n  // pipeAltListStatements(listDefinition: Subfield, pkEntity: number): Observable<InfStatement[]> {\n  //   return (listDefinition.isOutgoing ?\n  //     this.b.pipeAlternativeIngoingStatements(listDefinition.property.pkProperty, pkEntity) :\n  //     this.b.pipeAlternativeIngoingStatements(listDefinition.property.pkProperty, pkEntity)\n  //   )\n  // }\n\n  // /**\n  // * Pipe the items in entity preview field\n  // */\n  // // @spyTag\n  // pipeAltListEntityPreview<T>(listDefinition: Subfield, pkEntity): Observable<EntityPreviewItem[]> {\n\n  //   return (listDefinition.isOutgoing ?\n  //     this.b.pipeAlternativeOutgoingStatements(listDefinition.property.pkProperty, pkEntity) :\n  //     this.b.pipeAlternativeIngoingStatements(listDefinition.property.pkProperty, pkEntity)\n  //   ).pipe(\n  //     switchMap((statements) => {\n  //       return combineLatest(statements.map((r, i) => this.pipeItemEntityPreview(r, listDefinition.isOutgoing)))\n  //         .pipe(\n  //           map(nodes => nodes\n  //             .filter(node => !!node)\n  //             .sort((a, b) => a.ordNum > b.ordNum ? 1 : -1)\n  //           ),\n  //           startWith([]))\n  //     }))\n\n  // }\n\n  // /**\n  //  * Pipe the alternative items in place list\n  //  */\n  // // @spyTag\n  // pipeAltListPlace<T>(listDefinition: Subfield, pkEntity): Observable<PlaceItem[]> {\n\n  //   if (listDefinition.isOutgoing) {\n  //     return this.b.pipeAlternativeOutgoingStatements(listDefinition.property.pkProperty, pkEntity).pipe(\n  //       switchMap((statements) => {\n  //         return combineLatest(statements.map((r, i) => this.pipeItemPlace(r)))\n  //           .pipe(\n  //             map(nodes => nodes.filter(node => !!node && node.fkClass === listDefinition.targetClass)),\n  //             startWith([]))\n  //       }))\n  //   }\n  // }\n\n\n  // /**\n  //  * Pipe the alternative items in dimension list\n  //  */\n  // // @spyTag\n  // pipeAltListDimension<T>(listDefinition: Subfield, pkEntity): Observable<DimensionItem[]> {\n\n  //   if (listDefinition.isOutgoing) {\n  //     return this.b.pipeAlternativeOutgoingStatements(listDefinition.property.pkProperty, pkEntity).pipe(\n  //       switchMap((statements) => {\n  //         return combineLatest(statements.map((r, i) => this.pipeItemDimension(r)))\n  //           .pipe(\n  //             map(nodes => nodes.filter(node => !!node && node.fkClass === listDefinition.targetClass)),\n  //             startWith([]))\n  //       }))\n  //   }\n  // }\n\n\n  // /**\n  //  * Pipe the alternative items in langString list\n  //  */\n  // // @spyTag\n  // pipeAltListLangString<T>(listDefinition: Subfield, pkEntity): Observable<LangStringItem[]> {\n\n  //   if (listDefinition.isOutgoing) {\n  //     return this.b.pipeAlternativeOutgoingStatements(listDefinition.property.pkProperty, pkEntity).pipe(\n  //       switchMap((statements) => {\n  //         return combineLatest(statements.map((r, i) => this.pipeItemLangString(r)))\n  //           .pipe(\n  //             map(nodes => nodes.filter(node => !!node && node.fkClass === listDefinition.targetClass)),\n  //             startWith([]))\n  //       }))\n  //   }\n  // }\n\n  // /**\n  //  * Pipe the alternative items in appellation field\n  //  */\n  // // @spyTag\n  // pipeAltListAppellation<T>(listDefinition: Subfield, pkEntity): Observable<AppellationItem[]> {\n\n  //   if (listDefinition.isOutgoing) {\n  //     return this.b.pipeAlternativeOutgoingStatements(listDefinition.property.pkProperty, pkEntity).pipe(\n  //       switchMap((statements) => {\n  //         return combineLatest(statements.map((r, i) => this.pipeItemAppellation(r)))\n  //           .pipe(\n  //             map(nodes => nodes.filter(node => !!node && node.fkClass === listDefinition.targetClass)),\n  //             startWith([]))\n  //       }))\n  //   }\n  // }\n\n  // /**\n  //  * Pipe the alternative items in language field\n  //  */\n  // // @spyTag\n  // pipeAltListLanguage<T>(listDefinition: Subfield, pkEntity): Observable<LanguageItem[]> {\n\n  //   if (listDefinition.isOutgoing) {\n  //     return this.b.pipeAlternativeOutgoingStatements(listDefinition.property.pkProperty, pkEntity).pipe(\n  //       switchMap((statements) => {\n  //         return combineLatest(statements.map((r, i) => this.pipeItemLanguage(r)))\n  //           .pipe(\n  //             map(nodes => nodes.filter(node => !!node && node.fkClass === listDefinition.targetClass)),\n  //             startWith([]))\n  //       }))\n  //   }\n  // }\n\n  // /*********************************************************************\n  //  * Pipe repo views (community favorites, where restricted by quantifiers)\n  //  *********************************************************************/\n\n  // /**\n  //  * Pipe repository temporal entity item in the way it is defined by the repository\n  //  */\n\n\n  // /**\n  //  * Pipe appellation list in the way it is defined by the repository\n  //  */\n  // // @spyTag\n  // pipeRepoListAppellation<T>(listDefinition: Subfield, pkEntity): Observable<AppellationItem[]> {\n\n  //   if (listDefinition.isOutgoing) {\n  //     return this.b.pipeRepoOutgoingStatementsByProperty(listDefinition.property.pkProperty, pkEntity).pipe(\n  //       switchMap((statements) => {\n  //         return combineLatest(statements.map((r, i) => this.pipeItemAppellation(r)))\n  //           .pipe(\n  //             map(nodes => nodes.filter(node => !!node && node.fkClass === listDefinition.targetClass)),\n  //             startWith([]))\n  //       }))\n  //   }\n  // }\n\n  // /**\n  // * Pipe language list in the way it is defined by the repository\n  // */\n  // // @spyTag\n  // pipeRepoListLanguage<T>(listDefinition: Subfield, pkEntity): Observable<LanguageItem[]> {\n\n  //   if (listDefinition.isOutgoing) {\n  //     return this.b.pipeRepoOutgoingStatementsByProperty(listDefinition.property.pkProperty, pkEntity).pipe(\n  //       switchMap((statements) => {\n  //         return combineLatest(statements.map((r, i) => this.pipeItemLanguage(r)))\n  //           .pipe(\n  //             map(nodes => nodes.filter(node => !!node && node.fkClass === listDefinition.targetClass)),\n  //             startWith([]))\n  //       }))\n  //   }\n  // }\n\n  // /**\n  //  * Pipe place list in the way it is defined by the repository\n  //  */\n  // // @spyTag\n  // pipeRepoListPlace<T>(listDefinition: Subfield, pkEntity): Observable<PlaceItem[]> {\n\n  //   if (listDefinition.isOutgoing) {\n  //     return this.b.pipeRepoOutgoingStatementsByProperty(listDefinition.property.pkProperty, pkEntity).pipe(\n  //       switchMap((statements) => {\n  //         return combineLatest(statements.map((r, i) => this.pipeItemPlace(r)))\n  //           .pipe(\n  //             map(nodes => nodes.filter(node => !!node && node.fkClass === listDefinition.targetClass)),\n  //             startWith([]))\n  //       }))\n  //   }\n  // }\n\n  // /**\n  // * Pipe place list in the way it is defined by the repository\n  // */\n  // // @spyTag\n  // pipeRepoListDimension<T>(listDefinition: Subfield, pkEntity): Observable<DimensionItem[]> {\n\n  //   if (listDefinition.isOutgoing) {\n  //     return this.b.pipeRepoOutgoingStatementsByProperty(listDefinition.property.pkProperty, pkEntity).pipe(\n  //       switchMap((statements) => {\n  //         return combineLatest(statements.map((r, i) => this.pipeItemDimension(r)))\n  //           .pipe(\n  //             map(nodes => nodes.filter(node => !!node && node.fkClass === listDefinition.targetClass)),\n  //             startWith([]))\n  //       }))\n  //   }\n  // }\n  // /**\n  // * Pipe the items in entity preview field, connected by community favorite statements\n  // */\n  // // @spyTag\n  // pipeRepoListEntityPreview<T>(listDefinition: Subfield, pkEntity): Observable<EntityPreviewItem[]> {\n\n  //   return (listDefinition.isOutgoing ?\n  //     this.b.pipeRepoOutgoingStatementsByProperty(listDefinition.property.pkProperty, pkEntity) :\n  //     this.b.pipeRepoIngoingStatementsByProperty(listDefinition.property.pkProperty, pkEntity)\n  //   ).pipe(\n  //     switchMap((statements) => {\n  //       return combineLatest(statements.map((r, i) => this.pipeItemEntityPreview(r, listDefinition.isOutgoing)))\n  //         .pipe(\n  //           map(nodes => nodes.filter(node => !!node && node.fkClass === listDefinition.targetClass)\n  //             // .sort((a, b) => a.ordNum > b.ordNum ? 1 : -1)\n  //           ))\n  //     }),\n  //     startWith([])\n  //   )\n\n  // }\n\n\n  // /**\n  //  * Pipe repo time span item\n  //  */\n  // // @spyTag\n  // pipeRepoItemTimeSpan(pkEntity): Observable<TimeSpanItem> {\n  //   return this.p.pkProject$.pipe(\n  //     switchMap(pkProject => {\n  //       return this.c.pipeBasicAndSpecificFields(\n  //         DfhConfig.ClASS_PK_TIME_SPAN\n  //       ).pipe(\n  //         switchMap(fieldDefinitions => {\n\n  //           return combineLatest(fieldDefinitions.map(fieldDef =>\n  //             this.b.pipeRepoOutgoingStatementsByProperty(fieldDef.property.pkProperty, pkEntity)\n  //               .pipe(\n  //                 switchMapOr([], statements => combineLatest(\n  //                   statements.map(statement =>\n  //                     this.infRepo.time_primitive$.by_pk_entity$.key(statement.fk_object_info)\n  //                       .pipe(map((infTimePrimitive) => {\n  //                         const timePrimitive = new TimePrimitive({\n  //                           julianDay: infTimePrimitive.julian_day,\n  //                           calendar: ((statement.community_favorite_calendar || 'gregorian') as CalendarType),\n  //                           duration: (infTimePrimitive.duration as Granularity)\n  //                         })\n  //                         const item: TimePrimitiveItem = {\n  //                           statement,\n  //                           ordNum: undefined,\n  //                           projRel: undefined,\n  //                           timePrimitive,\n  //                           label: this.timePrimitivePipe.transform(timePrimitive),\n  //                           fkClass: infTimePrimitive.fk_class\n  //                         }\n  //                         return item;\n  //                       }))\n  //                   )\n  //                 )),\n  //                 map(items => {\n  //                   const res: TimeSpanProperty = {\n  //                     listDefinition: fieldDef.listDefinitions[0], items\n  //                   }\n  //                   return res\n  //                 }),\n  //                 startWith({ listDefinition: fieldDef.listDefinitions[0], items: [] } as TimeSpanProperty)\n  //               )\n  //           )).pipe(\n  //             map((properties) => {\n  //               const timespanitem: TimeSpanItem = {\n  //                 label: '',\n  //                 properties: properties.filter(props => props.items.length > 0)\n  //               }\n  //               return timespanitem\n  //             })\n  //           )\n  //         })\n  //       )\n  //     })\n\n  //   )\n  // }\n\n\n  /**\n   * Pipes the label of given entity\n   * This will use entity previews for getting strings of related temporal entities\n   * So this may take a little while\n   */\n  // @spyTag\n  pipeLabelOfEntity(fkEntity: number): Observable<string> {\n    return this.p.streamEntityPreview(fkEntity).pipe(map(p => p.entity_label))\n    // return this.b.pipeClassOfEntity(fkEntity).pipe(\n\n    //   // get the definition of the first field\n    //   switchMap(fkClass => this.c.pipeBasicAndSpecificFields(fkClass).pipe(\n    //     // get the first item of that field\n    //     switchMap(fields => this.pipeSubfieldPage(field[0],).pipe(\n    //       map(props => {\n    //         props = props.filter(prop => prop.items.length > 0)\n    //         if (props.length && props[0].items.length) {\n    //           return props[0].items[0].label\n    //         }\n    //         return ''\n    //       })\n    //     )))\n    //   ))\n  }\n\n\n  /**\n   * Pipes the class label of given entity\n   */\n  // @spyTag\n  pipeClassLabelOfEntity(fkEntity: number): Observable<string> {\n    return this.b.pipeClassOfEntity(fkEntity).pipe(\n      switchMap(pkClass => this.c.pipeClassLabel(pkClass))\n    )\n  }\n\n  /**\n   * Pipes the pk_entity of the type of an entity\n   */\n  // @spyTag\n  pipeTypeOfEntity(pkEntity: number, hasTypeProperty: number, isOutgoing: boolean): Observable<InfStatement> {\n    if (isOutgoing) {\n      return this.s.inf$.statement$.by_subject_and_property_indexed$({ fk_property: hasTypeProperty, fk_subject_info: pkEntity }).pipe(map(items => {\n        if (!items || Object.keys(items).length < 1) return undefined;\n        else return values(items)[0]\n      })\n      )\n    }\n    else {\n      return this.s.inf$.statement$.by_object_and_property_indexed$({ fk_property: hasTypeProperty, fk_object_info: pkEntity }).pipe(\n        map(items => {\n          if (!items || Object.keys(items).length < 1) return undefined;\n          else return values(items)[0]\n        })\n      )\n    }\n  }\n\n  @spyTag\n  @cache({ refCount: false })\n  pipeClassesAndTypes(enabledIn: 'entities' | 'sources') {\n    return this.c.pipeTypeAndTypedClasses(enabledIn).pipe(\n      switchMap(items => this.pipeClassAndTypeNodes(items)),\n    )\n  }\n\n  @spyTag\n  @cache({ refCount: false })\n  pipeClassesAndTypesOfClasses(classes: number[]) {\n    return this.c.pipeTypeAndTypedClassesOfTypedClasses(classes).pipe(\n      switchMap(items => this.pipeClassAndTypeNodes(items)),\n    )\n  }\n\n  @spyTag\n  @cache({ refCount: false })\n  pipeClassAndTypeNodes(typeAndTypedClasses: { typedClass: number; typeClass: number; }[]): Observable<ClassAndTypeNode[]> {\n    return combineLatestOrEmpty(\n      typeAndTypedClasses.map(item => this.c.pipeClassLabel(item.typedClass).pipe(\n        map(label => ({\n          label,\n          data: { pkClass: item.typedClass, pkType: null }\n        } as ClassAndTypeNode)),\n        switchMap(node => iif(\n          () => !!item.typeClass,\n          this.b.pipePersistentItemPksByClass(item.typeClass).pipe(\n            switchMap(typePks => combineLatestOrEmpty(\n              typePks.map(pkType => this.p.streamEntityPreview(pkType).pipe(\n                map(preview => ({\n                  label: preview.entity_label,\n                  data: { pkClass: item.typedClass, pkType }\n                } as ClassAndTypeNode))\n              ))\n            ).pipe(\n              sortAbc(n => n.label),\n            )),\n            map(children => {\n              node.children = children\n              return node\n            })\n          ),\n          of({ ...node, children: [] } as ClassAndTypeNode)\n        )\n        )\n      ))\n    ).pipe(\n      sortAbc((node) => node.label),\n    )\n  }\n\n  /**\n   * returns array of pk_class of all classes and typed classes.\n   * @param classesAndTypes a object containing {classes: [], types[]}\n   */\n  pipeClassesFromClassesAndTypes(classesAndTypes: ClassAndTypeSelectModel): Observable<number[]> {\n    const typedClasses$ = (!classesAndTypes || !classesAndTypes.types || !classesAndTypes.types.length) ?\n      of([] as number[]) :\n      this.b.pipeClassesOfPersistentItems(classesAndTypes.types)\n        .pipe(\n          filter((pks) => !!pks),\n          switchMap(typeClasses => this.c.pipeTypedClassesOfTypeClasses(typeClasses))\n        )\n    return typedClasses$.pipe(\n      map(typedClasses => uniq([...typedClasses, ...((classesAndTypes || { classes: [] }).classes || [])]))\n    );\n  }\n\n  pipePropertyOptionsFromClassesAndTypes(classesAndTypes: ClassAndTypeSelectModel): Observable<PropertyOption[]> {\n    return this.pipeClassesFromClassesAndTypes(classesAndTypes).pipe(\n      switchMap(classes => this.pipePropertyOptionsFormClasses(classes))\n    )\n  }\n\n  @cache({ refCount: false })\n  pipePropertyOptionsFormClasses(classes: number[]): Observable<PropertyOption[]> {\n    return combineLatestOrEmpty(classes.map(pkClass => this.s.dfh$.class$.by_pk_class$.key(pkClass).pipe(\n      map(c => c.basic_type === 9),\n      switchMap(isTeEn => this.c.pipeSpecificAndBasicFields(pkClass)\n        .pipe(\n          map(classFields => classFields\n            .filter(f => !!f.property.pkProperty)\n            .map(f => ({\n              isOutgoing: f.isOutgoing,\n              fkPropertyDomain: f.isOutgoing ? f.sourceClass : null,\n              fkPropertyRange: f.isOutgoing ? null : f.sourceClass,\n              pkProperty: f.property.pkProperty\n            }))),\n          switchMap(items => {\n            if (isTeEn) {\n              // add time properties (at some time within, ...)\n              DfhConfig.PROPERTY_PKS_WHERE_TIME_PRIMITIVE_IS_RANGE.map(pkProperty => {\n                items.push({\n                  pkProperty,\n                  fkPropertyDomain: pkClass,\n                  fkPropertyRange: DfhConfig.CLASS_PK_TIME_PRIMITIVE,\n                  isOutgoing: true\n                })\n              })\n            }\n\n            return combineLatestOrEmpty(items.map(item => this.c.pipeFieldLabel(\n              item.pkProperty,\n              item.fkPropertyDomain,\n              item.fkPropertyRange,\n            ).pipe(map(label => {\n              const isOutgoing = item.isOutgoing;\n              const o: PropertyOption = {\n                isOutgoing,\n                label,\n                pk: item.pkProperty,\n                propertyFieldKey: propertyOptionFieldKey(item.pkProperty, isOutgoing)\n              };\n              return o;\n            }))));\n          })))\n    )\n\n\n    )).pipe(map(y => flatten<PropertyOption>(y)));\n  }\n\n  @cache({ refCount: false })\n  pipePkClassesFromPropertySelectModel(model: PropertySelectModel): Observable<number[]> {\n    return combineLatestOrEmpty(\n      [\n        this.c.pipeTargetClassesOfProperties(model.outgoingProperties, true),\n        this.c.pipeTargetClassesOfProperties(model.ingoingProperties, false),\n      ]\n    ).pipe(\n      map(([out, ing]) => uniq([...out, ...ing]))\n    )\n  }\n\n  getPkClassesFromPropertySelectModel$(model$: Observable<PropertySelectModel>): Observable<number[]> {\n    return model$.pipe(\n      switchMap(model => combineLatestOrEmpty(\n        [\n          this.c.pipeTargetClassesOfProperties(model.outgoingProperties, true),\n          this.c.pipeTargetClassesOfProperties(model.ingoingProperties, false),\n        ]\n      ).pipe(\n        map(([out, ing]) => uniq([...out, ...ing]))\n      ))\n    )\n  }\n\n\n\n  getPropertyOptions$(classTypes$: Observable<ClassAndTypeSelectModel>): Observable<PropertyOption[]> {\n    return classTypes$.pipe<ClassAndTypeSelectModel, PropertyOption[]>(\n      // make sure only it passes only if data of the arrayClasses are changed (not children)\n      distinctUntilChanged<ClassAndTypeSelectModel>((a, b) => {\n        return equals(a, b);\n      }),\n      switchMap((x) => !x ? empty() : this.b.pipeClassesOfPersistentItems(x.types)\n        .pipe(\n          filter((pks) => !!pks),\n          switchMap(typeClasses => this.c.pipeTypedClassesOfTypeClasses(typeClasses).pipe(\n            switchMap(typedClasses => {\n              const classes = uniq([...typedClasses, ...(x.classes || [])]);\n              return this.pipePropertyOptionsFormClasses(classes)\n            }))\n          )\n        )\n      )\n    );\n  }\n\n}\n\nexport function propertyOptionFieldKey(fkProperty: number, isOutgoing: boolean): string {\n  return '_' + fkProperty + '_' + (isOutgoing ? 'outgoing' : 'ingoing');\n}\n\n"]}