/**
 * @fileoverview added by tsickle
 * Generated from: lib/queries/models/Field.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A Field contains all information to create the different GUI's to display and edit
 * statements of an entity.
 *
 * The Fields of an entity depend on the properties of its class. Each Field contains or represents
 * the properties that have the given class as as domain or range and share the same pk_property.
 *
 * Explanation:
 * The identity (uniqueness) of a property is defined by its domain, pk_propery and its range,
 * It is possible that one class has two outgoing properties with the same pk_property but different
 * ranges. The Field then contains both of them.
 *
 * The Subfields (listDefinitions) are then representing only one property with a uniqur domain, pk_propery and range
 * All Subfields of a Field share all properties defined in FieldBase.
 *
 * In practice the Field a wrapper for SubFileds containing all information that is equal amongst all Subfields.
 * @record
 */
export function Field() { }
if (false) {
    /** @type {?} */
    Field.prototype.placeOfDisplay;
    /** @type {?|undefined} */
    Field.prototype.fieldConfig;
    /** @type {?} */
    Field.prototype.targetClasses;
    /** @type {?} */
    Field.prototype.allSubfieldsRemovedFromAllProfiles;
    /** @type {?} */
    Field.prototype.isSpecialField;
    /** @type {?} */
    Field.prototype.targets;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmllbGQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Aa2xlaW9sYWIvbGliLXF1ZXJpZXMvIiwic291cmNlcyI6WyJsaWIvcXVlcmllcy9tb2RlbHMvRmllbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkEsMkJBZUM7OztJQWJDLCtCQUFvQzs7SUFFcEMsNEJBQWtDOztJQUVsQyw4QkFBd0I7O0lBSXhCLG1EQUE0Qzs7SUFFNUMsK0JBQWlDOztJQUVqQyx3QkFBZ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm9DbGFzc0ZpZWxkQ29uZmlnIH0gZnJvbSAnQGtsZWlvbGFiL2xpYi1zZGstbGI0JztcbmltcG9ydCB7IEZpZWxkQmFzZSB9IGZyb20gJy4vRmllbGRCYXNlJztcbmltcG9ydCB7IEZpZWxkUGxhY2VPZkRpc3BsYXkgfSBmcm9tICcuL0ZpZWxkUG9zaXRpb24nO1xuaW1wb3J0IHsgRmllbGRUYXJnZXRDbGFzcyB9IGZyb20gJy4vRmllbGRUYXJnZXRDbGFzcyc7XG5pbXBvcnQgeyBTcGVjaWFsRmllbGRUeXBlIH0gZnJvbSAnLi9TcGVjaWFsRmllbGRUeXBlJztcbi8qKlxuICogQSBGaWVsZCBjb250YWlucyBhbGwgaW5mb3JtYXRpb24gdG8gY3JlYXRlIHRoZSBkaWZmZXJlbnQgR1VJJ3MgdG8gZGlzcGxheSBhbmQgZWRpdFxuICogc3RhdGVtZW50cyBvZiBhbiBlbnRpdHkuXG4gKlxuICogVGhlIEZpZWxkcyBvZiBhbiBlbnRpdHkgZGVwZW5kIG9uIHRoZSBwcm9wZXJ0aWVzIG9mIGl0cyBjbGFzcy4gRWFjaCBGaWVsZCBjb250YWlucyBvciByZXByZXNlbnRzXG4gKiB0aGUgcHJvcGVydGllcyB0aGF0IGhhdmUgdGhlIGdpdmVuIGNsYXNzIGFzIGFzIGRvbWFpbiBvciByYW5nZSBhbmQgc2hhcmUgdGhlIHNhbWUgcGtfcHJvcGVydHkuXG4gKlxuICogRXhwbGFuYXRpb246XG4gKiBUaGUgaWRlbnRpdHkgKHVuaXF1ZW5lc3MpIG9mIGEgcHJvcGVydHkgaXMgZGVmaW5lZCBieSBpdHMgZG9tYWluLCBwa19wcm9wZXJ5IGFuZCBpdHMgcmFuZ2UsXG4gKiBJdCBpcyBwb3NzaWJsZSB0aGF0IG9uZSBjbGFzcyBoYXMgdHdvIG91dGdvaW5nIHByb3BlcnRpZXMgd2l0aCB0aGUgc2FtZSBwa19wcm9wZXJ0eSBidXQgZGlmZmVyZW50XG4gKiByYW5nZXMuIFRoZSBGaWVsZCB0aGVuIGNvbnRhaW5zIGJvdGggb2YgdGhlbS5cbiAqXG4gKiBUaGUgU3ViZmllbGRzIChsaXN0RGVmaW5pdGlvbnMpIGFyZSB0aGVuIHJlcHJlc2VudGluZyBvbmx5IG9uZSBwcm9wZXJ0eSB3aXRoIGEgdW5pcXVyIGRvbWFpbiwgcGtfcHJvcGVyeSBhbmQgcmFuZ2VcbiAqIEFsbCBTdWJmaWVsZHMgb2YgYSBGaWVsZCBzaGFyZSBhbGwgcHJvcGVydGllcyBkZWZpbmVkIGluIEZpZWxkQmFzZS5cbiAqXG4gKiBJbiBwcmFjdGljZSB0aGUgRmllbGQgYSB3cmFwcGVyIGZvciBTdWJGaWxlZHMgY29udGFpbmluZyBhbGwgaW5mb3JtYXRpb24gdGhhdCBpcyBlcXVhbCBhbW9uZ3N0IGFsbCBTdWJmaWVsZHMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRmllbGQgZXh0ZW5kcyBGaWVsZEJhc2Uge1xuICAvLyBkZWZpbmVzIHdoZXJlIHRoZSBmaWVsZCBpcyBiZWluZyBkaXNwbGF5ZWRcbiAgcGxhY2VPZkRpc3BsYXk6IEZpZWxkUGxhY2VPZkRpc3BsYXk7XG4gIC8vIGNvbmZpZ3VyYXRpb24gb2YgdGhlIGZpZWxkIChjb250YWluaW5nIHBvc2l0aW9uIGluIGxpc3QpLCBnaXZlbiBieSB0aGUgcHJvamVjdCBvciB0aGUgZGVmYXVsdC1jb25maWd1cmF0aW9uLXByb2plY3RcbiAgZmllbGRDb25maWc/OiBQcm9DbGFzc0ZpZWxkQ29uZmlnO1xuICAvLyB0aGUgdGFyZ2V0IGNsYXNzZXMgb2YgdGhlIGZpZWxkIChpZiBpcyBvdXRnb2luZyByYW5nZSBlbHNlIGRvbWFpbilcbiAgdGFyZ2V0Q2xhc3NlczogbnVtYmVyW107XG4gIC8vIC8vIHN1YmZpZWxkcyAodGhleSBzaGFyZSB0aGUgc291cmNlIGNsYXNzIGFuZCBwcm9wZXJ0eSBidXQgaGF2ZSBkaWZmZXJlbnQgdGFyZ2V0IGNsYXNzIGFuZCB0aHVzIGxpc3QgdHlwZSlcbiAgLy8gbGlzdERlZmluaXRpb25zOiBTdWJmaWVsZFtdO1xuICAvLyB0cnVlIGlmIGFsbCBzdWJmaWVsZHMgYXJlIHJlbW92ZWQgZnJvbSBhbGwgcHJvZmlsZXMgYWN0aXZhdGVkIGJ5IHRoZSBwcm9qZWN0XG4gIGFsbFN1YmZpZWxkc1JlbW92ZWRGcm9tQWxsUHJvZmlsZXM6IGJvb2xlYW47XG4gIC8vIHNwZWNpYWwgZmllbGRzIGFyZSBub3QgdXNpbmcgdGhlIGRlZmF1bHQgc3ViZmllbGQgYXBwcm9hY2ggdG8gc2hvdy9lZGl0IGRhdGFcbiAgaXNTcGVjaWFsRmllbGQ6IFNwZWNpYWxGaWVsZFR5cGU7XG4gIC8vIGluZGV4IG9mIG1ldGFkYXRhIGFib3V0IHRoZSB0YXJnZXQgY2xhc3NlcyBvZiB0aGF0IGZpZWxkXG4gIHRhcmdldHM6IHsgW2ZrQ2xhc3M6IG51bWJlcl06IEZpZWxkVGFyZ2V0Q2xhc3MgfVxufVxuIl19