/**
 * geovistory
 * Geovistory â€“ Platform for Digital History
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { InfTextProperty } from '../model/models';
import { Configuration } from '../configuration';
export declare class InfTextPropertyService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * Find all InfTextProperties that are not yet added to the given project.
     * @param pkProject Pk of the project
     * @param pkEntity fk of the concerned entity
     * @param pkClassField fk of the class field
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    infTextPropertyFindAlternativeTextProperties(pkProject: number, pkEntity: number, pkClassField: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<Array<InfTextProperty>>;
    infTextPropertyFindAlternativeTextProperties(pkProject: number, pkEntity: number, pkClassField: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<Array<InfTextProperty>>>;
    infTextPropertyFindAlternativeTextProperties(pkProject: number, pkEntity: number, pkClassField: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<Array<InfTextProperty>>>;
    /**
     * Find or create information text properties.
     * @param pkProject Id of the project
     * @param infTextProperty data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    infTextPropertyFindOrCreateInfTextProperties(pkProject: number, infTextProperty: Array<InfTextProperty>, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<Array<InfTextProperty>>;
    infTextPropertyFindOrCreateInfTextProperties(pkProject: number, infTextProperty: Array<InfTextProperty>, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<Array<InfTextProperty>>>;
    infTextPropertyFindOrCreateInfTextProperties(pkProject: number, infTextProperty: Array<InfTextProperty>, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<Array<InfTextProperty>>>;
    /**
     * Find or create a InfTextProperty and update the project relation if needed.
     * @param pkProject Pk of the project
     * @param infTextProperty data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    infTextPropertyFindOrCreateInfTextProperty(pkProject: number, infTextProperty: InfTextProperty, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<InfTextProperty>;
    infTextPropertyFindOrCreateInfTextProperty(pkProject: number, infTextProperty: InfTextProperty, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<InfTextProperty>>;
    infTextPropertyFindOrCreateInfTextProperty(pkProject: number, infTextProperty: InfTextProperty, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<InfTextProperty>>;
}
