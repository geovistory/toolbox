/**
 * geovistory
 * Geovistory – Platform for Digital History
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { DfhProfile } from '../model/models';
import { Configuration } from '../configuration';
export declare class DfhProfileService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * Deavtivates an OntoMe profile for a Geovistory project.
     * @param pkProject Geovistory project for which the profile should be deactivated
     * @param pkProfile OntoMe profile to deactivate for the given Geovistory project
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    dfhProfileDeactivateProfileForProject(pkProject: number, pkProfile: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<Array<object>>;
    dfhProfileDeactivateProfileForProject(pkProject: number, pkProfile: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<Array<object>>>;
    dfhProfileDeactivateProfileForProject(pkProject: number, pkProfile: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<Array<object>>>;
    /**
     * Creates an activation report for the given OntoMe profile and the given Geovistory project.
     * @param pkProject Geovistory project for which the activation report should be created
     * @param pkProfile OntoMe profile for which the activation report should be created
     * @param requestedLanguage Language ISO Code for the preferred language of labels and descriptions to be loaded. Default language is \&#39;en\&#39;.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    dfhProfileGetActivationReport(pkProject: number, pkProfile: number, requestedLanguage?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<Array<object>>;
    dfhProfileGetActivationReport(pkProject: number, pkProfile: number, requestedLanguage?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<Array<object>>>;
    dfhProfileGetActivationReport(pkProject: number, pkProfile: number, requestedLanguage?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<Array<object>>>;
    /**
     * Creates an deactivation report for the given OntoMe profile and the given Geovistory project.
     * @param pkProject Geovistory project for which the deactivation report should be created
     * @param pkProfile OntoMe profile for which the deactivation report should be created
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    dfhProfileGetDeactivationReport(pkProject: number, pkProfile: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<Array<object>>;
    dfhProfileGetDeactivationReport(pkProject: number, pkProfile: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<Array<object>>>;
    dfhProfileGetDeactivationReport(pkProject: number, pkProfile: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<Array<object>>>;
    /**
     * Get all profiles that are used by the given project.
     * @param pkProject Project pk
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    dfhProfileOfProject(pkProject?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<Array<DfhProfile>>;
    dfhProfileOfProject(pkProject?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<Array<DfhProfile>>>;
    dfhProfileOfProject(pkProject?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<Array<DfhProfile>>>;
    /**
     * Pulls profile data including classes and properties from OntoMe and adds profile to project.
     * @param pkProject Geovistory project to which the OntoMe profile should be added
     * @param pkProfile OntoMe profile that should be added
     * @param requestedLanguage Language ISO Code for the preferred language of labels and descriptions to be loaded. Default language is \&#39;en\&#39;.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    dfhProfileUpdateAndAddToProject(pkProject: number, pkProfile: number, requestedLanguage?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<Array<object>>;
    dfhProfileUpdateAndAddToProject(pkProject: number, pkProfile: number, requestedLanguage?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<Array<object>>>;
    dfhProfileUpdateAndAddToProject(pkProject: number, pkProfile: number, requestedLanguage?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<Array<object>>>;
    /**
     * Pulls profile data including classes and properties from OntoMe and updates profile data in geovistory.
     * @param pkProfile OntoMe profile that should be added
     * @param requestedLanguage Language ISO Code for the preferred language of labels and descriptions to be loaded. Default language is \&#39;en\&#39;.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    dfhProfileUpdateFromOntoMe(pkProfile: number, requestedLanguage?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<Array<object>>;
    dfhProfileUpdateFromOntoMe(pkProfile: number, requestedLanguage?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<Array<object>>>;
    dfhProfileUpdateFromOntoMe(pkProfile: number, requestedLanguage?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<Array<object>>>;
}
