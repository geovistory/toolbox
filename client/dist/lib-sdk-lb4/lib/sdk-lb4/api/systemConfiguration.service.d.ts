/**
 * geovistory
 * Geovistory â€“ Platform for Digital History
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { SysConfigValue } from '../model/models';
import { Configuration } from '../configuration';
export declare class SystemConfigurationService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    sysConfigControllerGetSystemConfig(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<SysConfigValue>;
    sysConfigControllerGetSystemConfig(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<SysConfigValue>>;
    sysConfigControllerGetSystemConfig(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<SysConfigValue>>;
    /**
     * @param sysConfigValue Sets or updates the system configuration. This affects the basic behavior of geovistory (i.e. for all projects).       The provided (json) value is validated against the json schema. If invalid, the request is rejected and the current configuration stays unchanged.       Hint: You can download the current cofiguration using \&quot;/get-system-config\&quot;, modify it and upload the modified version here.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    sysConfigControllerSetSystemConfig(sysConfigValue: SysConfigValue, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<any>;
    sysConfigControllerSetSystemConfig(sysConfigValue: SysConfigValue, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpResponse<any>>;
    sysConfigControllerSetSystemConfig(sysConfigValue: SysConfigValue, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpEvent<any>>;
    /**
     * @param sysConfigValue Validates the configuration without persisting it.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    sysConfigControllerValidateSystemConfig(sysConfigValue: SysConfigValue, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<any>;
    sysConfigControllerValidateSystemConfig(sysConfigValue: SysConfigValue, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpResponse<any>>;
    sysConfigControllerValidateSystemConfig(sysConfigValue: SysConfigValue, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpEvent<any>>;
}
