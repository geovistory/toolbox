/**
 * geovistory
 * Geovistory – Platform for Digital History
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { InfPersistentItem } from '../model/models';
import { Configuration } from '../configuration';
export declare class InfPersistentItemService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * Find or create many information persistent items.
     * @param pkProject Pk of the project
     * @param infPersistentItem data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    infPersistentItemFindOrCreateInfPersistentItems(pkProject: number, infPersistentItem: Array<InfPersistentItem>, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<Array<InfPersistentItem>>;
    infPersistentItemFindOrCreateInfPersistentItems(pkProject: number, infPersistentItem: Array<InfPersistentItem>, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<Array<InfPersistentItem>>>;
    infPersistentItemFindOrCreateInfPersistentItems(pkProject: number, infPersistentItem: Array<InfPersistentItem>, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<Array<InfPersistentItem>>>;
    /**
     * Get only miminal properties of persistent item.
     * @param pkProject Pk of the project.
     * @param pkEntity Pk of the entity.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    infPersistentItemOwnProperties(pkProject: number, pkEntity: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<object>;
    infPersistentItemOwnProperties(pkProject: number, pkEntity: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<object>>;
    infPersistentItemOwnProperties(pkProject: number, pkEntity: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<object>>;
    /**
     * Find one type by pk_entity with appellations and text properties.
     * @param pkProject Primary Key of Project
     * @param pkEntity Primary Key of the type. Provide this if you want to query one specific type.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    infPersistentItemTypeNested(pkProject: number, pkEntity: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<InfPersistentItem>;
    infPersistentItemTypeNested(pkProject: number, pkEntity: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<InfPersistentItem>>;
    infPersistentItemTypeNested(pkProject: number, pkEntity: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<InfPersistentItem>>;
    /**
     * Find types of typed class and project. E.g. get the types for the class \&#39;histC8 Geographical Place\&#39; (pk_typed_class&#x3D;363) used in project (pk_project&#x3D;123)
     * @param pkProject Primary Key of Project
     * @param pkTypedClasses Primary Keyes of Typed Classes (e.g. pk of Geographical Place to get Geographical Place Types)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    infPersistentItemTypesOfClassesAndProject(pkProject: number, pkTypedClasses: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<InfPersistentItem>;
    infPersistentItemTypesOfClassesAndProject(pkProject: number, pkTypedClasses: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<InfPersistentItem>>;
    infPersistentItemTypesOfClassesAndProject(pkProject: number, pkTypedClasses: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<InfPersistentItem>>;
    /**
     * Get a minimal nested object of all types in the project.
     * @param pkProject Pk of the project.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    infPersistentItemTypesOfProject(pkProject: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<InfPersistentItem>;
    infPersistentItemTypesOfProject(pkProject: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<InfPersistentItem>>;
    infPersistentItemTypesOfProject(pkProject: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<InfPersistentItem>>;
}
