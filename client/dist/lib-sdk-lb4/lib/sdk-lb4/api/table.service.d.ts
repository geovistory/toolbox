/**
 * geovistory
 * Geovistory â€“ Platform for Digital History
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { GetTablePageOptions } from '../model/models';
import { GvSchemaObject } from '../model/models';
import { TablePageResponse } from '../model/models';
import { Configuration } from '../configuration';
export declare class TableService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * Get the columns of a table (digital) with column names and column mappings.
     * @param pkProject
     * @param pkDigital
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    tableControllerGetTableColumns(pkProject: number, pkDigital: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<GvSchemaObject>;
    tableControllerGetTableColumns(pkProject: number, pkDigital: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<GvSchemaObject>>;
    tableControllerGetTableColumns(pkProject: number, pkDigital: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<GvSchemaObject>>;
    /**
     * Get rows (with cells) of a table according to the specified columns, limit, offset and sorting.
     * @param pkProject
     * @param pkEntity
     * @param getTablePageOptions
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    tableControllerGetTablePage(pkProject: number, pkEntity: number, getTablePageOptions?: GetTablePageOptions, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<TablePageResponse>;
    tableControllerGetTablePage(pkProject: number, pkEntity: number, getTablePageOptions?: GetTablePageOptions, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<TablePageResponse>>;
    tableControllerGetTablePage(pkProject: number, pkEntity: number, getTablePageOptions?: GetTablePageOptions, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<TablePageResponse>>;
}
