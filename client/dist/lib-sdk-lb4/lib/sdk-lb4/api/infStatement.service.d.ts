/**
 * geovistory
 * Geovistory â€“ Platform for Digital History
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { InfStatement } from '../model/models';
import { Configuration } from '../configuration';
export declare class InfStatementService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * Get statements (with children) of given fkProperty and fkEntity from Repo that are not in project of given projectId.
     * @param entityPk Key of the persistent item (fk_object_info)
     * @param propertyPk Key of the property (fk_property)
     * @param pkProject Id of the the current project
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    infStatementAlternativesNotInProjectByEntityPk(entityPk: number, propertyPk: number, pkProject: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<Array<InfStatement>>;
    infStatementAlternativesNotInProjectByEntityPk(entityPk: number, propertyPk: number, pkProject: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<Array<InfStatement>>>;
    infStatementAlternativesNotInProjectByEntityPk(entityPk: number, propertyPk: number, pkProject: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<Array<InfStatement>>>;
    /**
     * Get statements (with children) of given propertyPk and teEntPk from Repo that are not in project of given projectId.
     * @param teEntPk Key of the temporal entity (fk_subject_info)
     * @param propertyPk Key of the property (fk_property)
     * @param pkProject Id of the the current project
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    infStatementAlternativesNotInProjectByTeEntPk(teEntPk: number, propertyPk: number, pkProject: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<Array<InfStatement>>;
    infStatementAlternativesNotInProjectByTeEntPk(teEntPk: number, propertyPk: number, pkProject: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<Array<InfStatement>>>;
    infStatementAlternativesNotInProjectByTeEntPk(teEntPk: number, propertyPk: number, pkProject: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<Array<InfStatement>>>;
    /**
     * Find or create information statement.
     * @param pkProject Id of the project
     * @param infStatement data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    infStatementFindOrCreateInfStatements(pkProject: number, infStatement: Array<InfStatement>, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<Array<InfStatement>>;
    infStatementFindOrCreateInfStatements(pkProject: number, infStatement: Array<InfStatement>, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<Array<InfStatement>>>;
    infStatementFindOrCreateInfStatements(pkProject: number, infStatement: Array<InfStatement>, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<Array<InfStatement>>>;
    /**
     * Get a flat object of entity previews, that are target of a list.
     * @param pkProject Pk of the project.
     * @param pkSourceEntity Pk of the source entity to which the entity previews, that are target of a list are related.
     * @param pkProperty Pk of the property leading from source entity to the entity previews, that are target of a list.
     * @param pkTargetClass Fk class of the target entity previews, that are target of a list.
     * @param isOutgoing If true, the source entity is domain, else range.
     * @param limit number of returned entity previews, that are target of a list.
     * @param offset offset of the segment of returned entity previews, that are target of a list.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    infStatementPaginatedListTargetingEntityPreviews(pkProject: number, pkSourceEntity: number, pkProperty: number, pkTargetClass: number, isOutgoing: boolean, limit: number, offset: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<object>;
    infStatementPaginatedListTargetingEntityPreviews(pkProject: number, pkSourceEntity: number, pkProperty: number, pkTargetClass: number, isOutgoing: boolean, limit: number, offset: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<object>>;
    infStatementPaginatedListTargetingEntityPreviews(pkProject: number, pkSourceEntity: number, pkProperty: number, pkTargetClass: number, isOutgoing: boolean, limit: number, offset: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<object>>;
    /**
     * Find statements by params.
     * @param ofProject if true, finds project version. if false, finds repo version.
     * @param pkProject Primary Key of the Project. If provided and ofProject&#x3D;false, makes a left join with project
     * @param pkEntity Primary Key of the statement (pk_entity)
     * @param pkInfoRange Foreign Key of the statement pointing to the range entity (fk_object_info)
     * @param pkInfoDomain Foreign Key of the statement pointing to the domain entity (fk_subject_info)
     * @param pkProperty Foreign Key of the statement pointing to the property (fk_property)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    infStatementQueryByParams(ofProject: boolean, pkProject?: number, pkEntity?: number, pkInfoRange?: number, pkInfoDomain?: number, pkProperty?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<Array<InfStatement>>;
    infStatementQueryByParams(ofProject: boolean, pkProject?: number, pkEntity?: number, pkInfoRange?: number, pkInfoDomain?: number, pkProperty?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<Array<InfStatement>>>;
    infStatementQueryByParams(ofProject: boolean, pkProject?: number, pkEntity?: number, pkInfoRange?: number, pkInfoDomain?: number, pkProperty?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<Array<InfStatement>>>;
    /**
     * Get an nested object of statement with everything needed to display the links made from an entity towards sources and digitals.
     * @param ofProject if true, finds project version. if false, finds repo version.
     * @param pkProject Primary Key of the Project.
     * @param pkEntity Primary Key of the entity for which the sources links are needed.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    infStatementSourcesAndDigitalsOfEntity(ofProject: boolean, pkProject?: number, pkEntity?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<Array<object>>;
    infStatementSourcesAndDigitalsOfEntity(ofProject: boolean, pkProject?: number, pkEntity?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<Array<object>>>;
    infStatementSourcesAndDigitalsOfEntity(ofProject: boolean, pkProject?: number, pkEntity?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<Array<object>>>;
}
