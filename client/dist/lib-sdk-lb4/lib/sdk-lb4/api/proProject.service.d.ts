/**
 * geovistory
 * Geovistory â€“ Platform for Digital History
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ProProject } from '../model/models';
import { ProTextProperty } from '../model/models';
import { Configuration } from '../configuration';
export declare class ProProjectService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * Create a new project with a label and a description.
     * @param accountId Id of account to associate the persistent item with.
     * @param pkLanguage Default language of the project, language of the label and the text property.
     * @param label Label of the project.
     * @param textProperty Description of the project.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    proProjectCreateWithLabelAndDescription(accountId: number, pkLanguage: string, label: string, textProperty?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<Array<boolean>>;
    proProjectCreateWithLabelAndDescription(accountId: number, pkLanguage: string, label: string, textProperty?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<Array<boolean>>>;
    proProjectCreateWithLabelAndDescription(accountId: number, pkLanguage: string, label: string, textProperty?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<Array<boolean>>>;
    /**
     * Get basic information about the project (language, name)
     * @param pkProject Pk of project
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    proProjectGetBasics(pkProject: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<Array<ProProject>>;
    proProjectGetBasics(pkProject: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<Array<ProProject>>>;
    proProjectGetBasics(pkProject: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<Array<ProProject>>>;
    /**
     * Get the projects of account.
     * @param accountId Id of the account
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    proProjectOfAccount(accountId: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<Array<ProTextProperty>>;
    proProjectOfAccount(accountId: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<Array<ProTextProperty>>>;
    proProjectOfAccount(accountId: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<Array<ProTextProperty>>>;
}
