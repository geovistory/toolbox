/**
 * geovistory
 * Geovistory â€“ Platform for Digital History
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AnalysisMapRequest } from '../model/models';
import { AnalysisMapResponse } from '../model/models';
import { AnalysisTableExportRequest } from '../model/models';
import { AnalysisTableExportResponse } from '../model/models';
import { AnalysisTableRequest } from '../model/models';
import { AnalysisTableResponse } from '../model/models';
import { AnalysisTimeChartRequest } from '../model/models';
import { AnalysisTimeChartResponse } from '../model/models';
import { GvSchemaObject } from '../model/models';
import { ProAnalysis } from '../model/models';
import { Configuration } from '../configuration';
export declare class AnalysisService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * @param pkProject
     * @param requestBody
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    analysisControllerBulkDelete(pkProject?: number, requestBody?: Array<number>, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<any>;
    analysisControllerBulkDelete(pkProject?: number, requestBody?: Array<number>, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpResponse<any>>;
    analysisControllerBulkDelete(pkProject?: number, requestBody?: Array<number>, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpEvent<any>>;
    /**
     * Update or insert array of ProAnalysis of a project.
     * @param pkProject
     * @param proAnalysis
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    analysisControllerBulkUpsert(pkProject?: number, proAnalysis?: Array<ProAnalysis>, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<GvSchemaObject>;
    analysisControllerBulkUpsert(pkProject?: number, proAnalysis?: Array<ProAnalysis>, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<GvSchemaObject>>;
    analysisControllerBulkUpsert(pkProject?: number, proAnalysis?: Array<ProAnalysis>, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<GvSchemaObject>>;
    /**
     * Get a ProAnalysis version. If no version specified, latest version is returned.
     * @param pkProject
     * @param pkEntity
     * @param version
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    analysisControllerGetVersion(pkProject?: number, pkEntity?: number, version?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<GvSchemaObject>;
    analysisControllerGetVersion(pkProject?: number, pkEntity?: number, version?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<GvSchemaObject>>;
    analysisControllerGetVersion(pkProject?: number, pkEntity?: number, version?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<GvSchemaObject>>;
    /**
     * Run the analysis of type map
     * @param analysisMapRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    analysisControllerMapRun(analysisMapRequest?: AnalysisMapRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<AnalysisMapResponse>;
    analysisControllerMapRun(analysisMapRequest?: AnalysisMapRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<AnalysisMapResponse>>;
    analysisControllerMapRun(analysisMapRequest?: AnalysisMapRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<AnalysisMapResponse>>;
    /**
     * Get all ProAnalysis of a project.
     * @param pkProject
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    analysisControllerOfProject(pkProject: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<GvSchemaObject>;
    analysisControllerOfProject(pkProject: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<GvSchemaObject>>;
    analysisControllerOfProject(pkProject: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<GvSchemaObject>>;
    /**
     * Export the analysis of type table
     * @param analysisTableExportRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    analysisControllerTableExport(analysisTableExportRequest?: AnalysisTableExportRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<AnalysisTableExportResponse>;
    analysisControllerTableExport(analysisTableExportRequest?: AnalysisTableExportRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<AnalysisTableExportResponse>>;
    analysisControllerTableExport(analysisTableExportRequest?: AnalysisTableExportRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<AnalysisTableExportResponse>>;
    /**
     * Run the analysis of type table
     * @param analysisTableRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    analysisControllerTableRun(analysisTableRequest?: AnalysisTableRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<AnalysisTableResponse>;
    analysisControllerTableRun(analysisTableRequest?: AnalysisTableRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<AnalysisTableResponse>>;
    analysisControllerTableRun(analysisTableRequest?: AnalysisTableRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<AnalysisTableResponse>>;
    /**
     * Run the analysis of type time-chart
     * @param analysisTimeChartRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    analysisControllerTimeChartRun(analysisTimeChartRequest?: AnalysisTimeChartRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<AnalysisTimeChartResponse>;
    analysisControllerTimeChartRun(analysisTimeChartRequest?: AnalysisTimeChartRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<AnalysisTimeChartResponse>>;
    analysisControllerTimeChartRun(analysisTimeChartRequest?: AnalysisTimeChartRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<AnalysisTimeChartResponse>>;
}
