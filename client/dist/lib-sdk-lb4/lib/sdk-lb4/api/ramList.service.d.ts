/**
 * geovistory
 * Geovistory â€“ Platform for Digital History
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { GvSchemaObject } from '../model/models';
import { Configuration } from '../configuration';
export declare class RamListService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * Get the schema object for the ram list.
     * @param pkProject Primary key of the project
     * @param pkEntity Primary key of the entity (the expression)
     * @param fkProperty fkProperty of the statement connecting the entity via -&gt; 1218 &#x3D; mentions / 117 &#x3D; is about / 1334 &#x3D; refers to -&gt; with Expression / Expr. Portion / Chunk / Cell
     * @param refersTo \&quot;Chunk\&quot; or \&quot;Cell\&quot; to restrict query to Chunk or Cell as subject of referst to statements
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    ramListControllerGetRamList(pkProject: number, pkEntity: number, fkProperty: number, refersTo?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<GvSchemaObject>;
    ramListControllerGetRamList(pkProject: number, pkEntity: number, fkProperty: number, refersTo?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<GvSchemaObject>>;
    ramListControllerGetRamList(pkProject: number, pkEntity: number, fkProperty: number, refersTo?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<GvSchemaObject>>;
}
