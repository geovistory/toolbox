/**
 * geovistory
 * Geovistory â€“ Platform for Digital History
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { InfTemporalEntity } from '../model/models';
import { Configuration } from '../configuration';
export declare class InfTemporalEntityService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * Get a flat object of temporal entities.
     * @param pkProject Pk of the project.
     * @param pkSourceEntity Pk of the source entity to which the temporal entities are related.
     * @param pkProperty Pk of the property leading from source entity to the temporal entities.
     * @param pkTargetClass Fk class of the target temporal entities.
     * @param isOutgoing If true, the source entity is domain, else range.
     * @param limit number of returned temporal entities.
     * @param offset offset of the segment of returned temporal entities.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    infTemporalEntityAlternativeTemporalEntityList(pkProject: number, pkSourceEntity: number, pkProperty: number, pkTargetClass: number, isOutgoing: boolean, limit: number, offset: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<object>;
    infTemporalEntityAlternativeTemporalEntityList(pkProject: number, pkSourceEntity: number, pkProperty: number, pkTargetClass: number, isOutgoing: boolean, limit: number, offset: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<object>>;
    infTemporalEntityAlternativeTemporalEntityList(pkProject: number, pkSourceEntity: number, pkProperty: number, pkTargetClass: number, isOutgoing: boolean, limit: number, offset: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<object>>;
    /**
     * Relate a nested object of a InfTemporalEntity to the project.
     * @param pkProject Id of the project
     * @param isInProject Include or exclude from project.
     * @param infTemporalEntity data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    infTemporalEntityChangeTeEntProjectRelation(pkProject: number, isInProject: boolean, infTemporalEntity: InfTemporalEntity, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<InfTemporalEntity>;
    infTemporalEntityChangeTeEntProjectRelation(pkProject: number, isInProject: boolean, infTemporalEntity: InfTemporalEntity, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<InfTemporalEntity>>;
    infTemporalEntityChangeTeEntProjectRelation(pkProject: number, isInProject: boolean, infTemporalEntity: InfTemporalEntity, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<InfTemporalEntity>>;
    /**
     * Find all instances of the model matched by filter from the data source.
     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (&#x60;{\&quot;where\&quot;:{\&quot;something\&quot;:\&quot;value\&quot;}}&#x60;).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    infTemporalEntityFind(filter?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<Array<InfTemporalEntity>>;
    infTemporalEntityFind(filter?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<Array<InfTemporalEntity>>>;
    infTemporalEntityFind(filter?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<Array<InfTemporalEntity>>>;
    /**
     * Find or create many information temporal entities.
     * @param pkProject Pk of the project
     * @param infTemporalEntity data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    infTemporalEntityFindOrCreateInfTemporalEntities(pkProject: number, infTemporalEntity: Array<InfTemporalEntity>, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<Array<InfTemporalEntity>>;
    infTemporalEntityFindOrCreateInfTemporalEntities(pkProject: number, infTemporalEntity: Array<InfTemporalEntity>, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<Array<InfTemporalEntity>>>;
    infTemporalEntityFindOrCreateInfTemporalEntities(pkProject: number, infTemporalEntity: Array<InfTemporalEntity>, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<Array<InfTemporalEntity>>>;
    /**
     * Find or create a temporal entity version.
     * @param pkProject Id of the project
     * @param infTemporalEntity data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    infTemporalEntityFindOrCreateInfTemporalEntity(pkProject: number, infTemporalEntity: InfTemporalEntity, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<InfTemporalEntity>;
    infTemporalEntityFindOrCreateInfTemporalEntity(pkProject: number, infTemporalEntity: InfTemporalEntity, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<InfTemporalEntity>>;
    infTemporalEntityFindOrCreateInfTemporalEntity(pkProject: number, infTemporalEntity: InfTemporalEntity, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<InfTemporalEntity>>;
    /**
     * Get e schema object of own properties of the temporal entity in project version.
     * @param pkProject Pk project
     * @param pkEntity Primary Key of the temporal entity (pk_entity)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    infTemporalEntityOwnProperties(pkProject: number, pkEntity: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<InfTemporalEntity>;
    infTemporalEntityOwnProperties(pkProject: number, pkEntity: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<InfTemporalEntity>>;
    infTemporalEntityOwnProperties(pkProject: number, pkEntity: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<InfTemporalEntity>>;
    /**
     * Get a flat object of temporal entities.
     * @param pkProject Pk of the project.
     * @param pkSourceEntity Pk of the source entity to which the temporal entities are related.
     * @param pkProperty Pk of the property leading from source entity to the temporal entities.
     * @param pkTargetClass Fk class of the target temporal entities.
     * @param isOutgoing If true, the source entity is domain, else range.
     * @param limit number of returned temporal entities.
     * @param offset offset of the segment of returned temporal entities.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    infTemporalEntityTemporalEntityList(pkProject: number, pkSourceEntity: number, pkProperty: number, pkTargetClass: number, isOutgoing: boolean, limit: number, offset: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<object>;
    infTemporalEntityTemporalEntityList(pkProject: number, pkSourceEntity: number, pkProperty: number, pkTargetClass: number, isOutgoing: boolean, limit: number, offset: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpResponse<object>>;
    infTemporalEntityTemporalEntityList(pkProject: number, pkSourceEntity: number, pkProperty: number, pkTargetClass: number, isOutgoing: boolean, limit: number, offset: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript';
    }): Observable<HttpEvent<object>>;
}
