/**
 * @fileoverview added by tsickle
 * Generated from: lib/sdk-lb4/api.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, SkipSelf, Optional } from '@angular/core';
import { Configuration } from './configuration';
import { HttpClient } from '@angular/common/http';
var ApiModule = /** @class */ (function () {
    function ApiModule(parentModule, http) {
        if (parentModule) {
            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
    }
    /**
     * @param {?} configurationFactory
     * @return {?}
     */
    ApiModule.forRoot = /**
     * @param {?} configurationFactory
     * @return {?}
     */
    function (configurationFactory) {
        return {
            ngModule: ApiModule,
            providers: [{ provide: Configuration, useFactory: configurationFactory }]
        };
    };
    ApiModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                },] }
    ];
    /** @nocollapse */
    ApiModule.ctorParameters = function () { return [
        { type: ApiModule, decorators: [{ type: Optional }, { type: SkipSelf }] },
        { type: HttpClient, decorators: [{ type: Optional }] }
    ]; };
    return ApiModule;
}());
export { ApiModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BrbGVpb2xhYi9saWItc2RrLWxiNC8iLCJzb3VyY2VzIjpbImxpYi9zZGstbGI0L2FwaS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUEwQ2xEO0lBY0ksbUJBQXFDLFlBQXVCLEVBQ25DLElBQWdCO1FBQ3JDLElBQUksWUFBWSxFQUFFO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyxrRUFBa0UsQ0FBQyxDQUFDO1NBQ3ZGO1FBQ0QsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNQLE1BQU0sSUFBSSxLQUFLLENBQUMsK0RBQStEO2dCQUMvRSwwREFBMEQsQ0FBQyxDQUFDO1NBQy9EO0lBQ0wsQ0FBQzs7Ozs7SUFoQmEsaUJBQU87Ozs7SUFBckIsVUFBc0Isb0JBQXlDO1FBQzNELE9BQU87WUFDSCxRQUFRLEVBQUUsU0FBUztZQUNuQixTQUFTLEVBQUUsQ0FBRSxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLG9CQUFvQixFQUFFLENBQUU7U0FDOUUsQ0FBQztJQUNOLENBQUM7O2dCQVpKLFFBQVEsU0FBQztvQkFDUixPQUFPLEVBQU8sRUFBRTtvQkFDaEIsWUFBWSxFQUFFLEVBQUU7b0JBQ2hCLE9BQU8sRUFBTyxFQUFFO29CQUNoQixTQUFTLEVBQUUsRUFBRTtpQkFDZDs7OztnQkFTc0QsU0FBUyx1QkFBOUMsUUFBUSxZQUFJLFFBQVE7Z0JBeEQ3QixVQUFVLHVCQXlERCxRQUFROztJQVMxQixnQkFBQztDQUFBLEFBeEJELElBd0JDO1NBbEJZLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgU2tpcFNlbGYsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb25maWd1cmF0aW9uIH0gZnJvbSAnLi9jb25maWd1cmF0aW9uJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmltcG9ydCB7IEFjY291bnRTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvYWNjb3VudC5zZXJ2aWNlJztcbmltcG9ydCB7IEFuYWx5c2lzU2VydmljZSB9IGZyb20gJy4vYXBpL2FuYWx5c2lzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29udGVudFRyZWVTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvY29udGVudFRyZWUuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRDaHVua1NlcnZpY2UgfSBmcm9tICcuL2FwaS9kYXRDaHVuay5zZXJ2aWNlJztcbmltcG9ydCB7IERhdENodW5rQ29udHJvbGxlclNlcnZpY2UgfSBmcm9tICcuL2FwaS9kYXRDaHVua0NvbnRyb2xsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRDb2x1bW5TZXJ2aWNlIH0gZnJvbSAnLi9hcGkvZGF0Q29sdW1uLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0RGlnaXRhbFNlcnZpY2UgfSBmcm9tICcuL2FwaS9kYXREaWdpdGFsLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0TmFtZXNwYWNlU2VydmljZSB9IGZyb20gJy4vYXBpL2RhdE5hbWVzcGFjZS5zZXJ2aWNlJztcbmltcG9ydCB7IERmaENsYXNzQ29udHJvbGxlclNlcnZpY2UgfSBmcm9tICcuL2FwaS9kZmhDbGFzc0NvbnRyb2xsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBEZmhMYWJlbFNlcnZpY2UgfSBmcm9tICcuL2FwaS9kZmhMYWJlbC5zZXJ2aWNlJztcbmltcG9ydCB7IERmaFByb2ZpbGVTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvZGZoUHJvZmlsZS5zZXJ2aWNlJztcbmltcG9ydCB7IERmaFByb3BlcnR5Q29udHJvbGxlclNlcnZpY2UgfSBmcm9tICcuL2FwaS9kZmhQcm9wZXJ0eUNvbnRyb2xsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBGYWN0b2lkQ29udHJvbGxlclNlcnZpY2UgfSBmcm9tICcuL2FwaS9mYWN0b2lkQ29udHJvbGxlci5zZXJ2aWNlJztcbmltcG9ydCB7IEltcG9ydFRhYmxlQ29udHJvbGxlclNlcnZpY2UgfSBmcm9tICcuL2FwaS9pbXBvcnRUYWJsZUNvbnRyb2xsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBJbmZMYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuL2FwaS9pbmZMYW5ndWFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IEluZlBlcnNpc3RlbnRJdGVtU2VydmljZSB9IGZyb20gJy4vYXBpL2luZlBlcnNpc3RlbnRJdGVtLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW5mUGxhY2VTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvaW5mUGxhY2Uuc2VydmljZSc7XG5pbXBvcnQgeyBJbmZTdGF0ZW1lbnRTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvaW5mU3RhdGVtZW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgSW5mVGVtcG9yYWxFbnRpdHlTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvaW5mVGVtcG9yYWxFbnRpdHkuc2VydmljZSc7XG5pbXBvcnQgeyBJbmZUZXh0UHJvcGVydHlTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvaW5mVGV4dFByb3BlcnR5LnNlcnZpY2UnO1xuaW1wb3J0IHsgUGluZ0NvbnRyb2xsZXJTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvcGluZ0NvbnRyb2xsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBQcm9DbGFzc0ZpZWxkQ29uZmlnU2VydmljZSB9IGZyb20gJy4vYXBpL3Byb0NsYXNzRmllbGRDb25maWcuc2VydmljZSc7XG5pbXBvcnQgeyBQcm9EZmhDbGFzc1Byb2pSZWxTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvcHJvRGZoQ2xhc3NQcm9qUmVsLnNlcnZpY2UnO1xuaW1wb3J0IHsgUHJvRGZoUHJvZmlsZVByb2pSZWxTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvcHJvRGZoUHJvZmlsZVByb2pSZWwuc2VydmljZSc7XG5pbXBvcnQgeyBQcm9JbmZvUHJvalJlbFNlcnZpY2UgfSBmcm9tICcuL2FwaS9wcm9JbmZvUHJvalJlbC5zZXJ2aWNlJztcbmltcG9ydCB7IFByb1Byb2plY3RTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvcHJvUHJvamVjdC5zZXJ2aWNlJztcbmltcG9ydCB7IFByb1RleHRQcm9wZXJ0eVNlcnZpY2UgfSBmcm9tICcuL2FwaS9wcm9UZXh0UHJvcGVydHkuc2VydmljZSc7XG5pbXBvcnQgeyBQcm9qZWN0Q29uZmlndXJhdGlvblNlcnZpY2UgfSBmcm9tICcuL2FwaS9wcm9qZWN0Q29uZmlndXJhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IFB1YkFjY291bnRTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvcHViQWNjb3VudC5zZXJ2aWNlJztcbmltcG9ydCB7IFJhbUxpc3RTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvcmFtTGlzdC5zZXJ2aWNlJztcbmltcG9ydCB7IFNjaGVtYU9iamVjdFNlcnZpY2UgfSBmcm9tICcuL2FwaS9zY2hlbWFPYmplY3Quc2VydmljZSc7XG5pbXBvcnQgeyBTdWJmaWVsZFBhZ2VDb250cm9sbGVyU2VydmljZSB9IGZyb20gJy4vYXBpL3N1YmZpZWxkUGFnZUNvbnRyb2xsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBTeXNDbGFzc0ZpZWxkU2VydmljZSB9IGZyb20gJy4vYXBpL3N5c0NsYXNzRmllbGQuc2VydmljZSc7XG5pbXBvcnQgeyBTeXNDbGFzc0hhc1R5cGVQcm9wZXJ0eVNlcnZpY2UgfSBmcm9tICcuL2FwaS9zeXNDbGFzc0hhc1R5cGVQcm9wZXJ0eS5zZXJ2aWNlJztcbmltcG9ydCB7IFN5c1N5c3RlbVJlbGV2YW50Q2xhc3NTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvc3lzU3lzdGVtUmVsZXZhbnRDbGFzcy5zZXJ2aWNlJztcbmltcG9ydCB7IFN5c1N5c3RlbVR5cGVTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvc3lzU3lzdGVtVHlwZS5zZXJ2aWNlJztcbmltcG9ydCB7IFN5c3RlbUNvbmZpZ3VyYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9hcGkvc3lzdGVtQ29uZmlndXJhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IFRhYmxlU2VydmljZSB9IGZyb20gJy4vYXBpL3RhYmxlLnNlcnZpY2UnO1xuaW1wb3J0IHsgV2FyRW50aXR5UHJldmlld0NvbnRyb2xsZXJTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvd2FyRW50aXR5UHJldmlld0NvbnRyb2xsZXIuc2VydmljZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6ICAgICAgW10sXG4gIGRlY2xhcmF0aW9uczogW10sXG4gIGV4cG9ydHM6ICAgICAgW10sXG4gIHByb3ZpZGVyczogW11cbn0pXG5leHBvcnQgY2xhc3MgQXBpTW9kdWxlIHtcbiAgICBwdWJsaWMgc3RhdGljIGZvclJvb3QoY29uZmlndXJhdGlvbkZhY3Rvcnk6ICgpID0+IENvbmZpZ3VyYXRpb24pOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBBcGlNb2R1bGUsXG4gICAgICAgICAgICBwcm92aWRlcnM6IFsgeyBwcm92aWRlOiBDb25maWd1cmF0aW9uLCB1c2VGYWN0b3J5OiBjb25maWd1cmF0aW9uRmFjdG9yeSB9IF1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvciggQE9wdGlvbmFsKCkgQFNraXBTZWxmKCkgcGFyZW50TW9kdWxlOiBBcGlNb2R1bGUsXG4gICAgICAgICAgICAgICAgIEBPcHRpb25hbCgpIGh0dHA6IEh0dHBDbGllbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudE1vZHVsZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcGlNb2R1bGUgaXMgYWxyZWFkeSBsb2FkZWQuIEltcG9ydCBpbiB5b3VyIGJhc2UgQXBwTW9kdWxlIG9ubHkuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFodHRwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBuZWVkIHRvIGltcG9ydCB0aGUgSHR0cENsaWVudE1vZHVsZSBpbiB5b3VyIEFwcE1vZHVsZSEgXFxuJyArXG4gICAgICAgICAgICAnU2VlIGFsc28gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMjA1NzUnKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==