/**
 * @fileoverview added by tsickle
 * Generated from: lib/sdk-lb4/api.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, SkipSelf, Optional } from '@angular/core';
import { Configuration } from './configuration';
import { HttpClient } from '@angular/common/http';
var ApiModule = /** @class */ (function () {
    function ApiModule(parentModule, http) {
        if (parentModule) {
            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
    }
    /**
     * @param {?} configurationFactory
     * @return {?}
     */
    ApiModule.forRoot = /**
     * @param {?} configurationFactory
     * @return {?}
     */
    function (configurationFactory) {
        return {
            ngModule: ApiModule,
            providers: [{ provide: Configuration, useFactory: configurationFactory }]
        };
    };
    ApiModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                },] }
    ];
    /** @nocollapse */
    ApiModule.ctorParameters = function () { return [
        { type: ApiModule, decorators: [{ type: Optional }, { type: SkipSelf }] },
        { type: HttpClient, decorators: [{ type: Optional }] }
    ]; };
    return ApiModule;
}());
export { ApiModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BrbGVpb2xhYi9saWItc2RrLWxiNC8iLCJzb3VyY2VzIjpbImxpYi9zZGstbGI0L2FwaS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUEwQ2xEO0lBY0ksbUJBQXFDLFlBQXVCLEVBQ25DLElBQWdCO1FBQ3JDLElBQUksWUFBWSxFQUFFO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyxrRUFBa0UsQ0FBQyxDQUFDO1NBQ3ZGO1FBQ0QsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNQLE1BQU0sSUFBSSxLQUFLLENBQUMsK0RBQStEO2dCQUMvRSwwREFBMEQsQ0FBQyxDQUFDO1NBQy9EO0lBQ0wsQ0FBQzs7Ozs7SUFoQmEsaUJBQU87Ozs7SUFBckIsVUFBc0Isb0JBQXlDO1FBQzNELE9BQU87WUFDSCxRQUFRLEVBQUUsU0FBUztZQUNuQixTQUFTLEVBQUUsQ0FBRSxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLG9CQUFvQixFQUFFLENBQUU7U0FDOUUsQ0FBQztJQUNOLENBQUM7O2dCQVpKLFFBQVEsU0FBQztvQkFDUixPQUFPLEVBQU8sRUFBRTtvQkFDaEIsWUFBWSxFQUFFLEVBQUU7b0JBQ2hCLE9BQU8sRUFBTyxFQUFFO29CQUNoQixTQUFTLEVBQUUsRUFBRTtpQkFDZDs7OztnQkFTc0QsU0FBUyx1QkFBOUMsUUFBUSxZQUFJLFFBQVE7Z0JBeEQ3QixVQUFVLHVCQXlERCxRQUFROztJQVMxQixnQkFBQztDQUFBLEFBeEJELElBd0JDO1NBbEJZLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgU2tpcFNlbGYsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb25maWd1cmF0aW9uIH0gZnJvbSAnLi9jb25maWd1cmF0aW9uJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmltcG9ydCB7IEFjY291bnRTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvYWNjb3VudC5zZXJ2aWNlJztcbmltcG9ydCB7IEFuYWx5c2lzU2VydmljZSB9IGZyb20gJy4vYXBpL2FuYWx5c2lzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29udGVudFRyZWVTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvY29udGVudFRyZWUuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRDaHVua1NlcnZpY2UgfSBmcm9tICcuL2FwaS9kYXRDaHVuay5zZXJ2aWNlJztcbmltcG9ydCB7IERhdENodW5rQ29udHJvbGxlclNlcnZpY2UgfSBmcm9tICcuL2FwaS9kYXRDaHVua0NvbnRyb2xsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRDb2x1bW5TZXJ2aWNlIH0gZnJvbSAnLi9hcGkvZGF0Q29sdW1uLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0RGlnaXRhbFNlcnZpY2UgfSBmcm9tICcuL2FwaS9kYXREaWdpdGFsLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0TmFtZXNwYWNlU2VydmljZSB9IGZyb20gJy4vYXBpL2RhdE5hbWVzcGFjZS5zZXJ2aWNlJztcbmltcG9ydCB7IERmaENsYXNzQ29udHJvbGxlclNlcnZpY2UgfSBmcm9tICcuL2FwaS9kZmhDbGFzc0NvbnRyb2xsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBEZmhMYWJlbFNlcnZpY2UgfSBmcm9tICcuL2FwaS9kZmhMYWJlbC5zZXJ2aWNlJztcbmltcG9ydCB7IERmaFByb2ZpbGVTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvZGZoUHJvZmlsZS5zZXJ2aWNlJztcbmltcG9ydCB7IERmaFByb3BlcnR5Q29udHJvbGxlclNlcnZpY2UgfSBmcm9tICcuL2FwaS9kZmhQcm9wZXJ0eUNvbnRyb2xsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBGYWN0b2lkQ29udHJvbGxlclNlcnZpY2UgfSBmcm9tICcuL2FwaS9mYWN0b2lkQ29udHJvbGxlci5zZXJ2aWNlJztcbmltcG9ydCB7IEltcG9ydFRhYmxlQ29udHJvbGxlclNlcnZpY2UgfSBmcm9tICcuL2FwaS9pbXBvcnRUYWJsZUNvbnRyb2xsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBJbmZMYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuL2FwaS9pbmZMYW5ndWFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IEluZlBlcnNpc3RlbnRJdGVtU2VydmljZSB9IGZyb20gJy4vYXBpL2luZlBlcnNpc3RlbnRJdGVtLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW5mUGxhY2VTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvaW5mUGxhY2Uuc2VydmljZSc7XG5pbXBvcnQgeyBJbmZTdGF0ZW1lbnRTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvaW5mU3RhdGVtZW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgSW5mVGVtcG9yYWxFbnRpdHlTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvaW5mVGVtcG9yYWxFbnRpdHkuc2VydmljZSc7XG5pbXBvcnQgeyBJbmZUZXh0UHJvcGVydHlTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvaW5mVGV4dFByb3BlcnR5LnNlcnZpY2UnO1xuaW1wb3J0IHsgUGFnaW5hdGVkU3RhdGVtZW50c0NvbnRyb2xsZXJTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvcGFnaW5hdGVkU3RhdGVtZW50c0NvbnRyb2xsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBQaW5nQ29udHJvbGxlclNlcnZpY2UgfSBmcm9tICcuL2FwaS9waW5nQ29udHJvbGxlci5zZXJ2aWNlJztcbmltcG9ydCB7IFByb0NsYXNzRmllbGRDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvcHJvQ2xhc3NGaWVsZENvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7IFByb0RmaENsYXNzUHJvalJlbFNlcnZpY2UgfSBmcm9tICcuL2FwaS9wcm9EZmhDbGFzc1Byb2pSZWwuc2VydmljZSc7XG5pbXBvcnQgeyBQcm9EZmhQcm9maWxlUHJvalJlbFNlcnZpY2UgfSBmcm9tICcuL2FwaS9wcm9EZmhQcm9maWxlUHJvalJlbC5zZXJ2aWNlJztcbmltcG9ydCB7IFByb0luZm9Qcm9qUmVsU2VydmljZSB9IGZyb20gJy4vYXBpL3Byb0luZm9Qcm9qUmVsLnNlcnZpY2UnO1xuaW1wb3J0IHsgUHJvUHJvamVjdFNlcnZpY2UgfSBmcm9tICcuL2FwaS9wcm9Qcm9qZWN0LnNlcnZpY2UnO1xuaW1wb3J0IHsgUHJvVGV4dFByb3BlcnR5U2VydmljZSB9IGZyb20gJy4vYXBpL3Byb1RleHRQcm9wZXJ0eS5zZXJ2aWNlJztcbmltcG9ydCB7IFByb2plY3RDb25maWd1cmF0aW9uU2VydmljZSB9IGZyb20gJy4vYXBpL3Byb2plY3RDb25maWd1cmF0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgUHViQWNjb3VudFNlcnZpY2UgfSBmcm9tICcuL2FwaS9wdWJBY2NvdW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgUmFtTGlzdFNlcnZpY2UgfSBmcm9tICcuL2FwaS9yYW1MaXN0LnNlcnZpY2UnO1xuaW1wb3J0IHsgU2NoZW1hT2JqZWN0U2VydmljZSB9IGZyb20gJy4vYXBpL3NjaGVtYU9iamVjdC5zZXJ2aWNlJztcbmltcG9ydCB7IFN5c0NsYXNzRmllbGRTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvc3lzQ2xhc3NGaWVsZC5zZXJ2aWNlJztcbmltcG9ydCB7IFN5c0NsYXNzSGFzVHlwZVByb3BlcnR5U2VydmljZSB9IGZyb20gJy4vYXBpL3N5c0NsYXNzSGFzVHlwZVByb3BlcnR5LnNlcnZpY2UnO1xuaW1wb3J0IHsgU3lzU3lzdGVtUmVsZXZhbnRDbGFzc1NlcnZpY2UgfSBmcm9tICcuL2FwaS9zeXNTeXN0ZW1SZWxldmFudENsYXNzLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3lzU3lzdGVtVHlwZVNlcnZpY2UgfSBmcm9tICcuL2FwaS9zeXNTeXN0ZW1UeXBlLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3lzdGVtQ29uZmlndXJhdGlvblNlcnZpY2UgfSBmcm9tICcuL2FwaS9zeXN0ZW1Db25maWd1cmF0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgVGFibGVTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvdGFibGUuc2VydmljZSc7XG5pbXBvcnQgeyBXYXJFbnRpdHlQcmV2aWV3Q29udHJvbGxlclNlcnZpY2UgfSBmcm9tICcuL2FwaS93YXJFbnRpdHlQcmV2aWV3Q29udHJvbGxlci5zZXJ2aWNlJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogICAgICBbXSxcbiAgZGVjbGFyYXRpb25zOiBbXSxcbiAgZXhwb3J0czogICAgICBbXSxcbiAgcHJvdmlkZXJzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBBcGlNb2R1bGUge1xuICAgIHB1YmxpYyBzdGF0aWMgZm9yUm9vdChjb25maWd1cmF0aW9uRmFjdG9yeTogKCkgPT4gQ29uZmlndXJhdGlvbik6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmdNb2R1bGU6IEFwaU1vZHVsZSxcbiAgICAgICAgICAgIHByb3ZpZGVyczogWyB7IHByb3ZpZGU6IENvbmZpZ3VyYXRpb24sIHVzZUZhY3Rvcnk6IGNvbmZpZ3VyYXRpb25GYWN0b3J5IH0gXVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCBAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBwYXJlbnRNb2R1bGU6IEFwaU1vZHVsZSxcbiAgICAgICAgICAgICAgICAgQE9wdGlvbmFsKCkgaHR0cDogSHR0cENsaWVudCkge1xuICAgICAgICBpZiAocGFyZW50TW9kdWxlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FwaU1vZHVsZSBpcyBhbHJlYWR5IGxvYWRlZC4gSW1wb3J0IGluIHlvdXIgYmFzZSBBcHBNb2R1bGUgb25seS4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWh0dHApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG5lZWQgdG8gaW1wb3J0IHRoZSBIdHRwQ2xpZW50TW9kdWxlIGluIHlvdXIgQXBwTW9kdWxlISBcXG4nICtcbiAgICAgICAgICAgICdTZWUgYWxzbyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8yMDU3NScpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19