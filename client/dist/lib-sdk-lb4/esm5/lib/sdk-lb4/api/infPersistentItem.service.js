/**
 * @fileoverview added by tsickle
 * Generated from: lib/sdk-lb4/api/infPersistentItem.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * geovistory
 * Geovistory â€“ Platform for Digital History
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../variables";
import * as i3 from "../configuration";
var InfPersistentItemService = /** @class */ (function () {
    function InfPersistentItemService(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'http://0.0.0.0:3000';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new Configuration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    /**
     * @private
     * @param {?} httpParams
     * @param {?} value
     * @param {?=} key
     * @return {?}
     */
    InfPersistentItemService.prototype.addToHttpParams = /**
     * @private
     * @param {?} httpParams
     * @param {?} value
     * @param {?=} key
     * @return {?}
     */
    function (httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    };
    /**
     * @private
     * @param {?} httpParams
     * @param {?=} value
     * @param {?=} key
     * @return {?}
     */
    InfPersistentItemService.prototype.addToHttpParamsRecursive = /**
     * @private
     * @param {?} httpParams
     * @param {?=} value
     * @param {?=} key
     * @return {?}
     */
    function (httpParams, value, key) {
        var _this = this;
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                ((/** @type {?} */ (value))).forEach((/**
                 * @param {?} elem
                 * @return {?}
                 */
                function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); }));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, ((/** @type {?} */ (value))).toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach((/**
                 * @param {?} k
                 * @return {?}
                 */
                function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); }));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    };
    /**
     * @param {?} pkProject
     * @param {?} infPersistentItem
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    InfPersistentItemService.prototype.infPersistentItemFindOrCreateInfPersistentItems = /**
     * @param {?} pkProject
     * @param {?} infPersistentItem
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    function (pkProject, infPersistentItem, observe, reportProgress, options) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        if (pkProject === null || pkProject === undefined) {
            throw new Error('Required parameter pkProject was null or undefined when calling infPersistentItemFindOrCreateInfPersistentItems.');
        }
        if (infPersistentItem === null || infPersistentItem === undefined) {
            throw new Error('Required parameter infPersistentItem was null or undefined when calling infPersistentItemFindOrCreateInfPersistentItems.');
        }
        /** @type {?} */
        var queryParameters = new HttpParams({ encoder: this.encoder });
        if (pkProject !== undefined && pkProject !== null) {
            queryParameters = this.addToHttpParams(queryParameters, (/** @type {?} */ (pkProject)), 'pk_project');
        }
        /** @type {?} */
        var headers = this.defaultHeaders;
        /** @type {?} */
        var credential;
        // authentication (accesstoken) required
        credential = this.configuration.lookupCredential('accesstoken');
        if (credential) {
            headers = headers.set('authorization', credential);
        }
        // authentication (jwt) required
        credential = this.configuration.lookupCredential('jwt');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        /** @type {?} */
        var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            /** @type {?} */
            var httpHeaderAccepts = [
                'application/json',
                'application/xml',
                'text/xml',
                'application/javascript',
                'text/javascript'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        /** @type {?} */
        var consumes = [
            'application/json',
            'application/x-www-form-urlencoded',
            'application/xml',
            'text/xml'
        ];
        /** @type {?} */
        var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        var responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(this.configuration.basePath + "/lb3-api/InfPersistentItems/find-or-create-many", infPersistentItem, {
            params: queryParameters,
            responseType: (/** @type {?} */ (responseType)),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    /**
     * @param {?} pkProject
     * @param {?} pkEntity
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    InfPersistentItemService.prototype.infPersistentItemOwnProperties = /**
     * @param {?} pkProject
     * @param {?} pkEntity
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    function (pkProject, pkEntity, observe, reportProgress, options) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        if (pkProject === null || pkProject === undefined) {
            throw new Error('Required parameter pkProject was null or undefined when calling infPersistentItemOwnProperties.');
        }
        if (pkEntity === null || pkEntity === undefined) {
            throw new Error('Required parameter pkEntity was null or undefined when calling infPersistentItemOwnProperties.');
        }
        /** @type {?} */
        var queryParameters = new HttpParams({ encoder: this.encoder });
        if (pkProject !== undefined && pkProject !== null) {
            queryParameters = this.addToHttpParams(queryParameters, (/** @type {?} */ (pkProject)), 'pkProject');
        }
        if (pkEntity !== undefined && pkEntity !== null) {
            queryParameters = this.addToHttpParams(queryParameters, (/** @type {?} */ (pkEntity)), 'pkEntity');
        }
        /** @type {?} */
        var headers = this.defaultHeaders;
        /** @type {?} */
        var credential;
        // authentication (accesstoken) required
        credential = this.configuration.lookupCredential('accesstoken');
        if (credential) {
            headers = headers.set('authorization', credential);
        }
        // authentication (jwt) required
        credential = this.configuration.lookupCredential('jwt');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        /** @type {?} */
        var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            /** @type {?} */
            var httpHeaderAccepts = [
                'application/json',
                'application/xml',
                'text/xml',
                'application/javascript',
                'text/javascript'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        var responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(this.configuration.basePath + "/lb3-api/InfPersistentItems/own-properties", {
            params: queryParameters,
            responseType: (/** @type {?} */ (responseType)),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    /**
     * @param {?} pkProject
     * @param {?} pkEntity
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    InfPersistentItemService.prototype.infPersistentItemTypeNested = /**
     * @param {?} pkProject
     * @param {?} pkEntity
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    function (pkProject, pkEntity, observe, reportProgress, options) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        if (pkProject === null || pkProject === undefined) {
            throw new Error('Required parameter pkProject was null or undefined when calling infPersistentItemTypeNested.');
        }
        if (pkEntity === null || pkEntity === undefined) {
            throw new Error('Required parameter pkEntity was null or undefined when calling infPersistentItemTypeNested.');
        }
        /** @type {?} */
        var queryParameters = new HttpParams({ encoder: this.encoder });
        if (pkProject !== undefined && pkProject !== null) {
            queryParameters = this.addToHttpParams(queryParameters, (/** @type {?} */ (pkProject)), 'pk_project');
        }
        if (pkEntity !== undefined && pkEntity !== null) {
            queryParameters = this.addToHttpParams(queryParameters, (/** @type {?} */ (pkEntity)), 'pk_entity');
        }
        /** @type {?} */
        var headers = this.defaultHeaders;
        /** @type {?} */
        var credential;
        // authentication (accesstoken) required
        credential = this.configuration.lookupCredential('accesstoken');
        if (credential) {
            headers = headers.set('authorization', credential);
        }
        // authentication (jwt) required
        credential = this.configuration.lookupCredential('jwt');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        /** @type {?} */
        var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            /** @type {?} */
            var httpHeaderAccepts = [
                'application/json',
                'application/xml',
                'text/xml',
                'application/javascript',
                'text/javascript'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        var responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(this.configuration.basePath + "/lb3-api/InfPersistentItems/type-nested", {
            params: queryParameters,
            responseType: (/** @type {?} */ (responseType)),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    /**
     * @param {?} pkProject
     * @param {?} pkTypedClasses
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    InfPersistentItemService.prototype.infPersistentItemTypesOfClassesAndProject = /**
     * @param {?} pkProject
     * @param {?} pkTypedClasses
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    function (pkProject, pkTypedClasses, observe, reportProgress, options) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        if (pkProject === null || pkProject === undefined) {
            throw new Error('Required parameter pkProject was null or undefined when calling infPersistentItemTypesOfClassesAndProject.');
        }
        if (pkTypedClasses === null || pkTypedClasses === undefined) {
            throw new Error('Required parameter pkTypedClasses was null or undefined when calling infPersistentItemTypesOfClassesAndProject.');
        }
        /** @type {?} */
        var queryParameters = new HttpParams({ encoder: this.encoder });
        if (pkProject !== undefined && pkProject !== null) {
            queryParameters = this.addToHttpParams(queryParameters, (/** @type {?} */ (pkProject)), 'pk_project');
        }
        if (pkTypedClasses !== undefined && pkTypedClasses !== null) {
            queryParameters = this.addToHttpParams(queryParameters, (/** @type {?} */ (pkTypedClasses)), 'pk_typed_classes');
        }
        /** @type {?} */
        var headers = this.defaultHeaders;
        /** @type {?} */
        var credential;
        // authentication (accesstoken) required
        credential = this.configuration.lookupCredential('accesstoken');
        if (credential) {
            headers = headers.set('authorization', credential);
        }
        // authentication (jwt) required
        credential = this.configuration.lookupCredential('jwt');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        /** @type {?} */
        var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            /** @type {?} */
            var httpHeaderAccepts = [
                'application/json',
                'application/xml',
                'text/xml',
                'application/javascript',
                'text/javascript'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        var responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(this.configuration.basePath + "/lb3-api/InfPersistentItems/types-of-classes-and-project", {
            params: queryParameters,
            responseType: (/** @type {?} */ (responseType)),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    /**
     * @param {?} pkProject
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    InfPersistentItemService.prototype.infPersistentItemTypesOfProject = /**
     * @param {?} pkProject
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    function (pkProject, observe, reportProgress, options) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        if (pkProject === null || pkProject === undefined) {
            throw new Error('Required parameter pkProject was null or undefined when calling infPersistentItemTypesOfProject.');
        }
        /** @type {?} */
        var queryParameters = new HttpParams({ encoder: this.encoder });
        if (pkProject !== undefined && pkProject !== null) {
            queryParameters = this.addToHttpParams(queryParameters, (/** @type {?} */ (pkProject)), 'pkProject');
        }
        /** @type {?} */
        var headers = this.defaultHeaders;
        /** @type {?} */
        var credential;
        // authentication (accesstoken) required
        credential = this.configuration.lookupCredential('accesstoken');
        if (credential) {
            headers = headers.set('authorization', credential);
        }
        // authentication (jwt) required
        credential = this.configuration.lookupCredential('jwt');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        /** @type {?} */
        var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            /** @type {?} */
            var httpHeaderAccepts = [
                'application/json',
                'application/xml',
                'text/xml',
                'application/javascript',
                'text/javascript'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        var responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(this.configuration.basePath + "/lb3-api/InfPersistentItems/types-of-project", {
            params: queryParameters,
            responseType: (/** @type {?} */ (responseType)),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    InfPersistentItemService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    InfPersistentItemService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },
        { type: Configuration, decorators: [{ type: Optional }] }
    ]; };
    /** @nocollapse */ InfPersistentItemService.ngInjectableDef = i0.ÉµÉµdefineInjectable({ factory: function InfPersistentItemService_Factory() { return new InfPersistentItemService(i0.ÉµÉµinject(i1.HttpClient), i0.ÉµÉµinject(i2.BASE_PATH, 8), i0.ÉµÉµinject(i3.Configuration, 8)); }, token: InfPersistentItemService, providedIn: "root" });
    return InfPersistentItemService;
}());
export { InfPersistentItemService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    InfPersistentItemService.prototype.basePath;
    /** @type {?} */
    InfPersistentItemService.prototype.defaultHeaders;
    /** @type {?} */
    InfPersistentItemService.prototype.configuration;
    /** @type {?} */
    InfPersistentItemService.prototype.encoder;
    /**
     * @type {?}
     * @protected
     */
    InfPersistentItemService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,