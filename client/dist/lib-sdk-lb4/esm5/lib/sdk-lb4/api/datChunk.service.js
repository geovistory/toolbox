/**
 * @fileoverview added by tsickle
 * Generated from: lib/sdk-lb4/api/datChunk.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * geovistory
 * Geovistory â€“ Platform for Digital History
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../variables";
import * as i3 from "../configuration";
var DatChunkService = /** @class */ (function () {
    function DatChunkService(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'http://0.0.0.0:3000';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new Configuration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    /**
     * @private
     * @param {?} httpParams
     * @param {?} value
     * @param {?=} key
     * @return {?}
     */
    DatChunkService.prototype.addToHttpParams = /**
     * @private
     * @param {?} httpParams
     * @param {?} value
     * @param {?=} key
     * @return {?}
     */
    function (httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    };
    /**
     * @private
     * @param {?} httpParams
     * @param {?=} value
     * @param {?=} key
     * @return {?}
     */
    DatChunkService.prototype.addToHttpParamsRecursive = /**
     * @private
     * @param {?} httpParams
     * @param {?=} value
     * @param {?=} key
     * @return {?}
     */
    function (httpParams, value, key) {
        var _this = this;
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                ((/** @type {?} */ (value))).forEach((/**
                 * @param {?} elem
                 * @return {?}
                 */
                function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); }));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, ((/** @type {?} */ (value))).toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach((/**
                 * @param {?} k
                 * @return {?}
                 */
                function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); }));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    };
    /**
     * @param {?} id
     * @param {?=} filter
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    DatChunkService.prototype.datChunkFindById = /**
     * @param {?} id
     * @param {?=} filter
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    function (id, filter, observe, reportProgress, options) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling datChunkFindById.');
        }
        /** @type {?} */
        var queryParameters = new HttpParams({ encoder: this.encoder });
        if (filter !== undefined && filter !== null) {
            queryParameters = this.addToHttpParams(queryParameters, (/** @type {?} */ (filter)), 'filter');
        }
        /** @type {?} */
        var headers = this.defaultHeaders;
        /** @type {?} */
        var credential;
        // authentication (accesstoken) required
        credential = this.configuration.lookupCredential('accesstoken');
        if (credential) {
            headers = headers.set('authorization', credential);
        }
        // authentication (jwt) required
        credential = this.configuration.lookupCredential('jwt');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        /** @type {?} */
        var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            /** @type {?} */
            var httpHeaderAccepts = [
                'application/json',
                'application/xml',
                'text/xml',
                'application/javascript',
                'text/javascript'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        var responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(this.configuration.basePath + "/lb3-api/DatChunks/" + encodeURIComponent(String(id)), {
            params: queryParameters,
            responseType: (/** @type {?} */ (responseType)),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    /**
     * @param {?} pkProject
     * @param {?} pkDigital
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    DatChunkService.prototype.datChunkOfDigital = /**
     * @param {?} pkProject
     * @param {?} pkDigital
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    function (pkProject, pkDigital, observe, reportProgress, options) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        if (pkProject === null || pkProject === undefined) {
            throw new Error('Required parameter pkProject was null or undefined when calling datChunkOfDigital.');
        }
        if (pkDigital === null || pkDigital === undefined) {
            throw new Error('Required parameter pkDigital was null or undefined when calling datChunkOfDigital.');
        }
        /** @type {?} */
        var queryParameters = new HttpParams({ encoder: this.encoder });
        if (pkProject !== undefined && pkProject !== null) {
            queryParameters = this.addToHttpParams(queryParameters, (/** @type {?} */ (pkProject)), 'pkProject');
        }
        if (pkDigital !== undefined && pkDigital !== null) {
            queryParameters = this.addToHttpParams(queryParameters, (/** @type {?} */ (pkDigital)), 'pkDigital');
        }
        /** @type {?} */
        var headers = this.defaultHeaders;
        /** @type {?} */
        var credential;
        // authentication (accesstoken) required
        credential = this.configuration.lookupCredential('accesstoken');
        if (credential) {
            headers = headers.set('authorization', credential);
        }
        // authentication (jwt) required
        credential = this.configuration.lookupCredential('jwt');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        /** @type {?} */
        var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            /** @type {?} */
            var httpHeaderAccepts = [
                'application/json',
                'application/xml',
                'text/xml',
                'application/javascript',
                'text/javascript'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        var responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(this.configuration.basePath + "/lb3-api/DatChunks/of-digital", {
            params: queryParameters,
            responseType: (/** @type {?} */ (responseType)),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    DatChunkService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DatChunkService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },
        { type: Configuration, decorators: [{ type: Optional }] }
    ]; };
    /** @nocollapse */ DatChunkService.ngInjectableDef = i0.ÉµÉµdefineInjectable({ factory: function DatChunkService_Factory() { return new DatChunkService(i0.ÉµÉµinject(i1.HttpClient), i0.ÉµÉµinject(i2.BASE_PATH, 8), i0.ÉµÉµinject(i3.Configuration, 8)); }, token: DatChunkService, providedIn: "root" });
    return DatChunkService;
}());
export { DatChunkService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    DatChunkService.prototype.basePath;
    /** @type {?} */
    DatChunkService.prototype.defaultHeaders;
    /** @type {?} */
    DatChunkService.prototype.configuration;
    /** @type {?} */
    DatChunkService.prototype.encoder;
    /**
     * @type {?}
     * @protected
     */
    DatChunkService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,