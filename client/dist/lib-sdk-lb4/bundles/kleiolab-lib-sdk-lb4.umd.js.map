{"version":3,"file":"kleiolab-lib-sdk-lb4.umd.js","sources":["ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/configuration.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api.module.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/encoder.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/variables.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/account.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/analysis.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/contentTree.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/datChunk.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/datChunkController.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/datColumn.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/datDigital.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/datNamespace.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/dfhClassController.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/dfhLabel.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/dfhProfile.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/dfhPropertyController.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/factoidController.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/importTableController.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/infLanguage.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/infPersistentItem.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/infPlace.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/infStatement.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/infTemporalEntity.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/infTextProperty.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/pingController.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/proClassFieldConfig.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/proDfhClassProjRel.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/proDfhProfileProjRel.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/proInfoProjRel.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/proProject.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/proTextProperty.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/projectConfiguration.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/pubAccount.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/ramList.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/schemaObject.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/subfieldPageController.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/sysClassField.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/sysClassHasTypeProperty.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/sysSystemRelevantClass.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/sysSystemType.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/systemConfiguration.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/table.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/warEntityPreviewController.service.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/api/api.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/analysisDefinition.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/analysisMapRequest.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/analysisMapResponse.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/analysisTableCell.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/analysisTableCellValue.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/analysisTableExportRequest.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/analysisTableExportResponse.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/analysisTableRequest.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/analysisTableResponse.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/analysisTimeChartRequest.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/analysisTimeChartResponse.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/chartLine.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/chartLinePoint.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/classConfig.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/classesIndex.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/colDef.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/czmlSpatialValue.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/datChunk.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/datChunkFields.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/datChunkFilter.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/datChunkIncludeFilterItems.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/datChunkScopeFilter.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/datChunkWithRelations.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/datClassColumnMapping.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/datColumn.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/datDigital.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/datDigitalWithRelations.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/datNamespace.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/datNamespaceWithRelations.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/datObject.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/datTextProperty.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/dfhApiProfile.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/dfhClass.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/dfhLabel.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/dfhObject.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/dfhProfile.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/dfhProperty.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/dimensionValueObjectType.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/entityLabelConfig.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/entitySearchHit.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/factoidEntity.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/factoidStatement.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/geoEntityMapAndTimeCont.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/getEntityLabelConfigResponse.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/getFactoidsFromEntityResponse.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/getTablePageOptions.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/gvLoadSubentitySubfieldPageReq.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/gvLoadSubfieldPageReq.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/gvPaginationAlternativeLeafItemsReq.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/gvPaginationObject.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/gvPaginationStatementFilter.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/gvSchemaObject.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/gvSubentitySubfieldPage.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/gvSubentitySubfieldType.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/gvSubfieldId.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/gvSubfieldPage.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/gvSubfieldPageInfo.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/gvSubfieldPageScope.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/gvSubfieldType.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/header.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/httpErrorModel.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/httpErrorObjectModel.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/importTable.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/importTableResponse.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/infAppellation.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/infDimension.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/infLangString.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/infLanguage.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/infObject.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/infPersistentItem.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/infPlace.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/infStatement.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/infStatementWithRelations.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/infTemporalEntity.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/infTextProperty.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/infTimePrimitive.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/labelPart.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/labelPartField.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/loginRequest.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/loginResponse.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/mapTemporalData.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/newProDfhClassProjRel.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/pingResponse.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/proAnalysis.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/proClassFieldConfig.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/proDfhClassProjRel.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/proDfhProfileProjRel.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/proEntityLabelConfig.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/proInfoProjRel.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/proInfoProjRelWithRelations.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/proObject.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/proProject.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/proTextProperty.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/projectPongRequest.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/pubAccount.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/queryDefinition.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/queryFilter.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/queryFilterData.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/queryPathSegment.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/queryPathSegmentData.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/relatedProfile.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/resetPasswordRequest.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/responseWithMsg.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/role.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/schemaObject.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/searchExistingRelatedStatement.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/searchExistingRelatedStatementFilter.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/signupRequest.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/signupResponse.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/signupValidationError.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/sysClassField.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/sysClassHasTypeProperty.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/sysConfigFieldDisplay.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/sysConfigFieldPosition.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/sysConfigFieldsByProperty.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/sysConfigFieldsBySourceClass.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/sysConfigSpecialFields.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/sysConfigValue.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/sysConfigValueObjectType.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/sysObject.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/sysSystemRelevantClass.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/sysSystemType.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/tColFilter.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/tColFilterNum.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/tColFilterTxt.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/tColFilters.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/tabCell.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/tabRow.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/tableCell.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/tablePageResponse.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/tableRow.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/timeChartContLine.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/timeChartContQueryDef.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/timeChartContVisualSettings.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/timeCzmlValue.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/timePrimitiveWithCal.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/warEntityPreview.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/warEntityPreviewPaginatedByPkReq.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/warEntityPreviewSearchExistingReq.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/warEntityPreviewTimeSpan.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/warEntityPreviewWithFulltext.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/warObject.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/warStatementDimensionVT.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/warStatementGeoJson.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/warStatementGeometryVT.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/warStatementLangStringVT.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/warStatementLanguageVT.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/warStatementObjectValue.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/warStatementStringVT.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/warStatementTimePrimitiveVT.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/warStatementTimePrimitiveVTPart.ts","ng://@kleiolab/lib-sdk-lb4/lib/sdk-lb4/model/wareEntityPreviewPage.ts"],"sourcesContent":["import { HttpParameterCodec } from '@angular/common/http';\n\nexport interface ConfigurationParameters {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class Configuration {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n\n        // init default accesstoken credential\n        if (!this.credentials['accesstoken']) {\n            this.credentials['accesstoken'] = () => {\n                return this.apiKeys['accesstoken'] || this.apiKeys['authorization'];\n            };\n        }\n\n        // init default jwt credential\n        if (!this.credentials['jwt']) {\n            this.credentials['jwt'] = () => {\n                return typeof this.accessToken === 'function'\n                    ? this.accessToken()\n                    : this.accessToken;\n            };\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { AccountService } from './api/account.service';\nimport { AnalysisService } from './api/analysis.service';\nimport { ContentTreeService } from './api/contentTree.service';\nimport { DatChunkService } from './api/datChunk.service';\nimport { DatChunkControllerService } from './api/datChunkController.service';\nimport { DatColumnService } from './api/datColumn.service';\nimport { DatDigitalService } from './api/datDigital.service';\nimport { DatNamespaceService } from './api/datNamespace.service';\nimport { DfhClassControllerService } from './api/dfhClassController.service';\nimport { DfhLabelService } from './api/dfhLabel.service';\nimport { DfhProfileService } from './api/dfhProfile.service';\nimport { DfhPropertyControllerService } from './api/dfhPropertyController.service';\nimport { FactoidControllerService } from './api/factoidController.service';\nimport { ImportTableControllerService } from './api/importTableController.service';\nimport { InfLanguageService } from './api/infLanguage.service';\nimport { InfPersistentItemService } from './api/infPersistentItem.service';\nimport { InfPlaceService } from './api/infPlace.service';\nimport { InfStatementService } from './api/infStatement.service';\nimport { InfTemporalEntityService } from './api/infTemporalEntity.service';\nimport { InfTextPropertyService } from './api/infTextProperty.service';\nimport { PingControllerService } from './api/pingController.service';\nimport { ProClassFieldConfigService } from './api/proClassFieldConfig.service';\nimport { ProDfhClassProjRelService } from './api/proDfhClassProjRel.service';\nimport { ProDfhProfileProjRelService } from './api/proDfhProfileProjRel.service';\nimport { ProInfoProjRelService } from './api/proInfoProjRel.service';\nimport { ProProjectService } from './api/proProject.service';\nimport { ProTextPropertyService } from './api/proTextProperty.service';\nimport { ProjectConfigurationService } from './api/projectConfiguration.service';\nimport { PubAccountService } from './api/pubAccount.service';\nimport { RamListService } from './api/ramList.service';\nimport { SchemaObjectService } from './api/schemaObject.service';\nimport { SubfieldPageControllerService } from './api/subfieldPageController.service';\nimport { SysClassFieldService } from './api/sysClassField.service';\nimport { SysClassHasTypePropertyService } from './api/sysClassHasTypeProperty.service';\nimport { SysSystemRelevantClassService } from './api/sysSystemRelevantClass.service';\nimport { SysSystemTypeService } from './api/sysSystemType.service';\nimport { SystemConfigurationService } from './api/systemConfiguration.service';\nimport { TableService } from './api/table.service';\nimport { WarEntityPreviewControllerService } from './api/warEntityPreviewController.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: []\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { HttpErrorModel } from '../model/models';\nimport { LoginRequest } from '../model/models';\nimport { LoginResponse } from '../model/models';\nimport { ResetPasswordRequest } from '../model/models';\nimport { ResponseWithMsg } from '../model/models';\nimport { SignupRequest } from '../model/models';\nimport { SignupResponse } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param email \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public accountControllerForgotPassword(email: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<ResponseWithMsg>;\n    public accountControllerForgotPassword(email: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<ResponseWithMsg>>;\n    public accountControllerForgotPassword(email: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<ResponseWithMsg>>;\n    public accountControllerForgotPassword(email: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (email === null || email === undefined) {\n            throw new Error('Required parameter email was null or undefined when calling accountControllerForgotPassword.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (email !== undefined && email !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>email, 'email');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<ResponseWithMsg>(`${this.configuration.basePath}/forgot-password`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Login with existing account\n     * @param loginRequest \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public accountControllerLogin(loginRequest?: LoginRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<LoginResponse>;\n    public accountControllerLogin(loginRequest?: LoginRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<LoginResponse>>;\n    public accountControllerLogin(loginRequest?: LoginRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<LoginResponse>>;\n    public accountControllerLogin(loginRequest?: LoginRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<LoginResponse>(`${this.configuration.basePath}/login`,\n            loginRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param resetPasswordRequest \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public accountControllerResetPassword(resetPasswordRequest?: ResetPasswordRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<ResponseWithMsg>;\n    public accountControllerResetPassword(resetPasswordRequest?: ResetPasswordRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<ResponseWithMsg>>;\n    public accountControllerResetPassword(resetPasswordRequest?: ResetPasswordRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<ResponseWithMsg>>;\n    public accountControllerResetPassword(resetPasswordRequest?: ResetPasswordRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<ResponseWithMsg>(`${this.configuration.basePath}/reset-password`,\n            resetPasswordRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Sign up / register new account\n     * @param signupRequest \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public accountControllerSignUp(signupRequest?: SignupRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<SignupResponse>;\n    public accountControllerSignUp(signupRequest?: SignupRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<SignupResponse>>;\n    public accountControllerSignUp(signupRequest?: SignupRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<SignupResponse>>;\n    public accountControllerSignUp(signupRequest?: SignupRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<SignupResponse>(`${this.configuration.basePath}/signup`,\n            signupRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Verifies email address. Usually needed to complete registration of new account.\n     * @param accountId \n     * @param verificationToken \n     * @param redirectOnSuccess \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public accountControllerVerifyEmail(accountId?: number, verificationToken?: string, redirectOnSuccess?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public accountControllerVerifyEmail(accountId?: number, verificationToken?: string, redirectOnSuccess?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public accountControllerVerifyEmail(accountId?: number, verificationToken?: string, redirectOnSuccess?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public accountControllerVerifyEmail(accountId?: number, verificationToken?: string, redirectOnSuccess?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (accountId !== undefined && accountId !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>accountId, 'accountId');\n        }\n        if (verificationToken !== undefined && verificationToken !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>verificationToken, 'verificationToken');\n        }\n        if (redirectOnSuccess !== undefined && redirectOnSuccess !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>redirectOnSuccess, 'redirectOnSuccess');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/verify-email`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Decodes the given token and returns the user id.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public accountControllerWhoAmI(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<string>;\n    public accountControllerWhoAmI(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<string>>;\n    public accountControllerWhoAmI(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<string>>;\n    public accountControllerWhoAmI(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<string>(`${this.configuration.basePath}/whoAmI`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { AnalysisMapRequest } from '../model/models';\nimport { AnalysisMapResponse } from '../model/models';\nimport { AnalysisTableExportRequest } from '../model/models';\nimport { AnalysisTableExportResponse } from '../model/models';\nimport { AnalysisTableRequest } from '../model/models';\nimport { AnalysisTableResponse } from '../model/models';\nimport { AnalysisTimeChartRequest } from '../model/models';\nimport { AnalysisTimeChartResponse } from '../model/models';\nimport { GvSchemaObject } from '../model/models';\nimport { ProAnalysis } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AnalysisService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param pkProject \n     * @param requestBody \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public analysisControllerBulkDelete(pkProject?: number, requestBody?: Array<number>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public analysisControllerBulkDelete(pkProject?: number, requestBody?: Array<number>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public analysisControllerBulkDelete(pkProject?: number, requestBody?: Array<number>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public analysisControllerBulkDelete(pkProject?: number, requestBody?: Array<number>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<any>(`${this.configuration.basePath}/analysis/bulk-delete`,\n            requestBody,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update or insert array of ProAnalysis of a project.\n     * @param pkProject \n     * @param proAnalysis \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public analysisControllerBulkUpsert(pkProject?: number, proAnalysis?: Array<ProAnalysis>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GvSchemaObject>;\n    public analysisControllerBulkUpsert(pkProject?: number, proAnalysis?: Array<ProAnalysis>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GvSchemaObject>>;\n    public analysisControllerBulkUpsert(pkProject?: number, proAnalysis?: Array<ProAnalysis>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GvSchemaObject>>;\n    public analysisControllerBulkUpsert(pkProject?: number, proAnalysis?: Array<ProAnalysis>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<GvSchemaObject>(`${this.configuration.basePath}/analysis/bulk-upsert`,\n            proAnalysis,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a ProAnalysis version. If no version specified, latest version is returned.\n     * @param pkProject \n     * @param pkEntity \n     * @param version \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public analysisControllerGetVersion(pkProject?: number, pkEntity?: number, version?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GvSchemaObject>;\n    public analysisControllerGetVersion(pkProject?: number, pkEntity?: number, version?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GvSchemaObject>>;\n    public analysisControllerGetVersion(pkProject?: number, pkEntity?: number, version?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GvSchemaObject>>;\n    public analysisControllerGetVersion(pkProject?: number, pkEntity?: number, version?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkEntity !== undefined && pkEntity !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkEntity, 'pkEntity');\n        }\n        if (version !== undefined && version !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>version, 'version');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GvSchemaObject>(`${this.configuration.basePath}/analysis/get-version`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Run the analysis of type map\n     * @param analysisMapRequest \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public analysisControllerMapRun(analysisMapRequest?: AnalysisMapRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<AnalysisMapResponse>;\n    public analysisControllerMapRun(analysisMapRequest?: AnalysisMapRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<AnalysisMapResponse>>;\n    public analysisControllerMapRun(analysisMapRequest?: AnalysisMapRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<AnalysisMapResponse>>;\n    public analysisControllerMapRun(analysisMapRequest?: AnalysisMapRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<AnalysisMapResponse>(`${this.configuration.basePath}/analysis/map-run`,\n            analysisMapRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all ProAnalysis of a project.\n     * @param pkProject \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public analysisControllerOfProject(pkProject: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GvSchemaObject>;\n    public analysisControllerOfProject(pkProject: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GvSchemaObject>>;\n    public analysisControllerOfProject(pkProject: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GvSchemaObject>>;\n    public analysisControllerOfProject(pkProject: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling analysisControllerOfProject.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GvSchemaObject>(`${this.configuration.basePath}/analysis/of-project`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Export the analysis of type table\n     * @param analysisTableExportRequest \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public analysisControllerTableExport(analysisTableExportRequest?: AnalysisTableExportRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<AnalysisTableExportResponse>;\n    public analysisControllerTableExport(analysisTableExportRequest?: AnalysisTableExportRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<AnalysisTableExportResponse>>;\n    public analysisControllerTableExport(analysisTableExportRequest?: AnalysisTableExportRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<AnalysisTableExportResponse>>;\n    public analysisControllerTableExport(analysisTableExportRequest?: AnalysisTableExportRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<AnalysisTableExportResponse>(`${this.configuration.basePath}/analysis/table-export`,\n            analysisTableExportRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Run the analysis of type table\n     * @param analysisTableRequest \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public analysisControllerTableRun(analysisTableRequest?: AnalysisTableRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<AnalysisTableResponse>;\n    public analysisControllerTableRun(analysisTableRequest?: AnalysisTableRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<AnalysisTableResponse>>;\n    public analysisControllerTableRun(analysisTableRequest?: AnalysisTableRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<AnalysisTableResponse>>;\n    public analysisControllerTableRun(analysisTableRequest?: AnalysisTableRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<AnalysisTableResponse>(`${this.configuration.basePath}/analysis/table-run`,\n            analysisTableRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Run the analysis of type time-chart\n     * @param analysisTimeChartRequest \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public analysisControllerTimeChartRun(analysisTimeChartRequest?: AnalysisTimeChartRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<AnalysisTimeChartResponse>;\n    public analysisControllerTimeChartRun(analysisTimeChartRequest?: AnalysisTimeChartRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<AnalysisTimeChartResponse>>;\n    public analysisControllerTimeChartRun(analysisTimeChartRequest?: AnalysisTimeChartRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<AnalysisTimeChartResponse>>;\n    public analysisControllerTimeChartRun(analysisTimeChartRequest?: AnalysisTimeChartRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<AnalysisTimeChartResponse>(`${this.configuration.basePath}/analysis/time-chart-run`,\n            analysisTimeChartRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { GvSchemaObject } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContentTreeService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Get SchemaObject with everything needed to build the tree of the content of an F2 Expression.\n     * @param pkProject Primary key of the project\n     * @param pkExpressionEntity Primary Key of the F2 Expression entity for which the content tree is needed.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public contentTreeControllerGetContentTree(pkProject: number, pkExpressionEntity: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GvSchemaObject>;\n    public contentTreeControllerGetContentTree(pkProject: number, pkExpressionEntity: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GvSchemaObject>>;\n    public contentTreeControllerGetContentTree(pkProject: number, pkExpressionEntity: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GvSchemaObject>>;\n    public contentTreeControllerGetContentTree(pkProject: number, pkExpressionEntity: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling contentTreeControllerGetContentTree.');\n        }\n        if (pkExpressionEntity === null || pkExpressionEntity === undefined) {\n            throw new Error('Required parameter pkExpressionEntity was null or undefined when calling contentTreeControllerGetContentTree.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkExpressionEntity !== undefined && pkExpressionEntity !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkExpressionEntity, 'pkExpressionEntity');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GvSchemaObject>(`${this.configuration.basePath}/get-content-tree`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { DatChunk } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DatChunkService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Find a model instance by {{id}} from the data source.\n     * @param id Model id\n     * @param filter Filter defining fields and include - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public datChunkFindById(id: string, filter?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<DatChunk>;\n    public datChunkFindById(id: string, filter?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<DatChunk>>;\n    public datChunkFindById(id: string, filter?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<DatChunk>>;\n    public datChunkFindById(id: string, filter?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling datChunkFindById.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<DatChunk>(`${this.configuration.basePath}/lb3-api/DatChunks/${encodeURIComponent(String(id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the chunks related to the digital, with their statements.\n     * @param pkProject Primary key of the project\n     * @param pkDigital Primary key of the digital\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public datChunkOfDigital(pkProject: number, pkDigital: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<DatChunk>>;\n    public datChunkOfDigital(pkProject: number, pkDigital: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<DatChunk>>>;\n    public datChunkOfDigital(pkProject: number, pkDigital: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<DatChunk>>>;\n    public datChunkOfDigital(pkProject: number, pkDigital: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling datChunkOfDigital.');\n        }\n        if (pkDigital === null || pkDigital === undefined) {\n            throw new Error('Required parameter pkDigital was null or undefined when calling datChunkOfDigital.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkDigital !== undefined && pkDigital !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkDigital, 'pkDigital');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<DatChunk>>(`${this.configuration.basePath}/lb3-api/DatChunks/of-digital`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { DatChunkFilter } from '../model/models';\nimport { DatChunkWithRelations } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DatChunkControllerService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param id \n     * @param filter \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public datChunkControllerFindById(id: number, filter?: DatChunkFilter, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<DatChunkWithRelations>;\n    public datChunkControllerFindById(id: number, filter?: DatChunkFilter, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<DatChunkWithRelations>>;\n    public datChunkControllerFindById(id: number, filter?: DatChunkFilter, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<DatChunkWithRelations>>;\n    public datChunkControllerFindById(id: number, filter?: DatChunkFilter, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling datChunkControllerFindById.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<DatChunkWithRelations>(`${this.configuration.basePath}/dat-chunks/${encodeURIComponent(String(id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { DatColumn } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DatColumnService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Get the columns related to the digital (table).\n     * @param pkProject Primary key of the project\n     * @param pkDigital Primary key of the digital\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public datColumnOfDigital(pkProject: number, pkDigital: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<DatColumn>>;\n    public datColumnOfDigital(pkProject: number, pkDigital: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<DatColumn>>>;\n    public datColumnOfDigital(pkProject: number, pkDigital: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<DatColumn>>>;\n    public datColumnOfDigital(pkProject: number, pkDigital: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling datColumnOfDigital.');\n        }\n        if (pkDigital === null || pkDigital === undefined) {\n            throw new Error('Required parameter pkDigital was null or undefined when calling datColumnOfDigital.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkDigital !== undefined && pkDigital !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkDigital, 'pkDigital');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<DatColumn>>(`${this.configuration.basePath}/lb3-api/DatColumns/of-digital`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { DatDigital } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DatDigitalService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Deletes instances of DatDigital.\n     * @param requestBody Array of Primary Key of DatDigitals\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public datDigitalBulkDelete(requestBody: Array<number>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<boolean>;\n    public datDigitalBulkDelete(requestBody: Array<number>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<boolean>>;\n    public datDigitalBulkDelete(requestBody: Array<number>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<boolean>>;\n    public datDigitalBulkDelete(requestBody: Array<number>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (requestBody === null || requestBody === undefined) {\n            throw new Error('Required parameter requestBody was null or undefined when calling datDigitalBulkDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<boolean>(`${this.configuration.basePath}/lb3-api/DatDigitals/delete-delete`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Creates or updates instances of DatDigital.\n     * @param pkNamespace Namespace\n     * @param datDigital Array DatDigital\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public datDigitalBulkUpsert(pkNamespace: number, datDigital: Array<DatDigital>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<DatDigital>;\n    public datDigitalBulkUpsert(pkNamespace: number, datDigital: Array<DatDigital>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<DatDigital>>;\n    public datDigitalBulkUpsert(pkNamespace: number, datDigital: Array<DatDigital>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<DatDigital>>;\n    public datDigitalBulkUpsert(pkNamespace: number, datDigital: Array<DatDigital>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkNamespace === null || pkNamespace === undefined) {\n            throw new Error('Required parameter pkNamespace was null or undefined when calling datDigitalBulkUpsert.');\n        }\n        if (datDigital === null || datDigital === undefined) {\n            throw new Error('Required parameter datDigital was null or undefined when calling datDigitalBulkUpsert.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkNamespace !== undefined && pkNamespace !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkNamespace, 'pkNamespace');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<DatDigital>(`${this.configuration.basePath}/lb3-api/DatDigitals/bulk-upsert`,\n            datDigital,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find a model instance by {{id}} from the data source.\n     * @param id Model id\n     * @param filter Filter defining fields and include - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public datDigitalFindById(id: string, filter?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<DatDigital>;\n    public datDigitalFindById(id: string, filter?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<DatDigital>>;\n    public datDigitalFindById(id: string, filter?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<DatDigital>>;\n    public datDigitalFindById(id: string, filter?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling datDigitalFindById.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<DatDigital>(`${this.configuration.basePath}/lb3-api/DatDigitals/${encodeURIComponent(String(id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get page of table\n     * @param pkProject Pk of the project.\n     * @param pkEntity Pk of the table digital.\n     * @param body options\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public datDigitalGetTablePage(pkProject: number, pkEntity: number, body?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<object>>;\n    public datDigitalGetTablePage(pkProject: number, pkEntity: number, body?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<object>>>;\n    public datDigitalGetTablePage(pkProject: number, pkEntity: number, body?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<object>>>;\n    public datDigitalGetTablePage(pkProject: number, pkEntity: number, body?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling datDigitalGetTablePage.');\n        }\n        if (pkEntity === null || pkEntity === undefined) {\n            throw new Error('Required parameter pkEntity was null or undefined when calling datDigitalGetTablePage.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkEntity !== undefined && pkEntity !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkEntity, 'pkEntity');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Array<object>>(`${this.configuration.basePath}/lb3-api/DatDigitals/getTablePage`,\n            body,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Finds the version of given digital. If no version specified, latest is returned.\n     * @param pkEntity Primary Key of the digital object (pk_entity)\n     * @param entityVersion Primary Key of the digital object (entity_version)\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public datDigitalGetVersion(pkEntity: number, entityVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<DatDigital>>;\n    public datDigitalGetVersion(pkEntity: number, entityVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<DatDigital>>>;\n    public datDigitalGetVersion(pkEntity: number, entityVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<DatDigital>>>;\n    public datDigitalGetVersion(pkEntity: number, entityVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkEntity === null || pkEntity === undefined) {\n            throw new Error('Required parameter pkEntity was null or undefined when calling datDigitalGetVersion.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkEntity !== undefined && pkEntity !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkEntity, 'pkEntity');\n        }\n        if (entityVersion !== undefined && entityVersion !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>entityVersion, 'entityVersion');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<DatDigital>>(`${this.configuration.basePath}/lb3-api/DatDigitals/get-version`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { DatNamespace } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DatNamespaceService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Finds namespaces of a project.\n     * @param pkProject Key of the Project for which the namespaces should be found.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public datNamespaceByProject(pkProject: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<DatNamespace>>;\n    public datNamespaceByProject(pkProject: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<DatNamespace>>>;\n    public datNamespaceByProject(pkProject: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<DatNamespace>>>;\n    public datNamespaceByProject(pkProject: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling datNamespaceByProject.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<DatNamespace>>(`${this.configuration.basePath}/lb3-api/DatNamespaces/find-by-project`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find all instances of the model matched by filter from the data source.\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (&#x60;{\\&quot;where\\&quot;:{\\&quot;something\\&quot;:\\&quot;value\\&quot;}}&#x60;).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public datNamespaceFind(filter?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<DatNamespace>>;\n    public datNamespaceFind(filter?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<DatNamespace>>>;\n    public datNamespaceFind(filter?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<DatNamespace>>>;\n    public datNamespaceFind(filter?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<DatNamespace>>(`${this.configuration.basePath}/lb3-api/DatNamespaces`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find a model instance by {{id}} from the data source.\n     * @param id Model id\n     * @param filter Filter defining fields and include - must be a JSON-encoded string ({\\&quot;something\\&quot;:\\&quot;value\\&quot;})\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public datNamespaceFindById(id: string, filter?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<DatNamespace>;\n    public datNamespaceFindById(id: string, filter?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<DatNamespace>>;\n    public datNamespaceFindById(id: string, filter?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<DatNamespace>>;\n    public datNamespaceFindById(id: string, filter?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling datNamespaceFindById.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<DatNamespace>(`${this.configuration.basePath}/lb3-api/DatNamespaces/${encodeURIComponent(String(id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { DfhClass } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DfhClassControllerService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param pkProject \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public dfhClassControllerOfProject(pkProject?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<DfhClass>>;\n    public dfhClassControllerOfProject(pkProject?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<DfhClass>>>;\n    public dfhClassControllerOfProject(pkProject?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<DfhClass>>>;\n    public dfhClassControllerOfProject(pkProject?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<DfhClass>>(`${this.configuration.basePath}/classes/of-project`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { DfhLabel } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DfhLabelService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Get all dfh labels needed by the given project.\n     * @param pkProject Project pk\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public dfhLabelOfProject(pkProject?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<DfhLabel>>;\n    public dfhLabelOfProject(pkProject?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<DfhLabel>>>;\n    public dfhLabelOfProject(pkProject?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<DfhLabel>>>;\n    public dfhLabelOfProject(pkProject?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<DfhLabel>>(`${this.configuration.basePath}/lb3-api/DfhLabels/of-project`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { DfhProfile } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DfhProfileService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Deavtivates an OntoMe profile for a Geovistory project.\n     * @param pkProject Geovistory project for which the profile should be deactivated\n     * @param pkProfile OntoMe profile to deactivate for the given Geovistory project\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public dfhProfileDeactivateProfileForProject(pkProject: number, pkProfile: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<object>>;\n    public dfhProfileDeactivateProfileForProject(pkProject: number, pkProfile: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<object>>>;\n    public dfhProfileDeactivateProfileForProject(pkProject: number, pkProfile: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<object>>>;\n    public dfhProfileDeactivateProfileForProject(pkProject: number, pkProfile: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling dfhProfileDeactivateProfileForProject.');\n        }\n        if (pkProfile === null || pkProfile === undefined) {\n            throw new Error('Required parameter pkProfile was null or undefined when calling dfhProfileDeactivateProfileForProject.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkProfile !== undefined && pkProfile !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProfile, 'pkProfile');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Array<object>>(`${this.configuration.basePath}/lb3-api/DfhProfiles/deactivate-ontome-profile-for-geovistory-project`,\n            null,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Creates an activation report for the given OntoMe profile and the given Geovistory project.\n     * @param pkProject Geovistory project for which the activation report should be created\n     * @param pkProfile OntoMe profile for which the activation report should be created\n     * @param requestedLanguage Language ISO Code for the preferred language of labels and descriptions to be loaded. Default language is \\&#39;en\\&#39;.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public dfhProfileGetActivationReport(pkProject: number, pkProfile: number, requestedLanguage?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<object>>;\n    public dfhProfileGetActivationReport(pkProject: number, pkProfile: number, requestedLanguage?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<object>>>;\n    public dfhProfileGetActivationReport(pkProject: number, pkProfile: number, requestedLanguage?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<object>>>;\n    public dfhProfileGetActivationReport(pkProject: number, pkProfile: number, requestedLanguage?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling dfhProfileGetActivationReport.');\n        }\n        if (pkProfile === null || pkProfile === undefined) {\n            throw new Error('Required parameter pkProfile was null or undefined when calling dfhProfileGetActivationReport.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkProfile !== undefined && pkProfile !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProfile, 'pkProfile');\n        }\n        if (requestedLanguage !== undefined && requestedLanguage !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>requestedLanguage, 'requestedLanguage');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Array<object>>(`${this.configuration.basePath}/lb3-api/DfhProfiles/get-activation-report`,\n            null,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Creates an deactivation report for the given OntoMe profile and the given Geovistory project.\n     * @param pkProject Geovistory project for which the deactivation report should be created\n     * @param pkProfile OntoMe profile for which the deactivation report should be created\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public dfhProfileGetDeactivationReport(pkProject: number, pkProfile: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<object>>;\n    public dfhProfileGetDeactivationReport(pkProject: number, pkProfile: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<object>>>;\n    public dfhProfileGetDeactivationReport(pkProject: number, pkProfile: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<object>>>;\n    public dfhProfileGetDeactivationReport(pkProject: number, pkProfile: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling dfhProfileGetDeactivationReport.');\n        }\n        if (pkProfile === null || pkProfile === undefined) {\n            throw new Error('Required parameter pkProfile was null or undefined when calling dfhProfileGetDeactivationReport.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkProfile !== undefined && pkProfile !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProfile, 'pkProfile');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Array<object>>(`${this.configuration.basePath}/lb3-api/DfhProfiles/get-deactivation-report`,\n            null,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all profiles that are used by the given project.\n     * @param pkProject Project pk\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public dfhProfileOfProject(pkProject?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<DfhProfile>>;\n    public dfhProfileOfProject(pkProject?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<DfhProfile>>>;\n    public dfhProfileOfProject(pkProject?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<DfhProfile>>>;\n    public dfhProfileOfProject(pkProject?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<DfhProfile>>(`${this.configuration.basePath}/lb3-api/DfhProfiles/of-project`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Pulls profile data including classes and properties from OntoMe andÂ adds profile to project.\n     * @param pkProject Geovistory project to which the OntoMe profile should be added\n     * @param pkProfile OntoMe profile that should be added\n     * @param requestedLanguage Language ISO Code for the preferred language of labels and descriptions to be loaded. Default language is \\&#39;en\\&#39;.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public dfhProfileUpdateAndAddToProject(pkProject: number, pkProfile: number, requestedLanguage?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<object>>;\n    public dfhProfileUpdateAndAddToProject(pkProject: number, pkProfile: number, requestedLanguage?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<object>>>;\n    public dfhProfileUpdateAndAddToProject(pkProject: number, pkProfile: number, requestedLanguage?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<object>>>;\n    public dfhProfileUpdateAndAddToProject(pkProject: number, pkProfile: number, requestedLanguage?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling dfhProfileUpdateAndAddToProject.');\n        }\n        if (pkProfile === null || pkProfile === undefined) {\n            throw new Error('Required parameter pkProfile was null or undefined when calling dfhProfileUpdateAndAddToProject.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkProfile !== undefined && pkProfile !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProfile, 'pkProfile');\n        }\n        if (requestedLanguage !== undefined && requestedLanguage !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>requestedLanguage, 'requestedLanguage');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Array<object>>(`${this.configuration.basePath}/lb3-api/DfhProfiles/update-from-ontome-and-add-to-project`,\n            null,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Pulls profile data including classes and properties from OntoMe and updates profile data in geovistory.\n     * @param pkProfile OntoMe profile that should be added\n     * @param requestedLanguage Language ISO Code for the preferred language of labels and descriptions to be loaded. Default language is \\&#39;en\\&#39;.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public dfhProfileUpdateFromOntoMe(pkProfile: number, requestedLanguage?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<object>>;\n    public dfhProfileUpdateFromOntoMe(pkProfile: number, requestedLanguage?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<object>>>;\n    public dfhProfileUpdateFromOntoMe(pkProfile: number, requestedLanguage?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<object>>>;\n    public dfhProfileUpdateFromOntoMe(pkProfile: number, requestedLanguage?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProfile === null || pkProfile === undefined) {\n            throw new Error('Required parameter pkProfile was null or undefined when calling dfhProfileUpdateFromOntoMe.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProfile !== undefined && pkProfile !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProfile, 'pkProfile');\n        }\n        if (requestedLanguage !== undefined && requestedLanguage !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>requestedLanguage, 'requestedLanguage');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Array<object>>(`${this.configuration.basePath}/lb3-api/DfhProfiles/update-from-ontome`,\n            null,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { DfhProperty } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DfhPropertyControllerService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param pkProject \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public dfhPropertyControllerOfProject(pkProject?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<DfhProperty>>;\n    public dfhPropertyControllerOfProject(pkProject?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<DfhProperty>>>;\n    public dfhPropertyControllerOfProject(pkProject?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<DfhProperty>>>;\n    public dfhPropertyControllerOfProject(pkProject?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<DfhProperty>>(`${this.configuration.basePath}/properties/of-project`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { GetFactoidsFromEntityResponse } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FactoidControllerService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Fetch all factoids about an entity\n     * @param pkProject \n     * @param pkEntity \n     * @param factoidNumber \n     * @param page \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public factoidControllerFactoidsFromEntity(pkProject: string, pkEntity: string, factoidNumber: string, page: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GetFactoidsFromEntityResponse>;\n    public factoidControllerFactoidsFromEntity(pkProject: string, pkEntity: string, factoidNumber: string, page: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GetFactoidsFromEntityResponse>>;\n    public factoidControllerFactoidsFromEntity(pkProject: string, pkEntity: string, factoidNumber: string, page: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GetFactoidsFromEntityResponse>>;\n    public factoidControllerFactoidsFromEntity(pkProject: string, pkEntity: string, factoidNumber: string, page: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling factoidControllerFactoidsFromEntity.');\n        }\n        if (pkEntity === null || pkEntity === undefined) {\n            throw new Error('Required parameter pkEntity was null or undefined when calling factoidControllerFactoidsFromEntity.');\n        }\n        if (factoidNumber === null || factoidNumber === undefined) {\n            throw new Error('Required parameter factoidNumber was null or undefined when calling factoidControllerFactoidsFromEntity.');\n        }\n        if (page === null || page === undefined) {\n            throw new Error('Required parameter page was null or undefined when calling factoidControllerFactoidsFromEntity.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkEntity !== undefined && pkEntity !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkEntity, 'pkEntity');\n        }\n        if (factoidNumber !== undefined && factoidNumber !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>factoidNumber, 'factoidNumber');\n        }\n        if (page !== undefined && page !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>page, 'page');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GetFactoidsFromEntityResponse>(`${this.configuration.basePath}/get-factoids-from-entity`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { ImportTable } from '../model/models';\nimport { ImportTableResponse } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImportTableControllerService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param pkNamespace \n     * @param importTable \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public importTableControllerImportTable(pkNamespace?: number, importTable?: ImportTable, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<ImportTableResponse>;\n    public importTableControllerImportTable(pkNamespace?: number, importTable?: ImportTable, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<ImportTableResponse>>;\n    public importTableControllerImportTable(pkNamespace?: number, importTable?: ImportTable, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<ImportTableResponse>>;\n    public importTableControllerImportTable(pkNamespace?: number, importTable?: ImportTable, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkNamespace !== undefined && pkNamespace !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkNamespace, 'pkNamespace');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<ImportTableResponse>(`${this.configuration.basePath}/import-table`,\n            importTable,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { InfLanguage } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InfLanguageService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Find all instances of the model matched by filter from the data source.\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (&#x60;{\\&quot;where\\&quot;:{\\&quot;something\\&quot;:\\&quot;value\\&quot;}}&#x60;).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infLanguageFind(filter?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<InfLanguage>>;\n    public infLanguageFind(filter?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<InfLanguage>>>;\n    public infLanguageFind(filter?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<InfLanguage>>>;\n    public infLanguageFind(filter?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<InfLanguage>>(`${this.configuration.basePath}/lb3-api/InfLanguages`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Perform a ranked search on languages by search string.\n     * @param queryString \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infLanguageQueryByString(queryString?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<InfLanguage>>;\n    public infLanguageQueryByString(queryString?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<InfLanguage>>>;\n    public infLanguageQueryByString(queryString?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<InfLanguage>>>;\n    public infLanguageQueryByString(queryString?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (queryString !== undefined && queryString !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>queryString, 'queryString');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<InfLanguage>>(`${this.configuration.basePath}/lb3-api/InfLanguages/query-by-string`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { InfPersistentItem } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InfPersistentItemService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Find or create many information persistent items.\n     * @param pkProject Pk of the project\n     * @param infPersistentItem data\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infPersistentItemFindOrCreateInfPersistentItems(pkProject: number, infPersistentItem: Array<InfPersistentItem>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<InfPersistentItem>>;\n    public infPersistentItemFindOrCreateInfPersistentItems(pkProject: number, infPersistentItem: Array<InfPersistentItem>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<InfPersistentItem>>>;\n    public infPersistentItemFindOrCreateInfPersistentItems(pkProject: number, infPersistentItem: Array<InfPersistentItem>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<InfPersistentItem>>>;\n    public infPersistentItemFindOrCreateInfPersistentItems(pkProject: number, infPersistentItem: Array<InfPersistentItem>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling infPersistentItemFindOrCreateInfPersistentItems.');\n        }\n        if (infPersistentItem === null || infPersistentItem === undefined) {\n            throw new Error('Required parameter infPersistentItem was null or undefined when calling infPersistentItemFindOrCreateInfPersistentItems.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pk_project');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Array<InfPersistentItem>>(`${this.configuration.basePath}/lb3-api/InfPersistentItems/find-or-create-many`,\n            infPersistentItem,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get only miminal properties of persistent item.\n     * @param pkProject Pk of the project.\n     * @param pkEntity Pk of the entity.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infPersistentItemOwnProperties(pkProject: number, pkEntity: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<object>;\n    public infPersistentItemOwnProperties(pkProject: number, pkEntity: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<object>>;\n    public infPersistentItemOwnProperties(pkProject: number, pkEntity: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<object>>;\n    public infPersistentItemOwnProperties(pkProject: number, pkEntity: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling infPersistentItemOwnProperties.');\n        }\n        if (pkEntity === null || pkEntity === undefined) {\n            throw new Error('Required parameter pkEntity was null or undefined when calling infPersistentItemOwnProperties.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkEntity !== undefined && pkEntity !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkEntity, 'pkEntity');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<object>(`${this.configuration.basePath}/lb3-api/InfPersistentItems/own-properties`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find one type by pk_entityÂ with appellations and text properties.\n     * @param pkProject Primary Key of Project\n     * @param pkEntity Primary Key of the type. Provide this if you want to query one specific type.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infPersistentItemTypeNested(pkProject: number, pkEntity: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<InfPersistentItem>;\n    public infPersistentItemTypeNested(pkProject: number, pkEntity: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<InfPersistentItem>>;\n    public infPersistentItemTypeNested(pkProject: number, pkEntity: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<InfPersistentItem>>;\n    public infPersistentItemTypeNested(pkProject: number, pkEntity: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling infPersistentItemTypeNested.');\n        }\n        if (pkEntity === null || pkEntity === undefined) {\n            throw new Error('Required parameter pkEntity was null or undefined when calling infPersistentItemTypeNested.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pk_project');\n        }\n        if (pkEntity !== undefined && pkEntity !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkEntity, 'pk_entity');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<InfPersistentItem>(`${this.configuration.basePath}/lb3-api/InfPersistentItems/type-nested`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find types of typed class and project. E.g. get the types for the class \\&#39;histC8 Geographical Place\\&#39; (pk_typed_class&#x3D;363) used in project (pk_project&#x3D;123)\n     * @param pkProject Primary Key of Project\n     * @param pkTypedClasses Primary Keyes of Typed Classes (e.g. pk of Geographical Place to get Geographical Place Types)\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infPersistentItemTypesOfClassesAndProject(pkProject: number, pkTypedClasses: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<InfPersistentItem>;\n    public infPersistentItemTypesOfClassesAndProject(pkProject: number, pkTypedClasses: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<InfPersistentItem>>;\n    public infPersistentItemTypesOfClassesAndProject(pkProject: number, pkTypedClasses: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<InfPersistentItem>>;\n    public infPersistentItemTypesOfClassesAndProject(pkProject: number, pkTypedClasses: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling infPersistentItemTypesOfClassesAndProject.');\n        }\n        if (pkTypedClasses === null || pkTypedClasses === undefined) {\n            throw new Error('Required parameter pkTypedClasses was null or undefined when calling infPersistentItemTypesOfClassesAndProject.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pk_project');\n        }\n        if (pkTypedClasses !== undefined && pkTypedClasses !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkTypedClasses, 'pk_typed_classes');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<InfPersistentItem>(`${this.configuration.basePath}/lb3-api/InfPersistentItems/types-of-classes-and-project`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a minimal nested object of all types in the project.\n     * @param pkProject Pk of the project.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infPersistentItemTypesOfProject(pkProject: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<InfPersistentItem>;\n    public infPersistentItemTypesOfProject(pkProject: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<InfPersistentItem>>;\n    public infPersistentItemTypesOfProject(pkProject: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<InfPersistentItem>>;\n    public infPersistentItemTypesOfProject(pkProject: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling infPersistentItemTypesOfProject.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<InfPersistentItem>(`${this.configuration.basePath}/lb3-api/InfPersistentItems/types-of-project`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { InfPlace } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InfPlaceService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Find all instances of the model matched by filter from the data source.\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (&#x60;{\\&quot;where\\&quot;:{\\&quot;something\\&quot;:\\&quot;value\\&quot;}}&#x60;).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infPlaceFind(filter?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<InfPlace>>;\n    public infPlaceFind(filter?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<InfPlace>>>;\n    public infPlaceFind(filter?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<InfPlace>>>;\n    public infPlaceFind(filter?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<InfPlace>>(`${this.configuration.basePath}/lb3-api/InfPlaces`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find or create a InfPlace and update the project relation if needed.\n     * @param projectId Id of the project\n     * @param infPlace data\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infPlaceFindOrCreatePlace(projectId: number, infPlace: InfPlace, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<InfPlace>;\n    public infPlaceFindOrCreatePlace(projectId: number, infPlace: InfPlace, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<InfPlace>>;\n    public infPlaceFindOrCreatePlace(projectId: number, infPlace: InfPlace, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<InfPlace>>;\n    public infPlaceFindOrCreatePlace(projectId: number, infPlace: InfPlace, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (projectId === null || projectId === undefined) {\n            throw new Error('Required parameter projectId was null or undefined when calling infPlaceFindOrCreatePlace.');\n        }\n        if (infPlace === null || infPlace === undefined) {\n            throw new Error('Required parameter infPlace was null or undefined when calling infPlaceFindOrCreatePlace.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (projectId !== undefined && projectId !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>projectId, 'projectId');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<InfPlace>(`${this.configuration.basePath}/lb3-api/InfPlaces/findOrCreate`,\n            infPlace,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { InfStatement } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InfStatementService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Get statements (with children) of given fkProperty and fkEntity from Repo that are not in project of given projectId.\n     * @param entityPk Key of the persistent item (fk_object_info)\n     * @param propertyPk Key of the property (fk_property)\n     * @param pkProject Id of the the current project\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infStatementAlternativesNotInProjectByEntityPk(entityPk: number, propertyPk: number, pkProject: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<InfStatement>>;\n    public infStatementAlternativesNotInProjectByEntityPk(entityPk: number, propertyPk: number, pkProject: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<InfStatement>>>;\n    public infStatementAlternativesNotInProjectByEntityPk(entityPk: number, propertyPk: number, pkProject: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<InfStatement>>>;\n    public infStatementAlternativesNotInProjectByEntityPk(entityPk: number, propertyPk: number, pkProject: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (entityPk === null || entityPk === undefined) {\n            throw new Error('Required parameter entityPk was null or undefined when calling infStatementAlternativesNotInProjectByEntityPk.');\n        }\n        if (propertyPk === null || propertyPk === undefined) {\n            throw new Error('Required parameter propertyPk was null or undefined when calling infStatementAlternativesNotInProjectByEntityPk.');\n        }\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling infStatementAlternativesNotInProjectByEntityPk.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (entityPk !== undefined && entityPk !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>entityPk, 'entityPk');\n        }\n        if (propertyPk !== undefined && propertyPk !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>propertyPk, 'propertyPk');\n        }\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<InfStatement>>(`${this.configuration.basePath}/lb3-api/InfStatements/alternatives-not-in-project-by-entity-pk`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get statements (with children) of given propertyPk and teEntPk from Repo that are not in project of given projectId.\n     * @param teEntPk Key of the temporal entity (fk_subject_info)\n     * @param propertyPk Key of the property (fk_property)\n     * @param pkProject Id of the the current project\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infStatementAlternativesNotInProjectByTeEntPk(teEntPk: number, propertyPk: number, pkProject: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<InfStatement>>;\n    public infStatementAlternativesNotInProjectByTeEntPk(teEntPk: number, propertyPk: number, pkProject: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<InfStatement>>>;\n    public infStatementAlternativesNotInProjectByTeEntPk(teEntPk: number, propertyPk: number, pkProject: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<InfStatement>>>;\n    public infStatementAlternativesNotInProjectByTeEntPk(teEntPk: number, propertyPk: number, pkProject: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (teEntPk === null || teEntPk === undefined) {\n            throw new Error('Required parameter teEntPk was null or undefined when calling infStatementAlternativesNotInProjectByTeEntPk.');\n        }\n        if (propertyPk === null || propertyPk === undefined) {\n            throw new Error('Required parameter propertyPk was null or undefined when calling infStatementAlternativesNotInProjectByTeEntPk.');\n        }\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling infStatementAlternativesNotInProjectByTeEntPk.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (teEntPk !== undefined && teEntPk !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>teEntPk, 'teEntPk');\n        }\n        if (propertyPk !== undefined && propertyPk !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>propertyPk, 'propertyPk');\n        }\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<InfStatement>>(`${this.configuration.basePath}/lb3-api/InfStatements/alternatives-not-in-project-by-te-ent-pk`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find or create information statement.\n     * @param pkProject Id of the project\n     * @param infStatement data\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infStatementFindOrCreateInfStatements(pkProject: number, infStatement: Array<InfStatement>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<InfStatement>>;\n    public infStatementFindOrCreateInfStatements(pkProject: number, infStatement: Array<InfStatement>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<InfStatement>>>;\n    public infStatementFindOrCreateInfStatements(pkProject: number, infStatement: Array<InfStatement>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<InfStatement>>>;\n    public infStatementFindOrCreateInfStatements(pkProject: number, infStatement: Array<InfStatement>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling infStatementFindOrCreateInfStatements.');\n        }\n        if (infStatement === null || infStatement === undefined) {\n            throw new Error('Required parameter infStatement was null or undefined when calling infStatementFindOrCreateInfStatements.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pk_project');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Array<InfStatement>>(`${this.configuration.basePath}/lb3-api/InfStatements/find-or-create-many`,\n            infStatement,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a flat object of entity previews, that are target of a list.\n     * @param pkProject Pk of the project.\n     * @param pkSourceEntity Pk of the source entity to which the entity previews, that are target of a list are related.\n     * @param pkProperty Pk of the property leading from source entity to the entity previews, that are target of a list.\n     * @param pkTargetClass Fk class of the target entity previews, that are target of a list.\n     * @param isOutgoing If true, the source entity is domain, else range.\n     * @param limit number of returned entity previews, that are target of a list.\n     * @param offset offset of the segment of returned entity previews, that are target of a list.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infStatementPaginatedListTargetingEntityPreviews(pkProject: number, pkSourceEntity: number, pkProperty: number, pkTargetClass: number, isOutgoing: boolean, limit: number, offset: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<object>;\n    public infStatementPaginatedListTargetingEntityPreviews(pkProject: number, pkSourceEntity: number, pkProperty: number, pkTargetClass: number, isOutgoing: boolean, limit: number, offset: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<object>>;\n    public infStatementPaginatedListTargetingEntityPreviews(pkProject: number, pkSourceEntity: number, pkProperty: number, pkTargetClass: number, isOutgoing: boolean, limit: number, offset: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<object>>;\n    public infStatementPaginatedListTargetingEntityPreviews(pkProject: number, pkSourceEntity: number, pkProperty: number, pkTargetClass: number, isOutgoing: boolean, limit: number, offset: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling infStatementPaginatedListTargetingEntityPreviews.');\n        }\n        if (pkSourceEntity === null || pkSourceEntity === undefined) {\n            throw new Error('Required parameter pkSourceEntity was null or undefined when calling infStatementPaginatedListTargetingEntityPreviews.');\n        }\n        if (pkProperty === null || pkProperty === undefined) {\n            throw new Error('Required parameter pkProperty was null or undefined when calling infStatementPaginatedListTargetingEntityPreviews.');\n        }\n        if (pkTargetClass === null || pkTargetClass === undefined) {\n            throw new Error('Required parameter pkTargetClass was null or undefined when calling infStatementPaginatedListTargetingEntityPreviews.');\n        }\n        if (isOutgoing === null || isOutgoing === undefined) {\n            throw new Error('Required parameter isOutgoing was null or undefined when calling infStatementPaginatedListTargetingEntityPreviews.');\n        }\n        if (limit === null || limit === undefined) {\n            throw new Error('Required parameter limit was null or undefined when calling infStatementPaginatedListTargetingEntityPreviews.');\n        }\n        if (offset === null || offset === undefined) {\n            throw new Error('Required parameter offset was null or undefined when calling infStatementPaginatedListTargetingEntityPreviews.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkSourceEntity !== undefined && pkSourceEntity !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkSourceEntity, 'pkSourceEntity');\n        }\n        if (pkProperty !== undefined && pkProperty !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProperty, 'pkProperty');\n        }\n        if (pkTargetClass !== undefined && pkTargetClass !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkTargetClass, 'pkTargetClass');\n        }\n        if (isOutgoing !== undefined && isOutgoing !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>isOutgoing, 'isOutgoing');\n        }\n        if (limit !== undefined && limit !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>limit, 'limit');\n        }\n        if (offset !== undefined && offset !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>offset, 'offset');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<object>(`${this.configuration.basePath}/lb3-api/InfStatements/paginated-list-targeting-entity-previews`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find statements by params.\n     * @param ofProject if true, finds project version. if false, finds repo version.\n     * @param pkProject Primary Key of the Project. If provided and ofProject&#x3D;false, makes a left join with project\n     * @param pkEntity Primary Key of the statement (pk_entity)\n     * @param pkInfoRange Foreign Key of the statement pointing to the range entity (fk_object_info)\n     * @param pkInfoDomain Foreign Key of the statement pointing to the domain entity (fk_subject_info)\n     * @param pkProperty Foreign Key of the statement pointing to the property (fk_property)\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infStatementQueryByParams(ofProject: boolean, pkProject?: number, pkEntity?: number, pkInfoRange?: number, pkInfoDomain?: number, pkProperty?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<InfStatement>>;\n    public infStatementQueryByParams(ofProject: boolean, pkProject?: number, pkEntity?: number, pkInfoRange?: number, pkInfoDomain?: number, pkProperty?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<InfStatement>>>;\n    public infStatementQueryByParams(ofProject: boolean, pkProject?: number, pkEntity?: number, pkInfoRange?: number, pkInfoDomain?: number, pkProperty?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<InfStatement>>>;\n    public infStatementQueryByParams(ofProject: boolean, pkProject?: number, pkEntity?: number, pkInfoRange?: number, pkInfoDomain?: number, pkProperty?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (ofProject === null || ofProject === undefined) {\n            throw new Error('Required parameter ofProject was null or undefined when calling infStatementQueryByParams.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (ofProject !== undefined && ofProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>ofProject, 'ofProject');\n        }\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkEntity !== undefined && pkEntity !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkEntity, 'pkEntity');\n        }\n        if (pkInfoRange !== undefined && pkInfoRange !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkInfoRange, 'pkInfoRange');\n        }\n        if (pkInfoDomain !== undefined && pkInfoDomain !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkInfoDomain, 'pkInfoDomain');\n        }\n        if (pkProperty !== undefined && pkProperty !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProperty, 'pkProperty');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<InfStatement>>(`${this.configuration.basePath}/lb3-api/InfStatements/find-by-params`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get an nested object of statement with everything needed to display the links made from an entity towards sources and digitals.\n     * @param ofProject if true, finds project version. if false, finds repo version.\n     * @param pkProject Primary Key of the Project.\n     * @param pkEntity Primary Key of the entity for which the sources links are needed.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infStatementSourcesAndDigitalsOfEntity(ofProject: boolean, pkProject?: number, pkEntity?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<object>>;\n    public infStatementSourcesAndDigitalsOfEntity(ofProject: boolean, pkProject?: number, pkEntity?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<object>>>;\n    public infStatementSourcesAndDigitalsOfEntity(ofProject: boolean, pkProject?: number, pkEntity?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<object>>>;\n    public infStatementSourcesAndDigitalsOfEntity(ofProject: boolean, pkProject?: number, pkEntity?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (ofProject === null || ofProject === undefined) {\n            throw new Error('Required parameter ofProject was null or undefined when calling infStatementSourcesAndDigitalsOfEntity.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (ofProject !== undefined && ofProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>ofProject, 'ofProject');\n        }\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkEntity !== undefined && pkEntity !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkEntity, 'pkEntity');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<object>>(`${this.configuration.basePath}/lb3-api/InfStatements/sources-and-digitals-of-entity`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { InfTemporalEntity } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InfTemporalEntityService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Get a flat object of temporal entities.\n     * @param pkProject Pk of the project.\n     * @param pkSourceEntity Pk of the source entity to which the temporal entities are related.\n     * @param pkProperty Pk of the property leading from source entity to the temporal entities.\n     * @param pkTargetClass Fk class of the target temporal entities.\n     * @param isOutgoing If true, the source entity is domain, else range.\n     * @param limit number of returned temporal entities.\n     * @param offset offset of the segment of returned temporal entities.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infTemporalEntityAlternativeTemporalEntityList(pkProject: number, pkSourceEntity: number, pkProperty: number, pkTargetClass: number, isOutgoing: boolean, limit: number, offset: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<object>;\n    public infTemporalEntityAlternativeTemporalEntityList(pkProject: number, pkSourceEntity: number, pkProperty: number, pkTargetClass: number, isOutgoing: boolean, limit: number, offset: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<object>>;\n    public infTemporalEntityAlternativeTemporalEntityList(pkProject: number, pkSourceEntity: number, pkProperty: number, pkTargetClass: number, isOutgoing: boolean, limit: number, offset: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<object>>;\n    public infTemporalEntityAlternativeTemporalEntityList(pkProject: number, pkSourceEntity: number, pkProperty: number, pkTargetClass: number, isOutgoing: boolean, limit: number, offset: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling infTemporalEntityAlternativeTemporalEntityList.');\n        }\n        if (pkSourceEntity === null || pkSourceEntity === undefined) {\n            throw new Error('Required parameter pkSourceEntity was null or undefined when calling infTemporalEntityAlternativeTemporalEntityList.');\n        }\n        if (pkProperty === null || pkProperty === undefined) {\n            throw new Error('Required parameter pkProperty was null or undefined when calling infTemporalEntityAlternativeTemporalEntityList.');\n        }\n        if (pkTargetClass === null || pkTargetClass === undefined) {\n            throw new Error('Required parameter pkTargetClass was null or undefined when calling infTemporalEntityAlternativeTemporalEntityList.');\n        }\n        if (isOutgoing === null || isOutgoing === undefined) {\n            throw new Error('Required parameter isOutgoing was null or undefined when calling infTemporalEntityAlternativeTemporalEntityList.');\n        }\n        if (limit === null || limit === undefined) {\n            throw new Error('Required parameter limit was null or undefined when calling infTemporalEntityAlternativeTemporalEntityList.');\n        }\n        if (offset === null || offset === undefined) {\n            throw new Error('Required parameter offset was null or undefined when calling infTemporalEntityAlternativeTemporalEntityList.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkSourceEntity !== undefined && pkSourceEntity !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkSourceEntity, 'pkSourceEntity');\n        }\n        if (pkProperty !== undefined && pkProperty !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProperty, 'pkProperty');\n        }\n        if (pkTargetClass !== undefined && pkTargetClass !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkTargetClass, 'pkTargetClass');\n        }\n        if (isOutgoing !== undefined && isOutgoing !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>isOutgoing, 'isOutgoing');\n        }\n        if (limit !== undefined && limit !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>limit, 'limit');\n        }\n        if (offset !== undefined && offset !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>offset, 'offset');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<object>(`${this.configuration.basePath}/lb3-api/InfTemporalEntities/paginated-list-alternatives`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Relate a nested object of a InfTemporalEntity to the project.\n     * @param pkProject Id of the project\n     * @param isInProject Include or exclude from project.\n     * @param infTemporalEntity data\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infTemporalEntityChangeTeEntProjectRelation(pkProject: number, isInProject: boolean, infTemporalEntity: InfTemporalEntity, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<InfTemporalEntity>;\n    public infTemporalEntityChangeTeEntProjectRelation(pkProject: number, isInProject: boolean, infTemporalEntity: InfTemporalEntity, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<InfTemporalEntity>>;\n    public infTemporalEntityChangeTeEntProjectRelation(pkProject: number, isInProject: boolean, infTemporalEntity: InfTemporalEntity, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<InfTemporalEntity>>;\n    public infTemporalEntityChangeTeEntProjectRelation(pkProject: number, isInProject: boolean, infTemporalEntity: InfTemporalEntity, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling infTemporalEntityChangeTeEntProjectRelation.');\n        }\n        if (isInProject === null || isInProject === undefined) {\n            throw new Error('Required parameter isInProject was null or undefined when calling infTemporalEntityChangeTeEntProjectRelation.');\n        }\n        if (infTemporalEntity === null || infTemporalEntity === undefined) {\n            throw new Error('Required parameter infTemporalEntity was null or undefined when calling infTemporalEntityChangeTeEntProjectRelation.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (isInProject !== undefined && isInProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>isInProject, 'isInProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<InfTemporalEntity>(`${this.configuration.basePath}/lb3-api/InfTemporalEntities/change-project-relation`,\n            infTemporalEntity,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find all instances of the model matched by filter from the data source.\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (&#x60;{\\&quot;where\\&quot;:{\\&quot;something\\&quot;:\\&quot;value\\&quot;}}&#x60;).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infTemporalEntityFind(filter?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<InfTemporalEntity>>;\n    public infTemporalEntityFind(filter?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<InfTemporalEntity>>>;\n    public infTemporalEntityFind(filter?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<InfTemporalEntity>>>;\n    public infTemporalEntityFind(filter?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<InfTemporalEntity>>(`${this.configuration.basePath}/lb3-api/InfTemporalEntities`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find or create many information temporal entities.\n     * @param pkProject Pk of the project\n     * @param infTemporalEntity data\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infTemporalEntityFindOrCreateInfTemporalEntities(pkProject: number, infTemporalEntity: Array<InfTemporalEntity>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<InfTemporalEntity>>;\n    public infTemporalEntityFindOrCreateInfTemporalEntities(pkProject: number, infTemporalEntity: Array<InfTemporalEntity>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<InfTemporalEntity>>>;\n    public infTemporalEntityFindOrCreateInfTemporalEntities(pkProject: number, infTemporalEntity: Array<InfTemporalEntity>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<InfTemporalEntity>>>;\n    public infTemporalEntityFindOrCreateInfTemporalEntities(pkProject: number, infTemporalEntity: Array<InfTemporalEntity>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling infTemporalEntityFindOrCreateInfTemporalEntities.');\n        }\n        if (infTemporalEntity === null || infTemporalEntity === undefined) {\n            throw new Error('Required parameter infTemporalEntity was null or undefined when calling infTemporalEntityFindOrCreateInfTemporalEntities.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pk_project');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Array<InfTemporalEntity>>(`${this.configuration.basePath}/lb3-api/InfTemporalEntities/find-or-create-many`,\n            infTemporalEntity,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find or create a temporal entity version.\n     * @param pkProject Id of the project\n     * @param infTemporalEntity data\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infTemporalEntityFindOrCreateInfTemporalEntity(pkProject: number, infTemporalEntity: InfTemporalEntity, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<InfTemporalEntity>;\n    public infTemporalEntityFindOrCreateInfTemporalEntity(pkProject: number, infTemporalEntity: InfTemporalEntity, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<InfTemporalEntity>>;\n    public infTemporalEntityFindOrCreateInfTemporalEntity(pkProject: number, infTemporalEntity: InfTemporalEntity, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<InfTemporalEntity>>;\n    public infTemporalEntityFindOrCreateInfTemporalEntity(pkProject: number, infTemporalEntity: InfTemporalEntity, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling infTemporalEntityFindOrCreateInfTemporalEntity.');\n        }\n        if (infTemporalEntity === null || infTemporalEntity === undefined) {\n            throw new Error('Required parameter infTemporalEntity was null or undefined when calling infTemporalEntityFindOrCreateInfTemporalEntity.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<InfTemporalEntity>(`${this.configuration.basePath}/lb3-api/InfTemporalEntities/findOrCreate`,\n            infTemporalEntity,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get e schema object of own properties of the temporal entity in project version.\n     * @param pkProject Pk project\n     * @param pkEntity Primary Key of the temporal entity (pk_entity)\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infTemporalEntityOwnProperties(pkProject: number, pkEntity: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<InfTemporalEntity>;\n    public infTemporalEntityOwnProperties(pkProject: number, pkEntity: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<InfTemporalEntity>>;\n    public infTemporalEntityOwnProperties(pkProject: number, pkEntity: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<InfTemporalEntity>>;\n    public infTemporalEntityOwnProperties(pkProject: number, pkEntity: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling infTemporalEntityOwnProperties.');\n        }\n        if (pkEntity === null || pkEntity === undefined) {\n            throw new Error('Required parameter pkEntity was null or undefined when calling infTemporalEntityOwnProperties.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkEntity !== undefined && pkEntity !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkEntity, 'pkEntity');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<InfTemporalEntity>(`${this.configuration.basePath}/lb3-api/InfTemporalEntities/own-properties`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a flat object of temporal entities.\n     * @param pkProject Pk of the project.\n     * @param pkSourceEntity Pk of the source entity to which the temporal entities are related.\n     * @param pkProperty Pk of the property leading from source entity to the temporal entities.\n     * @param pkTargetClass Fk class of the target temporal entities.\n     * @param isOutgoing If true, the source entity is domain, else range.\n     * @param limit number of returned temporal entities.\n     * @param offset offset of the segment of returned temporal entities.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infTemporalEntityTemporalEntityList(pkProject: number, pkSourceEntity: number, pkProperty: number, pkTargetClass: number, isOutgoing: boolean, limit: number, offset: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<object>;\n    public infTemporalEntityTemporalEntityList(pkProject: number, pkSourceEntity: number, pkProperty: number, pkTargetClass: number, isOutgoing: boolean, limit: number, offset: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<object>>;\n    public infTemporalEntityTemporalEntityList(pkProject: number, pkSourceEntity: number, pkProperty: number, pkTargetClass: number, isOutgoing: boolean, limit: number, offset: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<object>>;\n    public infTemporalEntityTemporalEntityList(pkProject: number, pkSourceEntity: number, pkProperty: number, pkTargetClass: number, isOutgoing: boolean, limit: number, offset: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling infTemporalEntityTemporalEntityList.');\n        }\n        if (pkSourceEntity === null || pkSourceEntity === undefined) {\n            throw new Error('Required parameter pkSourceEntity was null or undefined when calling infTemporalEntityTemporalEntityList.');\n        }\n        if (pkProperty === null || pkProperty === undefined) {\n            throw new Error('Required parameter pkProperty was null or undefined when calling infTemporalEntityTemporalEntityList.');\n        }\n        if (pkTargetClass === null || pkTargetClass === undefined) {\n            throw new Error('Required parameter pkTargetClass was null or undefined when calling infTemporalEntityTemporalEntityList.');\n        }\n        if (isOutgoing === null || isOutgoing === undefined) {\n            throw new Error('Required parameter isOutgoing was null or undefined when calling infTemporalEntityTemporalEntityList.');\n        }\n        if (limit === null || limit === undefined) {\n            throw new Error('Required parameter limit was null or undefined when calling infTemporalEntityTemporalEntityList.');\n        }\n        if (offset === null || offset === undefined) {\n            throw new Error('Required parameter offset was null or undefined when calling infTemporalEntityTemporalEntityList.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkSourceEntity !== undefined && pkSourceEntity !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkSourceEntity, 'pkSourceEntity');\n        }\n        if (pkProperty !== undefined && pkProperty !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProperty, 'pkProperty');\n        }\n        if (pkTargetClass !== undefined && pkTargetClass !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkTargetClass, 'pkTargetClass');\n        }\n        if (isOutgoing !== undefined && isOutgoing !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>isOutgoing, 'isOutgoing');\n        }\n        if (limit !== undefined && limit !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>limit, 'limit');\n        }\n        if (offset !== undefined && offset !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>offset, 'offset');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<object>(`${this.configuration.basePath}/lb3-api/InfTemporalEntities/paginated-list`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { InfTextProperty } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InfTextPropertyService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Find all InfTextProperties that are not yet added to the given project.\n     * @param pkProject Pk of the project\n     * @param pkEntity fk of the concerned entity\n     * @param pkClassField fk of the class field\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infTextPropertyFindAlternativeTextProperties(pkProject: number, pkEntity: number, pkClassField: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<InfTextProperty>>;\n    public infTextPropertyFindAlternativeTextProperties(pkProject: number, pkEntity: number, pkClassField: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<InfTextProperty>>>;\n    public infTextPropertyFindAlternativeTextProperties(pkProject: number, pkEntity: number, pkClassField: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<InfTextProperty>>>;\n    public infTextPropertyFindAlternativeTextProperties(pkProject: number, pkEntity: number, pkClassField: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling infTextPropertyFindAlternativeTextProperties.');\n        }\n        if (pkEntity === null || pkEntity === undefined) {\n            throw new Error('Required parameter pkEntity was null or undefined when calling infTextPropertyFindAlternativeTextProperties.');\n        }\n        if (pkClassField === null || pkClassField === undefined) {\n            throw new Error('Required parameter pkClassField was null or undefined when calling infTextPropertyFindAlternativeTextProperties.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkEntity !== undefined && pkEntity !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkEntity, 'pkEntity');\n        }\n        if (pkClassField !== undefined && pkClassField !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkClassField, 'pkClassField');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Array<InfTextProperty>>(`${this.configuration.basePath}/lb3-api/InfTextProperties/findAlternativeTextProperties`,\n            null,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find or create information text properties.\n     * @param pkProject Id of the project\n     * @param infTextProperty data\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infTextPropertyFindOrCreateInfTextProperties(pkProject: number, infTextProperty: Array<InfTextProperty>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<InfTextProperty>>;\n    public infTextPropertyFindOrCreateInfTextProperties(pkProject: number, infTextProperty: Array<InfTextProperty>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<InfTextProperty>>>;\n    public infTextPropertyFindOrCreateInfTextProperties(pkProject: number, infTextProperty: Array<InfTextProperty>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<InfTextProperty>>>;\n    public infTextPropertyFindOrCreateInfTextProperties(pkProject: number, infTextProperty: Array<InfTextProperty>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling infTextPropertyFindOrCreateInfTextProperties.');\n        }\n        if (infTextProperty === null || infTextProperty === undefined) {\n            throw new Error('Required parameter infTextProperty was null or undefined when calling infTextPropertyFindOrCreateInfTextProperties.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pk_project');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Array<InfTextProperty>>(`${this.configuration.basePath}/lb3-api/InfTextProperties/find-or-create-many`,\n            infTextProperty,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find or create a InfTextProperty and update the project relation if needed.\n     * @param pkProject Pk of the project\n     * @param infTextProperty data\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public infTextPropertyFindOrCreateInfTextProperty(pkProject: number, infTextProperty: InfTextProperty, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<InfTextProperty>;\n    public infTextPropertyFindOrCreateInfTextProperty(pkProject: number, infTextProperty: InfTextProperty, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<InfTextProperty>>;\n    public infTextPropertyFindOrCreateInfTextProperty(pkProject: number, infTextProperty: InfTextProperty, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<InfTextProperty>>;\n    public infTextPropertyFindOrCreateInfTextProperty(pkProject: number, infTextProperty: InfTextProperty, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling infTextPropertyFindOrCreateInfTextProperty.');\n        }\n        if (infTextProperty === null || infTextProperty === undefined) {\n            throw new Error('Required parameter infTextProperty was null or undefined when calling infTextPropertyFindOrCreateInfTextProperty.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<InfTextProperty>(`${this.configuration.basePath}/lb3-api/InfTextProperties/findOrCreate`,\n            infTextProperty,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { PingResponse } from '../model/models';\nimport { ProjectPongRequest } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PingControllerService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public pingControllerPing(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PingResponse>;\n    public pingControllerPing(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PingResponse>>;\n    public pingControllerPing(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PingResponse>>;\n    public pingControllerPing(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<PingResponse>(`${this.configuration.basePath}/ping`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Test get access to project: Only Project members get a response.\n     * @param pkProject \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public pingControllerProjectPing(pkProject?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PingResponse>;\n    public pingControllerProjectPing(pkProject?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PingResponse>>;\n    public pingControllerProjectPing(pkProject?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PingResponse>>;\n    public pingControllerProjectPing(pkProject?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<PingResponse>(`${this.configuration.basePath}/project-ping`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Test post access to project: Only Project members get a response.\n     * @param projectPongRequest \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public pingControllerProjectPong(projectPongRequest?: ProjectPongRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PingResponse>;\n    public pingControllerProjectPong(projectPongRequest?: ProjectPongRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PingResponse>>;\n    public pingControllerProjectPong(projectPongRequest?: ProjectPongRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PingResponse>>;\n    public pingControllerProjectPong(projectPongRequest?: ProjectPongRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<PingResponse>(`${this.configuration.basePath}/project-pong`,\n            projectPongRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Test access as system admin: Only system administrators get a response.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public pingControllerSysAdminPing(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PingResponse>;\n    public pingControllerSysAdminPing(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PingResponse>>;\n    public pingControllerSysAdminPing(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PingResponse>>;\n    public pingControllerSysAdminPing(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<PingResponse>(`${this.configuration.basePath}/system-admin-ping`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { ProClassFieldConfig } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProClassFieldConfigService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Deletes instances of ProClassFieldConfig.\n     * @param requestBody Array of Primary Key of ProClassFieldConfigs\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public proClassFieldConfigBulkDelete(requestBody: Array<number>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<boolean>;\n    public proClassFieldConfigBulkDelete(requestBody: Array<number>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<boolean>>;\n    public proClassFieldConfigBulkDelete(requestBody: Array<number>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<boolean>>;\n    public proClassFieldConfigBulkDelete(requestBody: Array<number>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (requestBody === null || requestBody === undefined) {\n            throw new Error('Required parameter requestBody was null or undefined when calling proClassFieldConfigBulkDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<boolean>(`${this.configuration.basePath}/lb3-api/ProClassFieldConfigs/bulk-delete`,\n            requestBody,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Creates or updates instances of ProClassFieldConfig.\n     * @param pkProject Pk of the project\n     * @param proClassFieldConfig Array ProClassFieldConfig\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public proClassFieldConfigBulkUpsert(pkProject: number, proClassFieldConfig: Array<ProClassFieldConfig>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<ProClassFieldConfig>;\n    public proClassFieldConfigBulkUpsert(pkProject: number, proClassFieldConfig: Array<ProClassFieldConfig>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<ProClassFieldConfig>>;\n    public proClassFieldConfigBulkUpsert(pkProject: number, proClassFieldConfig: Array<ProClassFieldConfig>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<ProClassFieldConfig>>;\n    public proClassFieldConfigBulkUpsert(pkProject: number, proClassFieldConfig: Array<ProClassFieldConfig>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling proClassFieldConfigBulkUpsert.');\n        }\n        if (proClassFieldConfig === null || proClassFieldConfig === undefined) {\n            throw new Error('Required parameter proClassFieldConfig was null or undefined when calling proClassFieldConfigBulkUpsert.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<ProClassFieldConfig>(`${this.configuration.basePath}/lb3-api/ProClassFieldConfigs/bulk-upsert`,\n            proClassFieldConfig,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find ProClassFieldConfig of project\n     * @param pkProject Pk of the project\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public proClassFieldConfigOfProject(pkProject: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<ProClassFieldConfig>>;\n    public proClassFieldConfigOfProject(pkProject: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<ProClassFieldConfig>>>;\n    public proClassFieldConfigOfProject(pkProject: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<ProClassFieldConfig>>>;\n    public proClassFieldConfigOfProject(pkProject: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling proClassFieldConfigOfProject.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<ProClassFieldConfig>>(`${this.configuration.basePath}/lb3-api/ProClassFieldConfigs/of-project`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Patch an existing model instance or insert a new one into the data source.\n     * @param proClassFieldConfig Model instance data\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public proClassFieldConfigPatchOrCreate(proClassFieldConfig?: ProClassFieldConfig, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<ProClassFieldConfig>;\n    public proClassFieldConfigPatchOrCreate(proClassFieldConfig?: ProClassFieldConfig, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<ProClassFieldConfig>>;\n    public proClassFieldConfigPatchOrCreate(proClassFieldConfig?: ProClassFieldConfig, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<ProClassFieldConfig>>;\n    public proClassFieldConfigPatchOrCreate(proClassFieldConfig?: ProClassFieldConfig, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<ProClassFieldConfig>(`${this.configuration.basePath}/lb3-api/ProClassFieldConfigs`,\n            proClassFieldConfig,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { NewProDfhClassProjRel } from '../model/models';\nimport { ProDfhClassProjRel } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProDfhClassProjRelService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Creates or updates instances of ProDfhClassProjRel.\n     * @param pkProject Project\n     * @param proDfhClassProjRel Array ProDfhClassProjRel\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public proDfhClassProjRelBulkUpsert(pkProject: number, proDfhClassProjRel: Array<ProDfhClassProjRel>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<ProDfhClassProjRel>;\n    public proDfhClassProjRelBulkUpsert(pkProject: number, proDfhClassProjRel: Array<ProDfhClassProjRel>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<ProDfhClassProjRel>>;\n    public proDfhClassProjRelBulkUpsert(pkProject: number, proDfhClassProjRel: Array<ProDfhClassProjRel>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<ProDfhClassProjRel>>;\n    public proDfhClassProjRelBulkUpsert(pkProject: number, proDfhClassProjRel: Array<ProDfhClassProjRel>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling proDfhClassProjRelBulkUpsert.');\n        }\n        if (proDfhClassProjRel === null || proDfhClassProjRel === undefined) {\n            throw new Error('Required parameter proDfhClassProjRel was null or undefined when calling proDfhClassProjRelBulkUpsert.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<ProDfhClassProjRel>(`${this.configuration.basePath}/lb3-api/ProDfhClassProjRels/bulk-upsert`,\n            proDfhClassProjRel,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new instance of the model and persist it into the data source.\n     * @param newProDfhClassProjRel Model instance data\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public proDfhClassProjRelCreate(newProDfhClassProjRel?: NewProDfhClassProjRel, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<ProDfhClassProjRel>;\n    public proDfhClassProjRelCreate(newProDfhClassProjRel?: NewProDfhClassProjRel, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<ProDfhClassProjRel>>;\n    public proDfhClassProjRelCreate(newProDfhClassProjRel?: NewProDfhClassProjRel, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<ProDfhClassProjRel>>;\n    public proDfhClassProjRelCreate(newProDfhClassProjRel?: NewProDfhClassProjRel, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<ProDfhClassProjRel>(`${this.configuration.basePath}/lb3-api/ProDfhClassProjRels`,\n            newProDfhClassProjRel,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find ProDfhClassProjRel of project\n     * @param pkProject Pk of the project\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public proDfhClassProjRelOfProject(pkProject: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<ProDfhClassProjRel>>;\n    public proDfhClassProjRelOfProject(pkProject: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<ProDfhClassProjRel>>>;\n    public proDfhClassProjRelOfProject(pkProject: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<ProDfhClassProjRel>>>;\n    public proDfhClassProjRelOfProject(pkProject: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling proDfhClassProjRelOfProject.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<ProDfhClassProjRel>>(`${this.configuration.basePath}/lb3-api/ProDfhClassProjRels/of-project`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { ProDfhProfileProjRel } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProDfhProfileProjRelService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Creates or updates instances of ProDfhProfileProjRel.\n     * @param pkProject Project\n     * @param proDfhProfileProjRel Array ProDfhProfileProjRel\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public proDfhProfileProjRelBulkUpsert(pkProject: number, proDfhProfileProjRel: Array<ProDfhProfileProjRel>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<ProDfhProfileProjRel>;\n    public proDfhProfileProjRelBulkUpsert(pkProject: number, proDfhProfileProjRel: Array<ProDfhProfileProjRel>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<ProDfhProfileProjRel>>;\n    public proDfhProfileProjRelBulkUpsert(pkProject: number, proDfhProfileProjRel: Array<ProDfhProfileProjRel>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<ProDfhProfileProjRel>>;\n    public proDfhProfileProjRelBulkUpsert(pkProject: number, proDfhProfileProjRel: Array<ProDfhProfileProjRel>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling proDfhProfileProjRelBulkUpsert.');\n        }\n        if (proDfhProfileProjRel === null || proDfhProfileProjRel === undefined) {\n            throw new Error('Required parameter proDfhProfileProjRel was null or undefined when calling proDfhProfileProjRelBulkUpsert.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<ProDfhProfileProjRel>(`${this.configuration.basePath}/lb3-api/ProDfhProfileProjRels/bulk-upsert`,\n            proDfhProfileProjRel,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find ProDfhProfileProjRel of project where enabled is true\n     * @param pkProject Pk of the project\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public proDfhProfileProjRelOfProject(pkProject: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<ProDfhProfileProjRel>>;\n    public proDfhProfileProjRelOfProject(pkProject: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<ProDfhProfileProjRel>>>;\n    public proDfhProfileProjRelOfProject(pkProject: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<ProDfhProfileProjRel>>>;\n    public proDfhProfileProjRelOfProject(pkProject: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling proDfhProfileProjRelOfProject.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<ProDfhProfileProjRel>>(`${this.configuration.basePath}/lb3-api/ProDfhProfileProjRels/of-project`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { ProInfoProjRel } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProInfoProjRelService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Updates the ProInfoProjRel of all found by fk_project and fk_entity.\n     * @param pkProject fk_project\n     * @param proInfoProjRel Array of ProInfoProjRel (fk_project must be equal to pkProject)\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public proInfoProjRelBulkUpdateEprAttributes(pkProject: number, proInfoProjRel: Array<ProInfoProjRel>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<ProInfoProjRel>;\n    public proInfoProjRelBulkUpdateEprAttributes(pkProject: number, proInfoProjRel: Array<ProInfoProjRel>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<ProInfoProjRel>>;\n    public proInfoProjRelBulkUpdateEprAttributes(pkProject: number, proInfoProjRel: Array<ProInfoProjRel>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<ProInfoProjRel>>;\n    public proInfoProjRelBulkUpdateEprAttributes(pkProject: number, proInfoProjRel: Array<ProInfoProjRel>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling proInfoProjRelBulkUpdateEprAttributes.');\n        }\n        if (proInfoProjRel === null || proInfoProjRel === undefined) {\n            throw new Error('Required parameter proInfoProjRel was null or undefined when calling proInfoProjRelBulkUpdateEprAttributes.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<ProInfoProjRel>(`${this.configuration.basePath}/lb3-api/ProInfoProjRels/bulk-update-attributes`,\n            proInfoProjRel,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find all instances of the model matched by filter from the data source.\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (&#x60;{\\&quot;where\\&quot;:{\\&quot;something\\&quot;:\\&quot;value\\&quot;}}&#x60;).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public proInfoProjRelFind(filter?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<ProInfoProjRel>>;\n    public proInfoProjRelFind(filter?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<ProInfoProjRel>>>;\n    public proInfoProjRelFind(filter?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<ProInfoProjRel>>>;\n    public proInfoProjRelFind(filter?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<ProInfoProjRel>>(`${this.configuration.basePath}/lb3-api/ProInfoProjRels`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Marks the statement as favorite for the given fk_project.\n     * @param pkProject fk_project\n     * @param pkStatement fk_entity\n     * @param body True, if the statement is outgoing, else false\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public proInfoProjRelMarkStatementAsFavorite(pkProject: number, pkStatement: number, body: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<ProInfoProjRel>;\n    public proInfoProjRelMarkStatementAsFavorite(pkProject: number, pkStatement: number, body: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<ProInfoProjRel>>;\n    public proInfoProjRelMarkStatementAsFavorite(pkProject: number, pkStatement: number, body: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<ProInfoProjRel>>;\n    public proInfoProjRelMarkStatementAsFavorite(pkProject: number, pkStatement: number, body: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling proInfoProjRelMarkStatementAsFavorite.');\n        }\n        if (pkStatement === null || pkStatement === undefined) {\n            throw new Error('Required parameter pkStatement was null or undefined when calling proInfoProjRelMarkStatementAsFavorite.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling proInfoProjRelMarkStatementAsFavorite.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkStatement !== undefined && pkStatement !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkStatement, 'pkStatement');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<ProInfoProjRel>(`${this.configuration.basePath}/lb3-api/ProInfoProjRels/mark-statement-as-favorite`,\n            body,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Patch an existing model instance or insert a new one into the data source.\n     * @param proInfoProjRel Model instance data\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public proInfoProjRelPatchOrCreate(proInfoProjRel?: ProInfoProjRel, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<ProInfoProjRel>;\n    public proInfoProjRelPatchOrCreate(proInfoProjRel?: ProInfoProjRel, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<ProInfoProjRel>>;\n    public proInfoProjRelPatchOrCreate(proInfoProjRel?: ProInfoProjRel, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<ProInfoProjRel>>;\n    public proInfoProjRelPatchOrCreate(proInfoProjRel?: ProInfoProjRel, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.patch<ProInfoProjRel>(`${this.configuration.basePath}/lb3-api/ProInfoProjRels`,\n            proInfoProjRel,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Updates the ProInfoProjRel found by fk_project and fk_entity.\n     * @param pkProject fk_project\n     * @param pkEntity fk_entity\n     * @param proInfoProjRel Instance of ProInfoProjRel (fk_project and fk_entity will be ignored)\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public proInfoProjRelUpdateEprAttributes(pkProject: number, pkEntity: number, proInfoProjRel: ProInfoProjRel, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<ProInfoProjRel>;\n    public proInfoProjRelUpdateEprAttributes(pkProject: number, pkEntity: number, proInfoProjRel: ProInfoProjRel, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<ProInfoProjRel>>;\n    public proInfoProjRelUpdateEprAttributes(pkProject: number, pkEntity: number, proInfoProjRel: ProInfoProjRel, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<ProInfoProjRel>>;\n    public proInfoProjRelUpdateEprAttributes(pkProject: number, pkEntity: number, proInfoProjRel: ProInfoProjRel, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling proInfoProjRelUpdateEprAttributes.');\n        }\n        if (pkEntity === null || pkEntity === undefined) {\n            throw new Error('Required parameter pkEntity was null or undefined when calling proInfoProjRelUpdateEprAttributes.');\n        }\n        if (proInfoProjRel === null || proInfoProjRel === undefined) {\n            throw new Error('Required parameter proInfoProjRel was null or undefined when calling proInfoProjRelUpdateEprAttributes.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkEntity !== undefined && pkEntity !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkEntity, 'pkEntity');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<ProInfoProjRel>(`${this.configuration.basePath}/lb3-api/ProInfoProjRels/updateEprAttributes`,\n            proInfoProjRel,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { ProProject } from '../model/models';\nimport { ProTextProperty } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProProjectService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Create a new project with a label and a description.\n     * @param accountId Id of account to associate the persistent item with.\n     * @param pkLanguage Default language of the project, language of the label and the text property.\n     * @param label Label of the project.\n     * @param textProperty Description of the project.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public proProjectCreateWithLabelAndDescription(accountId: number, pkLanguage: string, label: string, textProperty?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<boolean>>;\n    public proProjectCreateWithLabelAndDescription(accountId: number, pkLanguage: string, label: string, textProperty?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<boolean>>>;\n    public proProjectCreateWithLabelAndDescription(accountId: number, pkLanguage: string, label: string, textProperty?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<boolean>>>;\n    public proProjectCreateWithLabelAndDescription(accountId: number, pkLanguage: string, label: string, textProperty?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (accountId === null || accountId === undefined) {\n            throw new Error('Required parameter accountId was null or undefined when calling proProjectCreateWithLabelAndDescription.');\n        }\n        if (pkLanguage === null || pkLanguage === undefined) {\n            throw new Error('Required parameter pkLanguage was null or undefined when calling proProjectCreateWithLabelAndDescription.');\n        }\n        if (label === null || label === undefined) {\n            throw new Error('Required parameter label was null or undefined when calling proProjectCreateWithLabelAndDescription.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (accountId !== undefined && accountId !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>accountId, 'accountId');\n        }\n        if (pkLanguage !== undefined && pkLanguage !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkLanguage, 'pkLanguage');\n        }\n        if (label !== undefined && label !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>label, 'label');\n        }\n        if (textProperty !== undefined && textProperty !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>textProperty, 'textProperty');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Array<boolean>>(`${this.configuration.basePath}/lb3-api/ProProjects/create-with-label-and-description`,\n            null,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get basic information about the project (language, name)\n     * @param pkProject Pk of project\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public proProjectGetBasics(pkProject: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<ProProject>>;\n    public proProjectGetBasics(pkProject: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<ProProject>>>;\n    public proProjectGetBasics(pkProject: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<ProProject>>>;\n    public proProjectGetBasics(pkProject: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling proProjectGetBasics.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<ProProject>>(`${this.configuration.basePath}/lb3-api/ProProjects/get-basics`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the projects of account.\n     * @param accountId Id of the account\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public proProjectOfAccount(accountId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<ProTextProperty>>;\n    public proProjectOfAccount(accountId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<ProTextProperty>>>;\n    public proProjectOfAccount(accountId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<ProTextProperty>>>;\n    public proProjectOfAccount(accountId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (accountId === null || accountId === undefined) {\n            throw new Error('Required parameter accountId was null or undefined when calling proProjectOfAccount.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (accountId !== undefined && accountId !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>accountId, 'accountId');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<ProTextProperty>>(`${this.configuration.basePath}/lb3-api/ProProjects/of-account`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { ProTextProperty } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProTextPropertyService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Dletes items in the array of ProTextProperty. Checks for each item if fk_project matches given pkProject \n     * @param pkProject Pk of the project\n     * @param proTextProperty Array of ProTextPropertys\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public proTextPropertyBulkDelete(pkProject: number, proTextProperty: Array<ProTextProperty>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<ProTextProperty>>;\n    public proTextPropertyBulkDelete(pkProject: number, proTextProperty: Array<ProTextProperty>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<ProTextProperty>>>;\n    public proTextPropertyBulkDelete(pkProject: number, proTextProperty: Array<ProTextProperty>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<ProTextProperty>>>;\n    public proTextPropertyBulkDelete(pkProject: number, proTextProperty: Array<ProTextProperty>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling proTextPropertyBulkDelete.');\n        }\n        if (proTextProperty === null || proTextProperty === undefined) {\n            throw new Error('Required parameter proTextProperty was null or undefined when calling proTextPropertyBulkDelete.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<Array<ProTextProperty>>(`${this.configuration.basePath}/lb3-api/ProTextProperties/bulk-delete`,\n            proTextProperty,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Inserts or updates items in the array of ProTextProperty. If pk_entity is givenÂ and existing, an update is done, else an insert\n     * @param pkProject Pk of the project\n     * @param proTextProperty Array of ProTextPropertys\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public proTextPropertyBulkUpsert(pkProject: number, proTextProperty: Array<ProTextProperty>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<ProTextProperty>>;\n    public proTextPropertyBulkUpsert(pkProject: number, proTextProperty: Array<ProTextProperty>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<ProTextProperty>>>;\n    public proTextPropertyBulkUpsert(pkProject: number, proTextProperty: Array<ProTextProperty>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<ProTextProperty>>>;\n    public proTextPropertyBulkUpsert(pkProject: number, proTextProperty: Array<ProTextProperty>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling proTextPropertyBulkUpsert.');\n        }\n        if (proTextProperty === null || proTextProperty === undefined) {\n            throw new Error('Required parameter proTextProperty was null or undefined when calling proTextPropertyBulkUpsert.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Array<ProTextProperty>>(`${this.configuration.basePath}/lb3-api/ProTextProperties/bulk-upsert`,\n            proTextProperty,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the text-properties of the project.\n     * @param pkProject Pk of the project\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public proTextPropertyOfProject(pkProject: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<ProTextProperty>>;\n    public proTextPropertyOfProject(pkProject: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<ProTextProperty>>>;\n    public proTextPropertyOfProject(pkProject: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<ProTextProperty>>>;\n    public proTextPropertyOfProject(pkProject: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling proTextPropertyOfProject.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<ProTextProperty>>(`${this.configuration.basePath}/lb3-api/ProTextProperties/of-project`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { GetEntityLabelConfigResponse } from '../model/models';\nimport { ProEntityLabelConfig } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectConfigurationService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Delete entity label config by class and project.\n     * @param pkProject \n     * @param fkClass \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public projectConfigControllerDeleteEntityLabelConfig(pkProject?: number, fkClass?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public projectConfigControllerDeleteEntityLabelConfig(pkProject?: number, fkClass?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public projectConfigControllerDeleteEntityLabelConfig(pkProject?: number, fkClass?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public projectConfigControllerDeleteEntityLabelConfig(pkProject?: number, fkClass?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (fkClass !== undefined && fkClass !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>fkClass, 'fkClass');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/entity-label-config`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the entity label config by class and project. This always includes the default configuration as well.\n     * @param pkProject \n     * @param fkClass \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public projectConfigControllerGetEntityLabelConfig(pkProject?: number, fkClass?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GetEntityLabelConfigResponse>;\n    public projectConfigControllerGetEntityLabelConfig(pkProject?: number, fkClass?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GetEntityLabelConfigResponse>>;\n    public projectConfigControllerGetEntityLabelConfig(pkProject?: number, fkClass?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GetEntityLabelConfigResponse>>;\n    public projectConfigControllerGetEntityLabelConfig(pkProject?: number, fkClass?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (fkClass !== undefined && fkClass !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>fkClass, 'fkClass');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GetEntityLabelConfigResponse>(`${this.configuration.basePath}/entity-label-config`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Insert or update the entity label config by class and project.\n     * @param proEntityLabelConfig \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public projectConfigControllerPostEntityLabelConfig(proEntityLabelConfig?: ProEntityLabelConfig, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<ProEntityLabelConfig>;\n    public projectConfigControllerPostEntityLabelConfig(proEntityLabelConfig?: ProEntityLabelConfig, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<ProEntityLabelConfig>>;\n    public projectConfigControllerPostEntityLabelConfig(proEntityLabelConfig?: ProEntityLabelConfig, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<ProEntityLabelConfig>>;\n    public projectConfigControllerPostEntityLabelConfig(proEntityLabelConfig?: ProEntityLabelConfig, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<ProEntityLabelConfig>(`${this.configuration.basePath}/entity-label-config`,\n            proEntityLabelConfig,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { PubAccount } from '../model/models';\nimport { Role } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PubAccountService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Get Roles of the Account\n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public pubAccountGetRoles(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<Role>>;\n    public pubAccountGetRoles(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<Role>>>;\n    public pubAccountGetRoles(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<Role>>>;\n    public pubAccountGetRoles(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling pubAccountGetRoles.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<Role>>(`${this.configuration.basePath}/lb3-api/PubAccounts/${encodeURIComponent(String(id))}/get-roles`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a list of all projects associated with this account.\n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public pubAccountListProjects(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<PubAccount>>;\n    public pubAccountListProjects(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<PubAccount>>>;\n    public pubAccountListProjects(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<PubAccount>>>;\n    public pubAccountListProjects(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling pubAccountListProjects.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<PubAccount>>(`${this.configuration.basePath}/lb3-api/PubAccounts/${encodeURIComponent(String(id))}/list-projects`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Login a user with username/email and password.\n     * @param body \n     * @param include Related objects to include in the response. See the description of return value for more details.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public pubAccountLogin(body: object, include?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<object>;\n    public pubAccountLogin(body: object, include?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<object>>;\n    public pubAccountLogin(body: object, include?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<object>>;\n    public pubAccountLogin(body: object, include?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling pubAccountLogin.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (include !== undefined && include !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>include, 'include');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<object>(`${this.configuration.basePath}/lb3-api/PubAccounts/login`,\n            body,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Logout a user with access token.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public pubAccountLogout(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public pubAccountLogout(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public pubAccountLogout(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public pubAccountLogout(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/lb3-api/PubAccounts/logout`,\n            null,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all accounts with their project pks and their roles\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public pubAccountWithRolesAndProjects(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<PubAccount>>;\n    public pubAccountWithRolesAndProjects(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<PubAccount>>>;\n    public pubAccountWithRolesAndProjects(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<PubAccount>>>;\n    public pubAccountWithRolesAndProjects(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<PubAccount>>(`${this.configuration.basePath}/lb3-api/PubAccounts/with-roles-and-projects`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { GvSchemaObject } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RamListService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Get the schema object for the ram list.\n     * @param pkProject Primary key of the project\n     * @param pkEntity Primary key of the entity (the expression)\n     * @param fkProperty fkProperty of the statement connecting the entity via -&gt; 1218 &#x3D; mentions / 117 &#x3D; is about / 1334 &#x3D; refers to -&gt; with Expression / Expr. Portion / Chunk / Cell\n     * @param refersTo \\&quot;Chunk\\&quot; or \\&quot;Cell\\&quot; to restrict query to Chunk or Cell as subject of referst to statements\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public ramListControllerGetRamList(pkProject: number, pkEntity: number, fkProperty: number, refersTo?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GvSchemaObject>;\n    public ramListControllerGetRamList(pkProject: number, pkEntity: number, fkProperty: number, refersTo?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GvSchemaObject>>;\n    public ramListControllerGetRamList(pkProject: number, pkEntity: number, fkProperty: number, refersTo?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GvSchemaObject>>;\n    public ramListControllerGetRamList(pkProject: number, pkEntity: number, fkProperty: number, refersTo?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling ramListControllerGetRamList.');\n        }\n        if (pkEntity === null || pkEntity === undefined) {\n            throw new Error('Required parameter pkEntity was null or undefined when calling ramListControllerGetRamList.');\n        }\n        if (fkProperty === null || fkProperty === undefined) {\n            throw new Error('Required parameter fkProperty was null or undefined when calling ramListControllerGetRamList.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkEntity !== undefined && pkEntity !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkEntity, 'pkEntity');\n        }\n        if (fkProperty !== undefined && fkProperty !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>fkProperty, 'fkProperty');\n        }\n        if (refersTo !== undefined && refersTo !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>refersTo, 'refersTo');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GvSchemaObject>(`${this.configuration.basePath}/get-ram-list`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { InfPersistentItem } from '../model/models';\nimport { SchemaObject } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SchemaObjectService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Add entity with outgoing statements and namings to project.\n     * @param pkProject Primary key of the project\n     * @param pkEntity Primary key of the entity\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public schemaObjectAddEntityToProject(pkProject: number, pkEntity: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<SchemaObject>>;\n    public schemaObjectAddEntityToProject(pkProject: number, pkEntity: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<SchemaObject>>>;\n    public schemaObjectAddEntityToProject(pkProject: number, pkEntity: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<SchemaObject>>>;\n    public schemaObjectAddEntityToProject(pkProject: number, pkEntity: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling schemaObjectAddEntityToProject.');\n        }\n        if (pkEntity === null || pkEntity === undefined) {\n            throw new Error('Required parameter pkEntity was null or undefined when calling schemaObjectAddEntityToProject.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkEntity !== undefined && pkEntity !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkEntity, 'pkEntity');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<SchemaObject>>(`${this.configuration.basePath}/lb3-api/SchemaObjects/add-entity-to-project`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Remove entity with outgoing statements and namings from project.\n     * @param pkProject Primary key of the project\n     * @param pkEntity Primary key of the entity\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public schemaObjectRemoveEntityFromProject(pkProject: number, pkEntity: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<SchemaObject>>;\n    public schemaObjectRemoveEntityFromProject(pkProject: number, pkEntity: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<SchemaObject>>>;\n    public schemaObjectRemoveEntityFromProject(pkProject: number, pkEntity: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<SchemaObject>>>;\n    public schemaObjectRemoveEntityFromProject(pkProject: number, pkEntity: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling schemaObjectRemoveEntityFromProject.');\n        }\n        if (pkEntity === null || pkEntity === undefined) {\n            throw new Error('Required parameter pkEntity was null or undefined when calling schemaObjectRemoveEntityFromProject.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkEntity !== undefined && pkEntity !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkEntity, 'pkEntity');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<SchemaObject>>(`${this.configuration.basePath}/lb3-api/SchemaObjects/remove-entity-from-project`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a object containing apllations and definition of a type (project variant).\n     * @param pkProject Pk of the project.\n     * @param pkType Pk of the type.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public schemaObjectTypeOfProject(pkProject: number, pkType: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<InfPersistentItem>;\n    public schemaObjectTypeOfProject(pkProject: number, pkType: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<InfPersistentItem>>;\n    public schemaObjectTypeOfProject(pkProject: number, pkType: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<InfPersistentItem>>;\n    public schemaObjectTypeOfProject(pkProject: number, pkType: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling schemaObjectTypeOfProject.');\n        }\n        if (pkType === null || pkType === undefined) {\n            throw new Error('Required parameter pkType was null or undefined when calling schemaObjectTypeOfProject.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkType !== undefined && pkType !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkType, 'pkType');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<InfPersistentItem>(`${this.configuration.basePath}/lb3-api/SchemaObjects/type-of-project`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { GvLoadSubfieldPageReq } from '../model/models';\nimport { GvPaginationAlternativeLeafItemsReq } from '../model/models';\nimport { GvPaginationObject } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SubfieldPageControllerService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param gvPaginationAlternativeLeafItemsReq \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public subfieldPageControllerAlternativeLeafItems(gvPaginationAlternativeLeafItemsReq?: GvPaginationAlternativeLeafItemsReq, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GvPaginationObject>;\n    public subfieldPageControllerAlternativeLeafItems(gvPaginationAlternativeLeafItemsReq?: GvPaginationAlternativeLeafItemsReq, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GvPaginationObject>>;\n    public subfieldPageControllerAlternativeLeafItems(gvPaginationAlternativeLeafItemsReq?: GvPaginationAlternativeLeafItemsReq, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GvPaginationObject>>;\n    public subfieldPageControllerAlternativeLeafItems(gvPaginationAlternativeLeafItemsReq?: GvPaginationAlternativeLeafItemsReq, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GvPaginationObject>(`${this.configuration.basePath}/subfield-page/alternative-leaf-items`,\n            gvPaginationAlternativeLeafItemsReq,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param gvLoadSubfieldPageReq \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public subfieldPageControllerLoadSubfieldPage(gvLoadSubfieldPageReq?: GvLoadSubfieldPageReq, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GvPaginationObject>;\n    public subfieldPageControllerLoadSubfieldPage(gvLoadSubfieldPageReq?: GvLoadSubfieldPageReq, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GvPaginationObject>>;\n    public subfieldPageControllerLoadSubfieldPage(gvLoadSubfieldPageReq?: GvLoadSubfieldPageReq, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GvPaginationObject>>;\n    public subfieldPageControllerLoadSubfieldPage(gvLoadSubfieldPageReq?: GvLoadSubfieldPageReq, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<GvPaginationObject>(`${this.configuration.basePath}/subfield-page/load-subfield-page`,\n            gvLoadSubfieldPageReq,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { SysClassField } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SysClassFieldService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Find all instances of the model matched by filter from the data source.\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (&#x60;{\\&quot;where\\&quot;:{\\&quot;something\\&quot;:\\&quot;value\\&quot;}}&#x60;).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public sysClassFieldFind(filter?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<SysClassField>>;\n    public sysClassFieldFind(filter?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<SysClassField>>>;\n    public sysClassFieldFind(filter?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<SysClassField>>>;\n    public sysClassFieldFind(filter?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<SysClassField>>(`${this.configuration.basePath}/lb3-api/SysClassFields`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public sysClassFieldFindComplex(body?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<SysClassField>>;\n    public sysClassFieldFindComplex(body?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<SysClassField>>>;\n    public sysClassFieldFindComplex(body?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<SysClassField>>>;\n    public sysClassFieldFindComplex(body?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Array<SysClassField>>(`${this.configuration.basePath}/lb3-api/SysClassFields/findComplex`,\n            body,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { SysClassHasTypeProperty } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SysClassHasTypePropertyService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Find all instances of the model matched by filter from the data source.\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (&#x60;{\\&quot;where\\&quot;:{\\&quot;something\\&quot;:\\&quot;value\\&quot;}}&#x60;).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public sysClassHasTypePropertyFind(filter?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<SysClassHasTypeProperty>>;\n    public sysClassHasTypePropertyFind(filter?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<SysClassHasTypeProperty>>>;\n    public sysClassHasTypePropertyFind(filter?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<SysClassHasTypeProperty>>>;\n    public sysClassHasTypePropertyFind(filter?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<SysClassHasTypeProperty>>(`${this.configuration.basePath}/lb3-api/SysClassHasTypeProperties`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { SysSystemRelevantClass } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SysSystemRelevantClassService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Replace or create all items in the array.\n     * @param sysSystemRelevantClass Array of SysSystemRelevantClass\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public sysSystemRelevantClassBulkReplaceOrCreate(sysSystemRelevantClass: Array<SysSystemRelevantClass>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<SysSystemRelevantClass>>;\n    public sysSystemRelevantClassBulkReplaceOrCreate(sysSystemRelevantClass: Array<SysSystemRelevantClass>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<SysSystemRelevantClass>>>;\n    public sysSystemRelevantClassBulkReplaceOrCreate(sysSystemRelevantClass: Array<SysSystemRelevantClass>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<SysSystemRelevantClass>>>;\n    public sysSystemRelevantClassBulkReplaceOrCreate(sysSystemRelevantClass: Array<SysSystemRelevantClass>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n        if (sysSystemRelevantClass === null || sysSystemRelevantClass === undefined) {\n            throw new Error('Required parameter sysSystemRelevantClass was null or undefined when calling sysSystemRelevantClassBulkReplaceOrCreate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/x-www-form-urlencoded',\n            'application/xml',\n            'text/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Array<SysSystemRelevantClass>>(`${this.configuration.basePath}/lb3-api/SysSystemRelevantClasses/bulk-replace-or-create`,\n            sysSystemRelevantClass,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find all instances of the model matched by filter from the data source.\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (&#x60;{\\&quot;where\\&quot;:{\\&quot;something\\&quot;:\\&quot;value\\&quot;}}&#x60;).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public sysSystemRelevantClassFind(filter?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<SysSystemRelevantClass>>;\n    public sysSystemRelevantClassFind(filter?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<SysSystemRelevantClass>>>;\n    public sysSystemRelevantClassFind(filter?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<SysSystemRelevantClass>>>;\n    public sysSystemRelevantClassFind(filter?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<SysSystemRelevantClass>>(`${this.configuration.basePath}/lb3-api/SysSystemRelevantClasses`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { SysSystemType } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SysSystemTypeService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Find all instances of the model matched by filter from the data source.\n     * @param filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (&#x60;{\\&quot;where\\&quot;:{\\&quot;something\\&quot;:\\&quot;value\\&quot;}}&#x60;).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public sysSystemTypeFind(filter?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<Array<SysSystemType>>;\n    public sysSystemTypeFind(filter?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpResponse<Array<SysSystemType>>>;\n    public sysSystemTypeFind(filter?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<HttpEvent<Array<SysSystemType>>>;\n    public sysSystemTypeFind(filter?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/xml' | 'application/javascript' | 'text/javascript'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (filter !== undefined && filter !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>filter, 'filter');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml',\n                'text/xml',\n                'application/javascript',\n                'text/javascript'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<SysSystemType>>(`${this.configuration.basePath}/lb3-api/SysSystemTypes`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { SysConfigValue } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SystemConfigurationService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public sysConfigControllerGetSystemConfig(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<SysConfigValue>;\n    public sysConfigControllerGetSystemConfig(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<SysConfigValue>>;\n    public sysConfigControllerGetSystemConfig(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<SysConfigValue>>;\n    public sysConfigControllerGetSystemConfig(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<SysConfigValue>(`${this.configuration.basePath}/get-system-config`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param sysConfigValue Sets or updates the system configuration. This affects the basic behavior of geovistory (i.e. for all projects).       The provided (json) value is validated against the json schema. If invalid, the request is rejected and the current configuration stays unchanged.       Hint: You can download the current cofiguration using \\&quot;/get-system-config\\&quot;, modify it and upload the modified version here.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public sysConfigControllerSetSystemConfig(sysConfigValue: SysConfigValue, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public sysConfigControllerSetSystemConfig(sysConfigValue: SysConfigValue, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public sysConfigControllerSetSystemConfig(sysConfigValue: SysConfigValue, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public sysConfigControllerSetSystemConfig(sysConfigValue: SysConfigValue, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (sysConfigValue === null || sysConfigValue === undefined) {\n            throw new Error('Required parameter sysConfigValue was null or undefined when calling sysConfigControllerSetSystemConfig.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/set-system-config`,\n            sysConfigValue,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param sysConfigValue Validates the configuration without persisting it.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public sysConfigControllerValidateSystemConfig(sysConfigValue: SysConfigValue, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public sysConfigControllerValidateSystemConfig(sysConfigValue: SysConfigValue, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public sysConfigControllerValidateSystemConfig(sysConfigValue: SysConfigValue, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public sysConfigControllerValidateSystemConfig(sysConfigValue: SysConfigValue, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (sysConfigValue === null || sysConfigValue === undefined) {\n            throw new Error('Required parameter sysConfigValue was null or undefined when calling sysConfigControllerValidateSystemConfig.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/validate-system-config`,\n            sysConfigValue,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { GetTablePageOptions } from '../model/models';\nimport { GvSchemaObject } from '../model/models';\nimport { TablePageResponse } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TableService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Get the columns of a table (digital) with column names and column mappings.\n     * @param pkProject \n     * @param pkDigital \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tableControllerGetTableColumns(pkProject: number, pkDigital: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<GvSchemaObject>;\n    public tableControllerGetTableColumns(pkProject: number, pkDigital: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<GvSchemaObject>>;\n    public tableControllerGetTableColumns(pkProject: number, pkDigital: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<GvSchemaObject>>;\n    public tableControllerGetTableColumns(pkProject: number, pkDigital: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling tableControllerGetTableColumns.');\n        }\n        if (pkDigital === null || pkDigital === undefined) {\n            throw new Error('Required parameter pkDigital was null or undefined when calling tableControllerGetTableColumns.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkDigital !== undefined && pkDigital !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkDigital, 'pkDigital');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<GvSchemaObject>(`${this.configuration.basePath}/get-columns-of-table`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get rows (with cells) of a table according to the specified columns, limit, offset and sorting.\n     * @param pkProject \n     * @param pkEntity \n     * @param getTablePageOptions \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tableControllerGetTablePage(pkProject: number, pkEntity: number, getTablePageOptions?: GetTablePageOptions, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<TablePageResponse>;\n    public tableControllerGetTablePage(pkProject: number, pkEntity: number, getTablePageOptions?: GetTablePageOptions, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<TablePageResponse>>;\n    public tableControllerGetTablePage(pkProject: number, pkEntity: number, getTablePageOptions?: GetTablePageOptions, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<TablePageResponse>>;\n    public tableControllerGetTablePage(pkProject: number, pkEntity: number, getTablePageOptions?: GetTablePageOptions, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (pkProject === null || pkProject === undefined) {\n            throw new Error('Required parameter pkProject was null or undefined when calling tableControllerGetTablePage.');\n        }\n        if (pkEntity === null || pkEntity === undefined) {\n            throw new Error('Required parameter pkEntity was null or undefined when calling tableControllerGetTablePage.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pkProject !== undefined && pkProject !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkProject, 'pkProject');\n        }\n        if (pkEntity !== undefined && pkEntity !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pkEntity, 'pkEntity');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<TablePageResponse>(`${this.configuration.basePath}/get-table-page`,\n            getTablePageOptions,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { WarEntityPreview } from '../model/models';\nimport { WarEntityPreviewPaginatedByPkReq } from '../model/models';\nimport { WarEntityPreviewSearchExistingReq } from '../model/models';\nimport { WareEntityPreviewPage } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WarEntityPreviewControllerService {\n\n    protected basePath = 'http://0.0.0.0:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param warEntityPreviewPaginatedByPkReq \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public warEntityPreviewControllerPaginatedListByPks(warEntityPreviewPaginatedByPkReq?: WarEntityPreviewPaginatedByPkReq, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<WarEntityPreview>>;\n    public warEntityPreviewControllerPaginatedListByPks(warEntityPreviewPaginatedByPkReq?: WarEntityPreviewPaginatedByPkReq, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<WarEntityPreview>>>;\n    public warEntityPreviewControllerPaginatedListByPks(warEntityPreviewPaginatedByPkReq?: WarEntityPreviewPaginatedByPkReq, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<WarEntityPreview>>>;\n    public warEntityPreviewControllerPaginatedListByPks(warEntityPreviewPaginatedByPkReq?: WarEntityPreviewPaginatedByPkReq, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<Array<WarEntityPreview>>(`${this.configuration.basePath}/war-entity-previews/paginated-list-by-pks`,\n            warEntityPreviewPaginatedByPkReq,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param warEntityPreviewSearchExistingReq \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public warEntityPreviewControllerSearch(warEntityPreviewSearchExistingReq?: WarEntityPreviewSearchExistingReq, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<WareEntityPreviewPage>;\n    public warEntityPreviewControllerSearch(warEntityPreviewSearchExistingReq?: WarEntityPreviewSearchExistingReq, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<WareEntityPreviewPage>>;\n    public warEntityPreviewControllerSearch(warEntityPreviewSearchExistingReq?: WarEntityPreviewSearchExistingReq, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<WareEntityPreviewPage>>;\n    public warEntityPreviewControllerSearch(warEntityPreviewSearchExistingReq?: WarEntityPreviewSearchExistingReq, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<WareEntityPreviewPage>(`${this.configuration.basePath}/war-entity-previews/search`,\n            warEntityPreviewSearchExistingReq,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param warEntityPreviewSearchExistingReq \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public warEntityPreviewControllerSearchExisting(warEntityPreviewSearchExistingReq?: WarEntityPreviewSearchExistingReq, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<WareEntityPreviewPage>;\n    public warEntityPreviewControllerSearchExisting(warEntityPreviewSearchExistingReq?: WarEntityPreviewSearchExistingReq, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<WareEntityPreviewPage>>;\n    public warEntityPreviewControllerSearchExisting(warEntityPreviewSearchExistingReq?: WarEntityPreviewSearchExistingReq, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<WareEntityPreviewPage>>;\n    public warEntityPreviewControllerSearchExisting(warEntityPreviewSearchExistingReq?: WarEntityPreviewSearchExistingReq, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (accesstoken) required\n        credential = this.configuration.lookupCredential('accesstoken');\n        if (credential) {\n            headers = headers.set('authorization', credential);\n        }\n\n        // authentication (jwt) required\n        credential = this.configuration.lookupCredential('jwt');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<WareEntityPreviewPage>(`${this.configuration.basePath}/war-entity-previews/search-existing`,\n            warEntityPreviewSearchExistingReq,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './account.service';\nimport { AccountService } from './account.service';\nexport * from './analysis.service';\nimport { AnalysisService } from './analysis.service';\nexport * from './contentTree.service';\nimport { ContentTreeService } from './contentTree.service';\nexport * from './datChunk.service';\nimport { DatChunkService } from './datChunk.service';\nexport * from './datChunkController.service';\nimport { DatChunkControllerService } from './datChunkController.service';\nexport * from './datColumn.service';\nimport { DatColumnService } from './datColumn.service';\nexport * from './datDigital.service';\nimport { DatDigitalService } from './datDigital.service';\nexport * from './datNamespace.service';\nimport { DatNamespaceService } from './datNamespace.service';\nexport * from './dfhClassController.service';\nimport { DfhClassControllerService } from './dfhClassController.service';\nexport * from './dfhLabel.service';\nimport { DfhLabelService } from './dfhLabel.service';\nexport * from './dfhProfile.service';\nimport { DfhProfileService } from './dfhProfile.service';\nexport * from './dfhPropertyController.service';\nimport { DfhPropertyControllerService } from './dfhPropertyController.service';\nexport * from './factoidController.service';\nimport { FactoidControllerService } from './factoidController.service';\nexport * from './importTableController.service';\nimport { ImportTableControllerService } from './importTableController.service';\nexport * from './infLanguage.service';\nimport { InfLanguageService } from './infLanguage.service';\nexport * from './infPersistentItem.service';\nimport { InfPersistentItemService } from './infPersistentItem.service';\nexport * from './infPlace.service';\nimport { InfPlaceService } from './infPlace.service';\nexport * from './infStatement.service';\nimport { InfStatementService } from './infStatement.service';\nexport * from './infTemporalEntity.service';\nimport { InfTemporalEntityService } from './infTemporalEntity.service';\nexport * from './infTextProperty.service';\nimport { InfTextPropertyService } from './infTextProperty.service';\nexport * from './pingController.service';\nimport { PingControllerService } from './pingController.service';\nexport * from './proClassFieldConfig.service';\nimport { ProClassFieldConfigService } from './proClassFieldConfig.service';\nexport * from './proDfhClassProjRel.service';\nimport { ProDfhClassProjRelService } from './proDfhClassProjRel.service';\nexport * from './proDfhProfileProjRel.service';\nimport { ProDfhProfileProjRelService } from './proDfhProfileProjRel.service';\nexport * from './proInfoProjRel.service';\nimport { ProInfoProjRelService } from './proInfoProjRel.service';\nexport * from './proProject.service';\nimport { ProProjectService } from './proProject.service';\nexport * from './proTextProperty.service';\nimport { ProTextPropertyService } from './proTextProperty.service';\nexport * from './projectConfiguration.service';\nimport { ProjectConfigurationService } from './projectConfiguration.service';\nexport * from './pubAccount.service';\nimport { PubAccountService } from './pubAccount.service';\nexport * from './ramList.service';\nimport { RamListService } from './ramList.service';\nexport * from './schemaObject.service';\nimport { SchemaObjectService } from './schemaObject.service';\nexport * from './subfieldPageController.service';\nimport { SubfieldPageControllerService } from './subfieldPageController.service';\nexport * from './sysClassField.service';\nimport { SysClassFieldService } from './sysClassField.service';\nexport * from './sysClassHasTypeProperty.service';\nimport { SysClassHasTypePropertyService } from './sysClassHasTypeProperty.service';\nexport * from './sysSystemRelevantClass.service';\nimport { SysSystemRelevantClassService } from './sysSystemRelevantClass.service';\nexport * from './sysSystemType.service';\nimport { SysSystemTypeService } from './sysSystemType.service';\nexport * from './systemConfiguration.service';\nimport { SystemConfigurationService } from './systemConfiguration.service';\nexport * from './table.service';\nimport { TableService } from './table.service';\nexport * from './warEntityPreviewController.service';\nimport { WarEntityPreviewControllerService } from './warEntityPreviewController.service';\nexport const APIS = [AccountService, AnalysisService, ContentTreeService, DatChunkService, DatChunkControllerService, DatColumnService, DatDigitalService, DatNamespaceService, DfhClassControllerService, DfhLabelService, DfhProfileService, DfhPropertyControllerService, FactoidControllerService, ImportTableControllerService, InfLanguageService, InfPersistentItemService, InfPlaceService, InfStatementService, InfTemporalEntityService, InfTextPropertyService, PingControllerService, ProClassFieldConfigService, ProDfhClassProjRelService, ProDfhProfileProjRelService, ProInfoProjRelService, ProProjectService, ProTextPropertyService, ProjectConfigurationService, PubAccountService, RamListService, SchemaObjectService, SubfieldPageControllerService, SysClassFieldService, SysClassHasTypePropertyService, SysSystemRelevantClassService, SysSystemTypeService, SystemConfigurationService, TableService, WarEntityPreviewControllerService];\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { QueryDefinition } from './queryDefinition';\nimport { TimeChartContLine } from './timeChartContLine';\n\n\nexport interface AnalysisDefinition { \n    queryDefinition?: QueryDefinition;\n    lines?: Array<TimeChartContLine>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { AnalysisDefinition } from './analysisDefinition';\n\n\nexport interface AnalysisMapRequest { \n    analysisDefinition: AnalysisDefinition;\n    fkProject: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { GeoEntityMapAndTimeCont } from './geoEntityMapAndTimeCont';\n\n\nexport interface AnalysisMapResponse { \n    geoPlaces: Array<GeoEntityMapAndTimeCont>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { WarEntityPreview } from './warEntityPreview';\nimport { AnalysisTableCellValue } from './analysisTableCellValue';\n\n\nexport interface AnalysisTableCell { \n    entity?: WarEntityPreview;\n    entityLabel?: string;\n    entityClassLabel?: string;\n    entityTypeLabel?: string;\n    value?: AnalysisTableCellValue;\n    entities?: Array<WarEntityPreview>;\n    values?: Array<AnalysisTableCellValue>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { WarStatementObjectValue } from './warStatementObjectValue';\n\n\nexport interface AnalysisTableCellValue { \n    value?: WarStatementObjectValue;\n    pkStatement?: number;\n    fkSubjectInfo?: number;\n    fkObjectInfo?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { AnalysisDefinition } from './analysisDefinition';\n\n\nexport interface AnalysisTableExportRequest { \n    fileType: AnalysisTableExportRequest.FileTypeEnum;\n    analysisDefinition: AnalysisDefinition;\n    fkProject: number;\n}\nexport namespace AnalysisTableExportRequest {\n    export type FileTypeEnum = 'json' | 'csv';\n    export const FileTypeEnum = {\n        Json: 'json' as FileTypeEnum,\n        Csv: 'csv' as FileTypeEnum\n    };\n}\n\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface AnalysisTableExportResponse { \n    res?: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { AnalysisDefinition } from './analysisDefinition';\n\n\nexport interface AnalysisTableRequest { \n    analysisDefinition: AnalysisDefinition;\n    fkProject: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { AnalysisTableCell } from './analysisTableCell';\n\n\nexport interface AnalysisTableResponse { \n    rows: Array<{ [key: string]: AnalysisTableCell; }>;\n    full_count?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { TimeChartContLine } from './timeChartContLine';\n\n\nexport interface AnalysisTimeChartRequest { \n    lines: Array<TimeChartContLine>;\n    fkProject: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { ChartLine } from './chartLine';\n\n\nexport interface AnalysisTimeChartResponse { \n    activeLine: number;\n    chartLines: Array<ChartLine>;\n    mouseX?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { ChartLinePoint } from './chartLinePoint';\n\n\nexport interface ChartLine { \n    label: string;\n    linePoints: Array<ChartLinePoint>;\n    pkEntities?: Array<number>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ChartLinePoint { \n    x: number;\n    y: number;\n    data?: Array<number>;\n    data_ref?: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { SysConfigValueObjectType } from './sysConfigValueObjectType';\n\n\n/**\n * System wide configuration for the class.\n */\nexport interface ClassConfig { \n    valueObjectType?: SysConfigValueObjectType;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { ClassConfig } from './classConfig';\n\n\nexport interface ClassesIndex { \n  [key: string]: ClassConfig | any;\n\n\n    _1?: ClassConfig;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { QueryPathSegment } from './queryPathSegment';\n\n\nexport interface ColDef { \n    ofRootTable?: boolean;\n    preventGroupBy?: boolean;\n    defaultType?: ColDef.DefaultTypeEnum;\n    label?: string;\n    id: string;\n    queryPath?: Array<QueryPathSegment>;\n}\nexport namespace ColDef {\n    export type DefaultTypeEnum = 'entity_preview' | 'entity_label' | 'class_label' | 'type_label' | 'temporal_distribution' | 'space_and_time_cont';\n    export const DefaultTypeEnum = {\n        EntityPreview: 'entity_preview' as DefaultTypeEnum,\n        EntityLabel: 'entity_label' as DefaultTypeEnum,\n        ClassLabel: 'class_label' as DefaultTypeEnum,\n        TypeLabel: 'type_label' as DefaultTypeEnum,\n        TemporalDistribution: 'temporal_distribution' as DefaultTypeEnum,\n        SpaceAndTimeCont: 'space_and_time_cont' as DefaultTypeEnum\n    };\n}\n\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface CzmlSpatialValue { \n    latitude: number;\n    longitude: number;\n    from?: number;\n    to?: number;\n    iso_to?: string;\n    iso_from?: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface DatChunk { \n    quill_doc?: object;\n    string?: string;\n    fk_text: number;\n    fk_entity_version: number;\n    pk_entity?: number;\n    fk_namespace?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface DatChunkFields { \n    pk_entity?: boolean;\n    quill_doc?: boolean;\n    string?: boolean;\n    fk_entity_version?: boolean;\n    fk_text?: boolean;\n    fk_namespace?: boolean;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { DatChunkFields } from './datChunkFields';\nimport { DatChunkIncludeFilterItems } from './datChunkIncludeFilterItems';\n\n\nexport interface DatChunkFilter { \n    offset?: number;\n    limit?: number;\n    skip?: number;\n    order?: string | Array<string>;\n    fields?: DatChunkFields;\n    include?: Array<DatChunkIncludeFilterItems>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { DatChunkScopeFilter } from './datChunkScopeFilter';\n\n\nexport interface DatChunkIncludeFilterItems { \n    relation?: string;\n    scope?: DatChunkScopeFilter;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface DatChunkScopeFilter { \n    offset?: number;\n    limit?: number;\n    skip?: number;\n    order?: string | Array<string>;\n    where?: { [key: string]: object; };\n    fields?: { [key: string]: object; };\n    include?: Array<{ [key: string]: object; }>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { InfStatementWithRelations } from './infStatementWithRelations';\nimport { DatNamespaceWithRelations } from './datNamespaceWithRelations';\nimport { DatDigitalWithRelations } from './datDigitalWithRelations';\n\n\n/**\n * (tsType: DatChunkWithRelations, schemaOptions: { includeRelations: true })\n */\nexport interface DatChunkWithRelations { \n    pk_entity?: number;\n    quill_doc?: object;\n    string?: string;\n    fk_entity_version: number;\n    fk_text: number;\n    fk_namespace: number;\n    outgoing_statements?: Array<InfStatementWithRelations>;\n    digital?: DatDigitalWithRelations;\n    namespace?: DatNamespaceWithRelations;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface DatClassColumnMapping { \n    pk_entity?: number;\n    fk_class?: number;\n    fk_column?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface DatColumn { \n    fk_digital?: number;\n    fk_data_type?: number;\n    fk_column_content_type?: number;\n    fk_column_relationship_type?: number;\n    fk_original_column?: number;\n    is_imported?: boolean;\n    pk_entity?: number;\n    fk_namespace?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface DatDigital { \n    entity_version?: number;\n    pk_text?: number;\n    quill_doc?: object;\n    string?: string;\n    fk_system_type?: number;\n    pk_entity?: number;\n    fk_namespace?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { DatNamespaceWithRelations } from './datNamespaceWithRelations';\n\n\n/**\n * (tsType: DatDigitalWithRelations, schemaOptions: { includeRelations: true })\n */\nexport interface DatDigitalWithRelations { \n    pk_entity?: number;\n    entity_version?: number;\n    pk_text?: number;\n    quill_doc?: object;\n    string?: string;\n    fk_system_type?: number;\n    fk_namespace?: number;\n    namespace?: DatNamespaceWithRelations;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface DatNamespace { \n    pk_entity?: number;\n    fk_root_namespace?: number;\n    fk_project: number;\n    standard_label: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: DatNamespaceWithRelations, schemaOptions: { includeRelations: true })\n */\nexport interface DatNamespaceWithRelations { \n    pk_entity?: number;\n    fk_root_namespace?: number;\n    fk_project: number;\n    standard_label: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { DatTextProperty } from './datTextProperty';\nimport { DatDigital } from './datDigital';\nimport { DatClassColumnMapping } from './datClassColumnMapping';\nimport { DatColumn } from './datColumn';\n\n\nexport interface DatObject { \n    digital?: Array<DatDigital>;\n    column?: Array<DatColumn>;\n    text_property?: Array<DatTextProperty>;\n    class_column_mapping?: Array<DatClassColumnMapping>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface DatTextProperty { \n    pk_entity?: number;\n    string?: string;\n    quill_doc?: object;\n    fk_system_type?: number;\n    fk_language?: number;\n    fk_entity?: number;\n    fk_namespace?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface DfhApiProfile { \n    pk_entity?: number;\n    dfh_pk_profile?: number;\n    tmsp_last_dfh_update?: string;\n    is_enabled_in_profile?: boolean;\n    removed_from_api?: boolean;\n    requested_language?: string;\n    dfh_profile_label_language?: string;\n    dfh_profile_label?: string;\n    dfh_profile_definition_language?: string;\n    dfh_profile_definition?: string;\n    dfh_owned_by_project?: number;\n    dfh_project_label_language?: string;\n    dfh_project_label?: string;\n    dfh_is_ongoing_forced_publication?: boolean;\n    dfh_date_profile_published?: string;\n    dfh_date_profile_deprecated?: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { RelatedProfile } from './relatedProfile';\n\n\nexport interface DfhClass { \n    pk_class?: number;\n    identifier_in_namespace?: string;\n    basic_type?: number;\n    profiles?: Array<RelatedProfile>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface DfhLabel { \n    type: string;\n    label?: string;\n    language?: string;\n    fk_profile?: number;\n    fk_project?: number;\n    fk_property?: number;\n    fk_class?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { DfhApiProfile } from './dfhApiProfile';\nimport { DfhClass } from './dfhClass';\nimport { DfhProperty } from './dfhProperty';\nimport { DfhLabel } from './dfhLabel';\n\n\nexport interface DfhObject { \n    profile?: Array<DfhApiProfile>;\n    klass?: Array<DfhClass>;\n    property?: Array<DfhProperty>;\n    label?: Array<DfhLabel>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface DfhProfile { \n    pk_profile: number;\n    owned_by_project?: number;\n    is_ongoing_forced_publication?: boolean;\n    date_profile_published?: string;\n    date_profile_deprecated?: string;\n    tmsp_last_dfh_update?: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { RelatedProfile } from './relatedProfile';\n\n\nexport interface DfhProperty { \n    pk_property: number;\n    is_inherited?: boolean;\n    has_domain: number;\n    domain_instances_min_quantifier?: number;\n    domain_instances_max_quantifier?: number;\n    has_range: number;\n    range_instances_min_quantifier?: number;\n    range_instances_max_quantifier?: number;\n    identity_defining?: boolean;\n    is_has_type_subproperty?: boolean;\n    identifier_in_namespace?: string;\n    profiles?: Array<RelatedProfile>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * This list type allows to create / view / edit a numeric value with a measurement unit.\n */\nexport interface DimensionValueObjectType { \n    measurementUnitClass: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { LabelPart } from './labelPart';\n\n\nexport interface EntityLabelConfig { \n    labelParts?: Array<LabelPart>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { InfStatement } from './infStatement';\nimport { WarEntityPreviewTimeSpan } from './warEntityPreviewTimeSpan';\n\n\nexport interface EntitySearchHit { \n    pk_entity?: number;\n    fk_project?: number;\n    project: number;\n    fk_class: number;\n    class_label?: string;\n    entity_label?: string;\n    entity_type?: string;\n    type_label?: string;\n    fk_type?: number;\n    time_span?: WarEntityPreviewTimeSpan;\n    first_second?: string;\n    last_second?: string;\n    tmsp_last_modification?: string;\n    full_text_headline?: string;\n    class_label_headline?: string;\n    entity_label_headline?: string;\n    type_label_headline?: string;\n    projects?: Array<number>;\n    related_statements?: Array<InfStatement>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { FactoidStatement } from './factoidStatement';\n\n\nexport interface FactoidEntity { \n    pkDigital?: number;\n    pkClass?: number;\n    pkRow?: number;\n    pkColumn?: number;\n    pkFactoidMapping?: number;\n    headerStatements?: Array<FactoidStatement>;\n    bodyStatements?: Array<FactoidStatement>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface FactoidStatement { \n    fkProperty?: number;\n    isOutgoing?: boolean;\n    value?: string;\n    pkEntity?: number;\n    pkCell?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { WarEntityPreviewWithFulltext } from './warEntityPreviewWithFulltext';\nimport { CzmlSpatialValue } from './czmlSpatialValue';\nimport { MapTemporalData } from './mapTemporalData';\n\n\nexport interface GeoEntityMapAndTimeCont { \n    geo_entity_pk: number;\n    geo_entity_preview: WarEntityPreviewWithFulltext;\n    geo_positions: Array<CzmlSpatialValue>;\n    pk_entities: Array<number>;\n    temporal_data: MapTemporalData;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { ProEntityLabelConfig } from './proEntityLabelConfig';\n\n\nexport interface GetEntityLabelConfigResponse { \n    defaultConfig?: ProEntityLabelConfig;\n    customConfig?: ProEntityLabelConfig;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { FactoidEntity } from './factoidEntity';\n\n\nexport interface GetFactoidsFromEntityResponse { \n    pkEntity?: string;\n    factoidEntities?: Array<FactoidEntity>;\n    totalLength?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { TColFilters } from './tColFilters';\n\n\nexport interface GetTablePageOptions { \n    limit: number;\n    offset: number;\n    columns?: Array<string>;\n    sortBy: string;\n    sortDirection: GetTablePageOptions.SortDirectionEnum;\n    filters?: TColFilters;\n}\nexport namespace GetTablePageOptions {\n    export type SortDirectionEnum = 'ASC' | 'DESC';\n    export const SortDirectionEnum = {\n        Asc: 'ASC' as SortDirectionEnum,\n        Desc: 'DESC' as SortDirectionEnum\n    };\n}\n\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { GvSubentitySubfieldType } from './gvSubentitySubfieldType';\nimport { GvSubentitySubfieldPage } from './gvSubentitySubfieldPage';\n\n\nexport interface GvLoadSubentitySubfieldPageReq { \n    page: GvSubentitySubfieldPage;\n    subfieldType: GvSubentitySubfieldType;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { GvSubfieldPage } from './gvSubfieldPage';\nimport { GvSubfieldType } from './gvSubfieldType';\n\n\nexport interface GvLoadSubfieldPageReq { \n    pkProject: number;\n    page: GvSubfieldPage;\n    subfieldType: GvSubfieldType;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { GvPaginationStatementFilter } from './gvPaginationStatementFilter';\n\n\nexport interface GvPaginationAlternativeLeafItemsReq { \n    pkProject?: number;\n    filterObject?: GvPaginationStatementFilter;\n    limit?: number;\n    offset?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { GvSchemaObject } from './gvSchemaObject';\nimport { GvSubfieldPageInfo } from './gvSubfieldPageInfo';\n\n\nexport interface GvPaginationObject { \n    schemas: GvSchemaObject;\n    subfieldPages: Array<GvSubfieldPageInfo>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GvPaginationStatementFilter { \n    fk_subject_info?: number;\n    fk_subject_data?: number;\n    fk_subject_tables_row?: number;\n    fk_subject_tables_cell?: number;\n    fk_property?: number;\n    fk_property_of_property?: number;\n    fk_object_info?: number;\n    fk_object_data?: number;\n    fk_object_tables_row?: number;\n    fk_object_tables_cell?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { DatObject } from './datObject';\nimport { InfObject } from './infObject';\nimport { DfhObject } from './dfhObject';\nimport { WarObject } from './warObject';\nimport { SysObject } from './sysObject';\nimport { ProObject } from './proObject';\n\n\nexport interface GvSchemaObject { \n    inf?: InfObject;\n    pro?: ProObject;\n    dat?: DatObject;\n    war?: WarObject;\n    dfh?: DfhObject;\n    sys?: SysObject;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface GvSubentitySubfieldPage { \n    fkProperty: number;\n    isOutgoing: boolean;\n    targetClass: number;\n    limit: number;\n    offset: number;\n    isCircular: boolean;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { DimensionValueObjectType } from './dimensionValueObjectType';\n\n\n/**\n * If present, defines a specific list type for the class.\n */\nexport interface GvSubentitySubfieldType { \n    appellation?: GvSubentitySubfieldType.AppellationEnum;\n    language?: GvSubentitySubfieldType.LanguageEnum;\n    place?: GvSubentitySubfieldType.PlaceEnum;\n    timePrimitive?: GvSubentitySubfieldType.TimePrimitiveEnum;\n    langString?: GvSubentitySubfieldType.LangStringEnum;\n    dimension?: DimensionValueObjectType;\n    entityPreview?: GvSubentitySubfieldType.EntityPreviewEnum;\n    typeItem?: GvSubentitySubfieldType.TypeItemEnum;\n    timeSpan?: GvSubentitySubfieldType.TimeSpanEnum;\n    textProperty?: GvSubentitySubfieldType.TextPropertyEnum;\n}\nexport namespace GvSubentitySubfieldType {\n    export type AppellationEnum = 'true';\n    export const AppellationEnum = {\n        True: 'true' as AppellationEnum\n    };\n    export type LanguageEnum = 'true';\n    export const LanguageEnum = {\n        True: 'true' as LanguageEnum\n    };\n    export type PlaceEnum = 'true';\n    export const PlaceEnum = {\n        True: 'true' as PlaceEnum\n    };\n    export type TimePrimitiveEnum = 'true';\n    export const TimePrimitiveEnum = {\n        True: 'true' as TimePrimitiveEnum\n    };\n    export type LangStringEnum = 'true';\n    export const LangStringEnum = {\n        True: 'true' as LangStringEnum\n    };\n    export type EntityPreviewEnum = 'true';\n    export const EntityPreviewEnum = {\n        True: 'true' as EntityPreviewEnum\n    };\n    export type TypeItemEnum = 'true';\n    export const TypeItemEnum = {\n        True: 'true' as TypeItemEnum\n    };\n    export type TimeSpanEnum = 'true';\n    export const TimeSpanEnum = {\n        True: 'true' as TimeSpanEnum\n    };\n    export type TextPropertyEnum = 'true';\n    export const TextPropertyEnum = {\n        True: 'true' as TextPropertyEnum\n    };\n}\n\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { GvSubfieldPageScope } from './gvSubfieldPageScope';\n\n\nexport interface GvSubfieldId { \n    fkSourceEntity: number;\n    fkProperty: number;\n    isOutgoing: boolean;\n    targetClass: number;\n    scope: GvSubfieldPageScope;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { GvSubfieldPageScope } from './gvSubfieldPageScope';\n\n\nexport interface GvSubfieldPage { \n    fkProperty: number;\n    isOutgoing: boolean;\n    targetClass: number;\n    limit: number;\n    offset: number;\n    fkSourceEntity: number;\n    scope: GvSubfieldPageScope;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { GvSubfieldPage } from './gvSubfieldPage';\n\n\nexport interface GvSubfieldPageInfo { \n    page: GvSubfieldPage;\n    count: number;\n    paginatedStatements: Array<number>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * If present, defines a specific list type for the class.\n */\nexport interface GvSubfieldPageScope { \n    inProject?: number;\n    notInProject?: number;\n    inRepo?: boolean;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { GvLoadSubentitySubfieldPageReq } from './gvLoadSubentitySubfieldPageReq';\nimport { DimensionValueObjectType } from './dimensionValueObjectType';\n\n\n/**\n * If present, defines a specific list type for the class.\n */\nexport interface GvSubfieldType { \n    appellation?: GvSubfieldType.AppellationEnum;\n    language?: GvSubfieldType.LanguageEnum;\n    place?: GvSubfieldType.PlaceEnum;\n    timePrimitive?: GvSubfieldType.TimePrimitiveEnum;\n    langString?: GvSubfieldType.LangStringEnum;\n    dimension?: DimensionValueObjectType;\n    entityPreview?: GvSubfieldType.EntityPreviewEnum;\n    typeItem?: GvSubfieldType.TypeItemEnum;\n    timeSpan?: GvSubfieldType.TimeSpanEnum;\n    textProperty?: GvSubfieldType.TextPropertyEnum;\n    temporalEntity?: Array<GvLoadSubentitySubfieldPageReq>;\n}\nexport namespace GvSubfieldType {\n    export type AppellationEnum = 'true';\n    export const AppellationEnum = {\n        True: 'true' as AppellationEnum\n    };\n    export type LanguageEnum = 'true';\n    export const LanguageEnum = {\n        True: 'true' as LanguageEnum\n    };\n    export type PlaceEnum = 'true';\n    export const PlaceEnum = {\n        True: 'true' as PlaceEnum\n    };\n    export type TimePrimitiveEnum = 'true';\n    export const TimePrimitiveEnum = {\n        True: 'true' as TimePrimitiveEnum\n    };\n    export type LangStringEnum = 'true';\n    export const LangStringEnum = {\n        True: 'true' as LangStringEnum\n    };\n    export type EntityPreviewEnum = 'true';\n    export const EntityPreviewEnum = {\n        True: 'true' as EntityPreviewEnum\n    };\n    export type TypeItemEnum = 'true';\n    export const TypeItemEnum = {\n        True: 'true' as TypeItemEnum\n    };\n    export type TimeSpanEnum = 'true';\n    export const TimeSpanEnum = {\n        True: 'true' as TimeSpanEnum\n    };\n    export type TextPropertyEnum = 'true';\n    export const TextPropertyEnum = {\n        True: 'true' as TextPropertyEnum\n    };\n}\n\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface Header { \n    colLabel?: string;\n    comment?: string;\n    type?: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { HttpErrorObjectModel } from './httpErrorObjectModel';\n\n\nexport interface HttpErrorModel { \n    error?: HttpErrorObjectModel;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface HttpErrorObjectModel { \n    statusCode?: number;\n    name?: string;\n    message?: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { Header } from './header';\n\n\nexport interface ImportTable { \n    tableName: string;\n    fileName: string;\n    pk_language: number;\n    headers: Array<Header>;\n    rows: Array<Array<string>>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ImportTableResponse { \n    error?: string;\n    fk_digital?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface InfAppellation { \n    pk_entity?: number;\n    quill_doc?: object;\n    fk_class: number;\n    string?: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface InfDimension { \n    pk_entity?: number;\n    fk_class: number;\n    fk_measurement_unit: number;\n    numeric_value?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface InfLangString { \n    pk_entity?: number;\n    fk_class: number;\n    quill_doc?: object;\n    string?: string;\n    fk_language?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface InfLanguage { \n    fk_class?: number;\n    pk_language?: string;\n    lang_type?: string;\n    scope?: string;\n    iso6392b?: string;\n    iso6392t?: string;\n    iso6391?: string;\n    notes?: string;\n    pk_entity?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { InfTimePrimitive } from './infTimePrimitive';\nimport { InfPersistentItem } from './infPersistentItem';\nimport { InfAppellation } from './infAppellation';\nimport { InfStatement } from './infStatement';\nimport { InfDimension } from './infDimension';\nimport { InfLangString } from './infLangString';\nimport { InfTemporalEntity } from './infTemporalEntity';\nimport { InfPlace } from './infPlace';\nimport { InfTextProperty } from './infTextProperty';\nimport { InfLanguage } from './infLanguage';\n\n\nexport interface InfObject { \n    persistent_item?: Array<InfPersistentItem>;\n    temporal_entity?: Array<InfTemporalEntity>;\n    statement?: Array<InfStatement>;\n    place?: Array<InfPlace>;\n    language?: Array<InfLanguage>;\n    appellation?: Array<InfAppellation>;\n    time_primitive?: Array<InfTimePrimitive>;\n    text_property?: Array<InfTextProperty>;\n    lang_string?: Array<InfLangString>;\n    dimension?: Array<InfDimension>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface InfPersistentItem { \n    fk_class: number;\n    pk_entity?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface InfPlace {\n  long: number;\n  lat: number;\n  fk_class: number;\n  pk_entity?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface InfStatement { \n    fk_subject_info?: number;\n    fk_subject_data?: number;\n    fk_subject_tables_cell?: number;\n    fk_subject_tables_row?: number;\n    fk_property?: number;\n    fk_property_of_property?: number;\n    fk_object_info?: number;\n    fk_object_data?: number;\n    fk_object_tables_cell?: number;\n    fk_object_tables_row?: number;\n    is_in_project_count?: number;\n    is_standard_in_project_count?: number;\n    community_favorite_calendar?: string;\n    pk_entity?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { ProInfoProjRelWithRelations } from './proInfoProjRelWithRelations';\n\n\n/**\n * (tsType: InfStatementWithRelations, schemaOptions: { includeRelations: true })\n */\nexport interface InfStatementWithRelations { \n    pk_entity?: number;\n    fk_subject_info?: number;\n    fk_subject_data?: number;\n    fk_subject_tables_cell?: number;\n    fk_subject_tables_row?: string;\n    fk_property?: number;\n    fk_property_of_property?: number;\n    fk_object_info?: number;\n    fk_object_data?: number;\n    fk_object_tables_cell?: number;\n    fk_object_tables_row?: number;\n    is_in_project_count?: number;\n    is_standard_in_project_count?: number;\n    community_favorite_calendar?: string;\n    entity_version_project_rels?: Array<ProInfoProjRelWithRelations>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface InfTemporalEntity { \n    fk_class: number;\n    pk_entity?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface InfTextProperty { \n    fk_class_field: number;\n    fk_concerned_entity: number;\n    fk_language: number;\n    quill_doc: object;\n    string?: string;\n    pk_entity?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface InfTimePrimitive { \n    pk_entity?: number;\n    fk_class: number;\n    julian_day: number;\n    duration: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { LabelPartField } from './labelPartField';\n\n\nexport interface LabelPart { \n    field?: LabelPartField;\n    ordNum?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface LabelPartField { \n    fkProperty?: number;\n    isOutgoing?: boolean;\n    nrOfStatementsInLabel?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface LoginRequest { \n    email: string;\n    password: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { PubAccount } from './pubAccount';\n\n\nexport interface LoginResponse { \n    user?: PubAccount;\n    lb4Token?: string;\n    lb4ExpiresInMs?: number;\n    lb3Token?: string;\n    lb3Ttl?: number;\n    lb3Created?: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { TimeCzmlValue } from './timeCzmlValue';\nimport { ChartLinePoint } from './chartLinePoint';\n\n\nexport interface MapTemporalData { \n    data_lookup?: { [key: string]: Array<number>; };\n    timeLinePoints: Array<ChartLinePoint>;\n    timeCzmlValues: Array<TimeCzmlValue>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface NewProDfhClassProjRel { \n    fk_class: number;\n    fk_project: number;\n    enabled_in_entities?: boolean;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface PingResponse { \n    greeting?: string;\n    date?: string;\n    url?: string;\n    headers?: { [key: string]: object; };\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { AnalysisDefinition } from './analysisDefinition';\n\n\nexport interface ProAnalysis { \n    pk_entity?: number;\n    name: string;\n    description?: string | null;\n    analysis_definition: AnalysisDefinition;\n    fk_project: number;\n    fk_analysis_type: number;\n    fk_last_modifier?: number | null;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ProClassFieldConfig { \n    pk_entity?: number;\n    fk_project?: number;\n    fk_property?: number;\n    fk_class_field?: number;\n    fk_domain_class?: number;\n    fk_range_class?: number;\n    ord_num?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ProDfhClassProjRel { \n    pk_entity?: number;\n    fk_class: number;\n    fk_project: number;\n    enabled_in_entities?: boolean;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ProDfhProfileProjRel { \n    pk_entity?: number;\n    fk_profile: number;\n    fk_project: number;\n    enabled?: boolean;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { EntityLabelConfig } from './entityLabelConfig';\n\n\nexport interface ProEntityLabelConfig { \n    pk_entity?: number;\n    fk_project: number;\n    fk_class: number;\n    config: EntityLabelConfig;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ProInfoProjRel { \n    fk_project: number;\n    fk_entity?: number;\n    fk_entity_version?: string;\n    fk_entity_version_concat?: string;\n    is_in_project?: boolean;\n    is_standard_in_project?: boolean;\n    calendar?: string;\n    ord_num_of_domain?: number;\n    ord_num_of_range?: number;\n    ord_num_of_text_property?: number;\n    tmsp_last_modification?: string;\n    fk_creator?: number;\n    fk_last_modifier: number;\n    pk_entity?: number;\n    entity_version?: number;\n    tmsp_creation?: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: ProInfoProjRelWithRelations, schemaOptions: { includeRelations: true })\n */\nexport interface ProInfoProjRelWithRelations { \n    pk_entity?: number;\n    fk_project: number;\n    fk_entity?: number;\n    fk_entity_version?: string;\n    fk_entity_version_concat?: string;\n    is_in_project?: boolean;\n    is_standard_in_project?: boolean;\n    calendar?: string;\n    ord_num_of_domain?: number;\n    ord_num_of_range?: number;\n    ord_num_of_text_property?: number;\n    fk_creator?: number;\n    fk_last_modifier: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { ProInfoProjRel } from './proInfoProjRel';\nimport { ProDfhProfileProjRel } from './proDfhProfileProjRel';\nimport { ProProject } from './proProject';\nimport { ProClassFieldConfig } from './proClassFieldConfig';\nimport { ProDfhClassProjRel } from './proDfhClassProjRel';\nimport { ProAnalysis } from './proAnalysis';\nimport { ProTextProperty } from './proTextProperty';\n\n\nexport interface ProObject { \n    info_proj_rel?: Array<ProInfoProjRel>;\n    analysis?: Array<ProAnalysis>;\n    class_field_config?: Array<ProClassFieldConfig>;\n    dfh_class_proj_rel?: Array<ProDfhClassProjRel>;\n    text_property?: Array<ProTextProperty>;\n    dfh_profile_proj_rel?: Array<ProDfhProfileProjRel>;\n    project?: Array<ProProject>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ProProject { \n    pk_entity?: number;\n    fk_language?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ProTextProperty { \n    string: string;\n    fk_system_type: number;\n    fk_language: number;\n    fk_project: number;\n    fk_dfh_class?: number;\n    fk_dfh_property?: number;\n    fk_dfh_property_domain?: number;\n    fk_dfh_property_range?: number;\n    fk_pro_project?: number;\n    pk_entity?: number;\n    entity_version?: number;\n    tmsp_creation?: string;\n    tmsp_last_modification?: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ProjectPongRequest { \n    pkProject?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface PubAccount { \n    id?: number;\n    realm?: string;\n    username?: string;\n    email: string;\n    emailVerified?: boolean;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { QueryFilter } from './queryFilter';\nimport { ColDef } from './colDef';\n\n\nexport interface QueryDefinition { \n    filter: QueryFilter;\n    columns: Array<ColDef>;\n    limit?: number;\n    offset?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { QueryFilterData } from './queryFilterData';\n\n\nexport interface QueryFilter { \n    children?: Array<QueryFilter>;\n    data: QueryFilterData;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface QueryFilterData { \n    subgroup?: QueryFilterData.SubgroupEnum;\n    operator?: QueryFilterData.OperatorEnum;\n    classes?: Array<number>;\n    types?: Array<number>;\n    outgoingProperties?: Array<number>;\n    ingoingProperties?: Array<number>;\n    searchTerm?: string;\n}\nexport namespace QueryFilterData {\n    export type SubgroupEnum = 'property' | 'classAndType';\n    export const SubgroupEnum = {\n        Property: 'property' as SubgroupEnum,\n        ClassAndType: 'classAndType' as SubgroupEnum\n    };\n    export type OperatorEnum = 'IS' | 'IS NOT' | 'ENTITY_LABEL_CONTAINS' | 'AND' | 'OR';\n    export const OperatorEnum = {\n        Is: 'IS' as OperatorEnum,\n        IsNot: 'IS NOT' as OperatorEnum,\n        EntityLabelContains: 'ENTITY_LABEL_CONTAINS' as OperatorEnum,\n        And: 'AND' as OperatorEnum,\n        Or: 'OR' as OperatorEnum\n    };\n}\n\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { QueryPathSegmentData } from './queryPathSegmentData';\n\n\nexport interface QueryPathSegment { \n    type?: QueryPathSegment.TypeEnum;\n    data?: QueryPathSegmentData;\n}\nexport namespace QueryPathSegment {\n    export type TypeEnum = 'properties' | 'classes';\n    export const TypeEnum = {\n        Properties: 'properties' as TypeEnum,\n        Classes: 'classes' as TypeEnum\n    };\n}\n\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface QueryPathSegmentData { \n    classes?: Array<number>;\n    types?: Array<number>;\n    outgoingProperties?: Array<number>;\n    ingoingProperties?: Array<number>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface RelatedProfile { \n    fk_profile?: number;\n    removed_from_api?: boolean;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ResetPasswordRequest { \n    password: string;\n    resetPasswordToken: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ResponseWithMsg { \n    message?: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface Role { \n    id?: number;\n    name: string;\n    description?: string;\n    created?: string;\n    modified?: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface SchemaObject { \n    inf: object;\n    pro?: object;\n    dat?: object;\n    sys?: object;\n    dfh?: object;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { SearchExistingRelatedStatementFilter } from './searchExistingRelatedStatementFilter';\n\n\nexport interface SearchExistingRelatedStatement { \n    relateBy: string;\n    filter?: SearchExistingRelatedStatementFilter;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface SearchExistingRelatedStatementFilter { \n    key: string;\n    value: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface SignupRequest { \n    email: string;\n    username: string;\n    password: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { PubAccount } from './pubAccount';\nimport { SignupValidationError } from './signupValidationError';\n\n\nexport interface SignupResponse { \n    success?: PubAccount;\n    validationError?: SignupValidationError;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface SignupValidationError { \n    email?: string;\n    username?: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface SysClassField { \n    pk_entity?: number;\n    description?: string;\n    label?: string;\n    fk_system_type_ng_component?: number;\n    used_table?: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface SysClassHasTypeProperty { \n    pk_typed_class?: number;\n    typed_class_label?: string;\n    dfh_pk_property?: number;\n    property_label?: string;\n    pk_type_class?: number;\n    type_class_label?: string;\n    pk_entity?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { SysConfigFieldPosition } from './sysConfigFieldPosition';\n\n\nexport interface SysConfigFieldDisplay { \n    comment?: string;\n    displayInBasicFields?: SysConfigFieldPosition;\n    hidden?: boolean;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface SysConfigFieldPosition { \n    position?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { SysConfigFieldDisplay } from './sysConfigFieldDisplay';\n\n\nexport interface SysConfigFieldsByProperty { \n  [key: string]: SysConfigFieldDisplay | any;\n\n\n    _1?: SysConfigFieldDisplay;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface SysConfigFieldsBySourceClass { \n  [key: string]: SysConfigFieldsBySourceClass | any;\n\n\n    _1?: object;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { SysConfigFieldsByProperty } from './sysConfigFieldsByProperty';\nimport { SysConfigFieldsBySourceClass } from './sysConfigFieldsBySourceClass';\nimport { SysConfigFieldDisplay } from './sysConfigFieldDisplay';\n\n\nexport interface SysConfigSpecialFields { \n    incomingProperties?: SysConfigFieldsByProperty;\n    outgoingProperties?: SysConfigFieldsByProperty;\n    bySourceClass?: SysConfigFieldsBySourceClass;\n    hasTypeSubproperties?: SysConfigFieldDisplay;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { ClassesIndex } from './classesIndex';\nimport { SysConfigSpecialFields } from './sysConfigSpecialFields';\n\n\n/**\n * Classes indexed by primary key: Use class id as key (e.g. \\\"21\\\" for Person, https://ontome.dataforhistory.org/class/21) \n */\nexport interface SysConfigValue { \n    classes: ClassesIndex;\n    specialFields: SysConfigSpecialFields;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { DimensionValueObjectType } from './dimensionValueObjectType';\n\n\n/**\n * If present, defines a specific list type for the class.\n */\nexport interface SysConfigValueObjectType { \n    appellation?: SysConfigValueObjectType.AppellationEnum;\n    language?: SysConfigValueObjectType.LanguageEnum;\n    place?: SysConfigValueObjectType.PlaceEnum;\n    timePrimitive?: SysConfigValueObjectType.TimePrimitiveEnum;\n    langString?: SysConfigValueObjectType.LangStringEnum;\n    dimension?: DimensionValueObjectType;\n}\nexport namespace SysConfigValueObjectType {\n    export type AppellationEnum = 'true';\n    export const AppellationEnum = {\n        True: 'true' as AppellationEnum\n    };\n    export type LanguageEnum = 'true';\n    export const LanguageEnum = {\n        True: 'true' as LanguageEnum\n    };\n    export type PlaceEnum = 'true';\n    export const PlaceEnum = {\n        True: 'true' as PlaceEnum\n    };\n    export type TimePrimitiveEnum = 'true';\n    export const TimePrimitiveEnum = {\n        True: 'true' as TimePrimitiveEnum\n    };\n    export type LangStringEnum = 'true';\n    export const LangStringEnum = {\n        True: 'true' as LangStringEnum\n    };\n}\n\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { SysConfigValue } from './sysConfigValue';\nimport { DfhClass } from './dfhClass';\nimport { DfhProperty } from './dfhProperty';\nimport { DfhLabel } from './dfhLabel';\n\n\nexport interface SysObject { \n    config?: Array<SysConfigValue>;\n    klass?: Array<DfhClass>;\n    property?: Array<DfhProperty>;\n    label?: Array<DfhLabel>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface SysSystemRelevantClass { \n    fk_class?: number;\n    required_by_entities?: boolean;\n    required_by_sources?: boolean;\n    required_by_basics?: boolean;\n    excluded_from_entities?: boolean;\n    pk_entity?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface SysSystemType { \n    notes?: string;\n    definition?: string;\n    st_schema_name?: string;\n    st_table_name?: string;\n    st_column_name?: string;\n    st_group?: string;\n    pk_entity?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { TColFilterTxt } from './tColFilterTxt';\nimport { TColFilterNum } from './tColFilterNum';\n\n\nexport interface TColFilter { \n    numeric?: TColFilterNum;\n    text?: TColFilterTxt;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface TColFilterNum { \n    operator: TColFilterNum.OperatorEnum;\n    value: number;\n}\nexport namespace TColFilterNum {\n    export type OperatorEnum = '=' | '<' | '>';\n    export const OperatorEnum = {\n        Equal: '=' as OperatorEnum,\n        LessThan: '<' as OperatorEnum,\n        GreaterThan: '>' as OperatorEnum\n    };\n}\n\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface TColFilterTxt { \n    operator: TColFilterTxt.OperatorEnum;\n    value: string;\n}\nexport namespace TColFilterTxt {\n    export type OperatorEnum = '%iLike%';\n    export const OperatorEnum = {\n        ILike: '%iLike%' as OperatorEnum\n    };\n}\n\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { TColFilter } from './tColFilter';\n\n\nexport interface TColFilters { \n  [key: string]: TColFilter | any;\n\n\n    colName1?: TColFilter;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface TabCell { \n    pk_cell?: number;\n    fk_column?: number;\n    fk_row?: number;\n    fk_digital?: number;\n    string_value?: string;\n    numeric_value?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface TabRow { \n    pk_row?: number;\n    fk_digital?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface TableCell { \n    string_value?: string;\n    numeric_value?: object;\n    pk_cell?: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { GvSchemaObject } from './gvSchemaObject';\nimport { TableRow } from './tableRow';\n\n\nexport interface TablePageResponse { \n    rows?: Array<TableRow>;\n    columns?: Array<string>;\n    length?: number;\n    schemaObject?: GvSchemaObject;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { TableCell } from './tableCell';\n\n\nexport interface TableRow { \n  [key: string]: TableCell | any;\n\n\n    colName1?: TableCell;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { TimeChartContQueryDef } from './timeChartContQueryDef';\nimport { TimeChartContVisualSettings } from './timeChartContVisualSettings';\n\n\nexport interface TimeChartContLine { \n    visualizationDefinition: TimeChartContVisualSettings;\n    queryDefinition: TimeChartContQueryDef;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { QueryFilter } from './queryFilter';\nimport { ColDef } from './colDef';\n\n\nexport interface TimeChartContQueryDef { \n    filter: QueryFilter;\n    columns: Array<ColDef>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface TimeChartContVisualSettings { \n    label?: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface TimeCzmlValue { \n    iso_x: string;\n    y: number;\n    data_ref: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface TimePrimitiveWithCal { \n    julianDay: number;\n    duration: TimePrimitiveWithCal.DurationEnum;\n    calendar: TimePrimitiveWithCal.CalendarEnum;\n}\nexport namespace TimePrimitiveWithCal {\n    export type DurationEnum = '1 century' | '1 decade' | '1 year' | '1 month' | '1 day' | '1 hour' | '1 minute' | '1 second';\n    export const DurationEnum = {\n        Century: '1 century' as DurationEnum,\n        Decade: '1 decade' as DurationEnum,\n        Year: '1 year' as DurationEnum,\n        Month: '1 month' as DurationEnum,\n        Day: '1 day' as DurationEnum,\n        Hour: '1 hour' as DurationEnum,\n        Minute: '1 minute' as DurationEnum,\n        Second: '1 second' as DurationEnum\n    };\n    export type CalendarEnum = 'gregorian' | 'julian';\n    export const CalendarEnum = {\n        Gregorian: 'gregorian' as CalendarEnum,\n        Julian: 'julian' as CalendarEnum\n    };\n}\n\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { WarEntityPreviewTimeSpan } from './warEntityPreviewTimeSpan';\n\n\nexport interface WarEntityPreview { \n    pk_entity?: number;\n    fk_project?: number;\n    project: number;\n    fk_class: number;\n    class_label?: string;\n    entity_label?: string;\n    entity_type?: string;\n    type_label?: string;\n    fk_type?: number;\n    time_span?: WarEntityPreviewTimeSpan;\n    first_second?: string;\n    last_second?: string;\n    tmsp_last_modification?: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface WarEntityPreviewPaginatedByPkReq { \n    pkProject: number;\n    pkEntities: Array<number>;\n    limit: number;\n    offset: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { SearchExistingRelatedStatement } from './searchExistingRelatedStatement';\n\n\nexport interface WarEntityPreviewSearchExistingReq { \n    projectId: number;\n    searchString: string;\n    pkClasses: Array<number>;\n    limit: number;\n    page: number;\n    entityType?: string;\n    relatedStatement?: SearchExistingRelatedStatement;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { TimePrimitiveWithCal } from './timePrimitiveWithCal';\n\n\nexport interface WarEntityPreviewTimeSpan { \n    p82?: TimePrimitiveWithCal;\n    p81?: TimePrimitiveWithCal;\n    p81a?: TimePrimitiveWithCal;\n    p82a?: TimePrimitiveWithCal;\n    p81b?: TimePrimitiveWithCal;\n    p82b?: TimePrimitiveWithCal;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { WarEntityPreviewTimeSpan } from './warEntityPreviewTimeSpan';\n\n\nexport interface WarEntityPreviewWithFulltext { \n    pk_entity?: number;\n    fk_project?: number;\n    project: number;\n    fk_class: number;\n    class_label?: string;\n    entity_label?: string;\n    entity_type?: string;\n    type_label?: string;\n    fk_type?: number;\n    time_span?: WarEntityPreviewTimeSpan;\n    first_second?: string;\n    last_second?: string;\n    tmsp_last_modification?: string;\n    full_text?: string;\n    ts_vector?: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { WarEntityPreview } from './warEntityPreview';\n\n\nexport interface WarObject { \n    entity_preview?: Array<WarEntityPreview>;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface WarStatementDimensionVT { \n    pkEntity: number;\n    fkClass: number;\n    fkMeasurementUnit: number;\n    numericValue: number;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface WarStatementGeoJson { \n    type: WarStatementGeoJson.TypeEnum;\n    coordinates: Array<number>;\n}\nexport namespace WarStatementGeoJson {\n    export type TypeEnum = 'Point';\n    export const TypeEnum = {\n        Point: 'Point' as TypeEnum\n    };\n}\n\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { WarStatementGeoJson } from './warStatementGeoJson';\n\n\nexport interface WarStatementGeometryVT { \n    pkEntity: number;\n    fkClass: number;\n    geoJSON: WarStatementGeoJson;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface WarStatementLangStringVT { \n    pkEntity: number;\n    fkClass: number;\n    fkLanguage: number;\n    string: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface WarStatementLanguageVT { \n    pkEntity: number;\n    fkClass: number;\n    label: string;\n    iso6391: string;\n    iso6392b: string;\n    iso6392t: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { WarStatementGeometryVT } from './warStatementGeometryVT';\nimport { WarStatementLangStringVT } from './warStatementLangStringVT';\nimport { WarStatementLanguageVT } from './warStatementLanguageVT';\nimport { WarStatementDimensionVT } from './warStatementDimensionVT';\nimport { WarStatementStringVT } from './warStatementStringVT';\nimport { WarStatementTimePrimitiveVT } from './warStatementTimePrimitiveVT';\n\n\nexport interface WarStatementObjectValue { \n    string?: WarStatementStringVT;\n    geometry?: WarStatementGeometryVT;\n    language?: WarStatementLanguageVT;\n    timePrimitive?: WarStatementTimePrimitiveVT;\n    langString?: WarStatementLangStringVT;\n    dimension?: WarStatementDimensionVT;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface WarStatementStringVT { \n    pkEntity: number;\n    fkClass: number;\n    string: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { WarStatementTimePrimitiveVTPart } from './warStatementTimePrimitiveVTPart';\n\n\nexport interface WarStatementTimePrimitiveVT { \n    pkEntity: number;\n    fkClass: number;\n    julianDay: number;\n    label: string;\n    duration: WarStatementTimePrimitiveVT.DurationEnum;\n    calendar: WarStatementTimePrimitiveVT.CalendarEnum;\n    from: WarStatementTimePrimitiveVTPart;\n    to: WarStatementTimePrimitiveVTPart;\n}\nexport namespace WarStatementTimePrimitiveVT {\n    export type DurationEnum = '1 century' | '1 decade' | '1 year' | '1 month' | '1 day' | '1 hour' | '1 minute' | '1 second';\n    export const DurationEnum = {\n        Century: '1 century' as DurationEnum,\n        Decade: '1 decade' as DurationEnum,\n        Year: '1 year' as DurationEnum,\n        Month: '1 month' as DurationEnum,\n        Day: '1 day' as DurationEnum,\n        Hour: '1 hour' as DurationEnum,\n        Minute: '1 minute' as DurationEnum,\n        Second: '1 second' as DurationEnum\n    };\n    export type CalendarEnum = 'gregorian' | 'julian';\n    export const CalendarEnum = {\n        Gregorian: 'gregorian' as CalendarEnum,\n        Julian: 'julian' as CalendarEnum\n    };\n}\n\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface WarStatementTimePrimitiveVTPart { \n    julianDay: number;\n    julianSecond: number;\n    calJulian: string;\n    calGregorian: string;\n    calGregorianIso8601: string;\n}\n\n","/**\n * geovistory\n * Geovistory â Platform for Digital History\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { WarEntityPreview } from './warEntityPreview';\n\n\nexport interface WareEntityPreviewPage { \n    totalCount?: number;\n    data?: Array<WarEntityPreview>;\n}\n\n"],"names":["NgModule","Optional","SkipSelf","HttpClient","InjectionToken","HttpHeaders","HttpParams","Injectable","Inject","AnalysisTableExportRequest","ColDef","GetTablePageOptions","GvSubentitySubfieldType","GvSubfieldType","QueryFilterData","QueryPathSegment","SysConfigValueObjectType","TColFilterNum","TColFilterTxt","TimePrimitiveWithCal","WarStatementGeoJson","WarStatementTimePrimitiveVT"],"mappings":"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"}