/**
 * @fileoverview added by tsickle
 * Generated from: lib/sdk-lb4/api/subfieldPageController.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * geovistory
 * Geovistory – Platform for Digital History
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../variables";
import * as i3 from "../configuration";
export class SubfieldPageControllerService {
    /**
     * @param {?} httpClient
     * @param {?} basePath
     * @param {?} configuration
     */
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'http://0.0.0.0:3000';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new Configuration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    /**
     * @private
     * @param {?} httpParams
     * @param {?} value
     * @param {?=} key
     * @return {?}
     */
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    /**
     * @private
     * @param {?} httpParams
     * @param {?=} value
     * @param {?=} key
     * @return {?}
     */
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                ((/** @type {?} */ (value))).forEach((/**
                 * @param {?} elem
                 * @return {?}
                 */
                elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key)));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, ((/** @type {?} */ (value))).toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach((/**
                 * @param {?} k
                 * @return {?}
                 */
                k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k)));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    /**
     * @param {?=} gvPaginationAlternativeLeafItemsReq
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    subfieldPageControllerAlternativeLeafItems(gvPaginationAlternativeLeafItemsReq, observe = 'body', reportProgress = false, options) {
        /** @type {?} */
        let headers = this.defaultHeaders;
        /** @type {?} */
        let credential;
        // authentication (accesstoken) required
        credential = this.configuration.lookupCredential('accesstoken');
        if (credential) {
            headers = headers.set('authorization', credential);
        }
        // authentication (jwt) required
        credential = this.configuration.lookupCredential('jwt');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        /** @type {?} */
        const consumes = [
            'application/json'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/subfield-page/alternative-leaf-items`, gvPaginationAlternativeLeafItemsReq, {
            responseType: (/** @type {?} */ (responseType)),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} gvFieldPageReq
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    subfieldPageControllerLoadSubfieldPage(gvFieldPageReq, observe = 'body', reportProgress = false, options) {
        /** @type {?} */
        let headers = this.defaultHeaders;
        /** @type {?} */
        let credential;
        // authentication (accesstoken) required
        credential = this.configuration.lookupCredential('accesstoken');
        if (credential) {
            headers = headers.set('authorization', credential);
        }
        // authentication (jwt) required
        credential = this.configuration.lookupCredential('jwt');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        /** @type {?} */
        const consumes = [
            'application/json'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/subfield-page/load-subfield-page`, gvFieldPageReq, {
            responseType: (/** @type {?} */ (responseType)),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
}
SubfieldPageControllerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
SubfieldPageControllerService.ctorParameters = () => [
    { type: HttpClient },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },
    { type: Configuration, decorators: [{ type: Optional }] }
];
/** @nocollapse */ SubfieldPageControllerService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function SubfieldPageControllerService_Factory() { return new SubfieldPageControllerService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.BASE_PATH, 8), i0.ɵɵinject(i3.Configuration, 8)); }, token: SubfieldPageControllerService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    SubfieldPageControllerService.prototype.basePath;
    /** @type {?} */
    SubfieldPageControllerService.prototype.defaultHeaders;
    /** @type {?} */
    SubfieldPageControllerService.prototype.configuration;
    /** @type {?} */
    SubfieldPageControllerService.prototype.encoder;
    /**
     * @type {?}
     * @protected
     */
    SubfieldPageControllerService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,