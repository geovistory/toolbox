/**
 * @fileoverview added by tsickle
 * Generated from: lib/sdk-lb4/api.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, SkipSelf, Optional } from '@angular/core';
import { Configuration } from './configuration';
import { HttpClient } from '@angular/common/http';
export class ApiModule {
    /**
     * @param {?} parentModule
     * @param {?} http
     */
    constructor(parentModule, http) {
        if (parentModule) {
            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
    }
    /**
     * @param {?} configurationFactory
     * @return {?}
     */
    static forRoot(configurationFactory) {
        return {
            ngModule: ApiModule,
            providers: [{ provide: Configuration, useFactory: configurationFactory }]
        };
    }
}
ApiModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [],
                exports: [],
                providers: []
            },] }
];
/** @nocollapse */
ApiModule.ctorParameters = () => [
    { type: ApiModule, decorators: [{ type: Optional }, { type: SkipSelf }] },
    { type: HttpClient, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BrbGVpb2xhYi9saWItc2RrLWxiNC8iLCJzb3VyY2VzIjpbImxpYi9zZGstbGI0L2FwaS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFnRGxELE1BQU0sT0FBTyxTQUFTOzs7OztJQVFsQixZQUFxQyxZQUF1QixFQUNuQyxJQUFnQjtRQUNyQyxJQUFJLFlBQVksRUFBRTtZQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsa0VBQWtFLENBQUMsQ0FBQztTQUN2RjtRQUNELElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDUCxNQUFNLElBQUksS0FBSyxDQUFDLCtEQUErRDtnQkFDL0UsMERBQTBELENBQUMsQ0FBQztTQUMvRDtJQUNMLENBQUM7Ozs7O0lBaEJNLE1BQU0sQ0FBQyxPQUFPLENBQUMsb0JBQXlDO1FBQzNELE9BQU87WUFDSCxRQUFRLEVBQUUsU0FBUztZQUNuQixTQUFTLEVBQUUsQ0FBRSxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLG9CQUFvQixFQUFFLENBQUU7U0FDOUUsQ0FBQztJQUNOLENBQUM7OztZQVpKLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQU8sRUFBRTtnQkFDaEIsWUFBWSxFQUFFLEVBQUU7Z0JBQ2hCLE9BQU8sRUFBTyxFQUFFO2dCQUNoQixTQUFTLEVBQUUsRUFBRTthQUNkOzs7O1lBU3NELFNBQVMsdUJBQTlDLFFBQVEsWUFBSSxRQUFRO1lBeEQ3QixVQUFVLHVCQXlERCxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIFNraXBTZWxmLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29uZmlndXJhdGlvbiB9IGZyb20gJy4vY29uZmlndXJhdGlvbic7XG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5pbXBvcnQgeyBBY2NvdW50U2VydmljZSB9IGZyb20gJy4vYXBpL2FjY291bnQuc2VydmljZSc7XG5pbXBvcnQgeyBBbmFseXNpc1NlcnZpY2UgfSBmcm9tICcuL2FwaS9hbmFseXNpcy5zZXJ2aWNlJztcbmltcG9ydCB7IENvbnRlbnRUcmVlU2VydmljZSB9IGZyb20gJy4vYXBpL2NvbnRlbnRUcmVlLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0Q2h1bmtTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvZGF0Q2h1bmsuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRDaHVua0NvbnRyb2xsZXJTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvZGF0Q2h1bmtDb250cm9sbGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0Q29sdW1uU2VydmljZSB9IGZyb20gJy4vYXBpL2RhdENvbHVtbi5zZXJ2aWNlJztcbmltcG9ydCB7IERhdERpZ2l0YWxTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvZGF0RGlnaXRhbC5zZXJ2aWNlJztcbmltcG9ydCB7IERhdE5hbWVzcGFjZVNlcnZpY2UgfSBmcm9tICcuL2FwaS9kYXROYW1lc3BhY2Uuc2VydmljZSc7XG5pbXBvcnQgeyBEZmhDbGFzc0NvbnRyb2xsZXJTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvZGZoQ2xhc3NDb250cm9sbGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGZoTGFiZWxTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvZGZoTGFiZWwuc2VydmljZSc7XG5pbXBvcnQgeyBEZmhQcm9maWxlU2VydmljZSB9IGZyb20gJy4vYXBpL2RmaFByb2ZpbGUuc2VydmljZSc7XG5pbXBvcnQgeyBEZmhQcm9wZXJ0eUNvbnRyb2xsZXJTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvZGZoUHJvcGVydHlDb250cm9sbGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRmFjdG9pZENvbnRyb2xsZXJTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvZmFjdG9pZENvbnRyb2xsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBJbXBvcnRUYWJsZUNvbnRyb2xsZXJTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvaW1wb3J0VGFibGVDb250cm9sbGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW5mTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvaW5mTGFuZ3VhZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBJbmZQZXJzaXN0ZW50SXRlbVNlcnZpY2UgfSBmcm9tICcuL2FwaS9pbmZQZXJzaXN0ZW50SXRlbS5zZXJ2aWNlJztcbmltcG9ydCB7IEluZlBsYWNlU2VydmljZSB9IGZyb20gJy4vYXBpL2luZlBsYWNlLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW5mU3RhdGVtZW50U2VydmljZSB9IGZyb20gJy4vYXBpL2luZlN0YXRlbWVudC5zZXJ2aWNlJztcbmltcG9ydCB7IEluZlRlbXBvcmFsRW50aXR5U2VydmljZSB9IGZyb20gJy4vYXBpL2luZlRlbXBvcmFsRW50aXR5LnNlcnZpY2UnO1xuaW1wb3J0IHsgSW5mVGV4dFByb3BlcnR5U2VydmljZSB9IGZyb20gJy4vYXBpL2luZlRleHRQcm9wZXJ0eS5zZXJ2aWNlJztcbmltcG9ydCB7IFBhZ2luYXRlZFN0YXRlbWVudHNDb250cm9sbGVyU2VydmljZSB9IGZyb20gJy4vYXBpL3BhZ2luYXRlZFN0YXRlbWVudHNDb250cm9sbGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGluZ0NvbnRyb2xsZXJTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvcGluZ0NvbnRyb2xsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBQcm9DbGFzc0ZpZWxkQ29uZmlnU2VydmljZSB9IGZyb20gJy4vYXBpL3Byb0NsYXNzRmllbGRDb25maWcuc2VydmljZSc7XG5pbXBvcnQgeyBQcm9EZmhDbGFzc1Byb2pSZWxTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvcHJvRGZoQ2xhc3NQcm9qUmVsLnNlcnZpY2UnO1xuaW1wb3J0IHsgUHJvRGZoUHJvZmlsZVByb2pSZWxTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvcHJvRGZoUHJvZmlsZVByb2pSZWwuc2VydmljZSc7XG5pbXBvcnQgeyBQcm9JbmZvUHJvalJlbFNlcnZpY2UgfSBmcm9tICcuL2FwaS9wcm9JbmZvUHJvalJlbC5zZXJ2aWNlJztcbmltcG9ydCB7IFByb1Byb2plY3RTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvcHJvUHJvamVjdC5zZXJ2aWNlJztcbmltcG9ydCB7IFByb1RleHRQcm9wZXJ0eVNlcnZpY2UgfSBmcm9tICcuL2FwaS9wcm9UZXh0UHJvcGVydHkuc2VydmljZSc7XG5pbXBvcnQgeyBQcm9qZWN0Q29uZmlndXJhdGlvblNlcnZpY2UgfSBmcm9tICcuL2FwaS9wcm9qZWN0Q29uZmlndXJhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IFB1YkFjY291bnRTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvcHViQWNjb3VudC5zZXJ2aWNlJztcbmltcG9ydCB7IFJhbUxpc3RTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvcmFtTGlzdC5zZXJ2aWNlJztcbmltcG9ydCB7IFNjaGVtYU9iamVjdFNlcnZpY2UgfSBmcm9tICcuL2FwaS9zY2hlbWFPYmplY3Quc2VydmljZSc7XG5pbXBvcnQgeyBTeXNDbGFzc0ZpZWxkU2VydmljZSB9IGZyb20gJy4vYXBpL3N5c0NsYXNzRmllbGQuc2VydmljZSc7XG5pbXBvcnQgeyBTeXNDbGFzc0hhc1R5cGVQcm9wZXJ0eVNlcnZpY2UgfSBmcm9tICcuL2FwaS9zeXNDbGFzc0hhc1R5cGVQcm9wZXJ0eS5zZXJ2aWNlJztcbmltcG9ydCB7IFN5c1N5c3RlbVJlbGV2YW50Q2xhc3NTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvc3lzU3lzdGVtUmVsZXZhbnRDbGFzcy5zZXJ2aWNlJztcbmltcG9ydCB7IFN5c1N5c3RlbVR5cGVTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvc3lzU3lzdGVtVHlwZS5zZXJ2aWNlJztcbmltcG9ydCB7IFN5c3RlbUNvbmZpZ3VyYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9hcGkvc3lzdGVtQ29uZmlndXJhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IFRhYmxlU2VydmljZSB9IGZyb20gJy4vYXBpL3RhYmxlLnNlcnZpY2UnO1xuaW1wb3J0IHsgV2FyRW50aXR5UHJldmlld0NvbnRyb2xsZXJTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvd2FyRW50aXR5UHJldmlld0NvbnRyb2xsZXIuc2VydmljZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6ICAgICAgW10sXG4gIGRlY2xhcmF0aW9uczogW10sXG4gIGV4cG9ydHM6ICAgICAgW10sXG4gIHByb3ZpZGVyczogW11cbn0pXG5leHBvcnQgY2xhc3MgQXBpTW9kdWxlIHtcbiAgICBwdWJsaWMgc3RhdGljIGZvclJvb3QoY29uZmlndXJhdGlvbkZhY3Rvcnk6ICgpID0+IENvbmZpZ3VyYXRpb24pOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBBcGlNb2R1bGUsXG4gICAgICAgICAgICBwcm92aWRlcnM6IFsgeyBwcm92aWRlOiBDb25maWd1cmF0aW9uLCB1c2VGYWN0b3J5OiBjb25maWd1cmF0aW9uRmFjdG9yeSB9IF1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvciggQE9wdGlvbmFsKCkgQFNraXBTZWxmKCkgcGFyZW50TW9kdWxlOiBBcGlNb2R1bGUsXG4gICAgICAgICAgICAgICAgIEBPcHRpb25hbCgpIGh0dHA6IEh0dHBDbGllbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudE1vZHVsZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcGlNb2R1bGUgaXMgYWxyZWFkeSBsb2FkZWQuIEltcG9ydCBpbiB5b3VyIGJhc2UgQXBwTW9kdWxlIG9ubHkuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFodHRwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBuZWVkIHRvIGltcG9ydCB0aGUgSHR0cENsaWVudE1vZHVsZSBpbiB5b3VyIEFwcE1vZHVsZSEgXFxuJyArXG4gICAgICAgICAgICAnU2VlIGFsc28gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMjA1NzUnKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==