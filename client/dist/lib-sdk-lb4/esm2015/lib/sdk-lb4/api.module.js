/**
 * @fileoverview added by tsickle
 * Generated from: lib/sdk-lb4/api.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, SkipSelf, Optional } from '@angular/core';
import { Configuration } from './configuration';
import { HttpClient } from '@angular/common/http';
export class ApiModule {
    /**
     * @param {?} parentModule
     * @param {?} http
     */
    constructor(parentModule, http) {
        if (parentModule) {
            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
    }
    /**
     * @param {?} configurationFactory
     * @return {?}
     */
    static forRoot(configurationFactory) {
        return {
            ngModule: ApiModule,
            providers: [{ provide: Configuration, useFactory: configurationFactory }]
        };
    }
}
ApiModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [],
                exports: [],
                providers: []
            },] }
];
/** @nocollapse */
ApiModule.ctorParameters = () => [
    { type: ApiModule, decorators: [{ type: Optional }, { type: SkipSelf }] },
    { type: HttpClient, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BrbGVpb2xhYi9saWItc2RrLWxiNC8iLCJzb3VyY2VzIjpbImxpYi9zZGstbGI0L2FwaS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFnRGxELE1BQU0sT0FBTyxTQUFTOzs7OztJQVFsQixZQUFxQyxZQUF1QixFQUNuQyxJQUFnQjtRQUNyQyxJQUFJLFlBQVksRUFBRTtZQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsa0VBQWtFLENBQUMsQ0FBQztTQUN2RjtRQUNELElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDUCxNQUFNLElBQUksS0FBSyxDQUFDLCtEQUErRDtnQkFDL0UsMERBQTBELENBQUMsQ0FBQztTQUMvRDtJQUNMLENBQUM7Ozs7O0lBaEJNLE1BQU0sQ0FBQyxPQUFPLENBQUMsb0JBQXlDO1FBQzNELE9BQU87WUFDSCxRQUFRLEVBQUUsU0FBUztZQUNuQixTQUFTLEVBQUUsQ0FBRSxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLG9CQUFvQixFQUFFLENBQUU7U0FDOUUsQ0FBQztJQUNOLENBQUM7OztZQVpKLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQU8sRUFBRTtnQkFDaEIsWUFBWSxFQUFFLEVBQUU7Z0JBQ2hCLE9BQU8sRUFBTyxFQUFFO2dCQUNoQixTQUFTLEVBQUUsRUFBRTthQUNkOzs7O1lBU3NELFNBQVMsdUJBQTlDLFFBQVEsWUFBSSxRQUFRO1lBeEQ3QixVQUFVLHVCQXlERCxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIFNraXBTZWxmLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29uZmlndXJhdGlvbiB9IGZyb20gJy4vY29uZmlndXJhdGlvbic7XG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5pbXBvcnQgeyBBY2NvdW50U2VydmljZSB9IGZyb20gJy4vYXBpL2FjY291bnQuc2VydmljZSc7XG5pbXBvcnQgeyBBbmFseXNpc1NlcnZpY2UgfSBmcm9tICcuL2FwaS9hbmFseXNpcy5zZXJ2aWNlJztcbmltcG9ydCB7IENvbnRlbnRUcmVlU2VydmljZSB9IGZyb20gJy4vYXBpL2NvbnRlbnRUcmVlLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0Q2h1bmtTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvZGF0Q2h1bmsuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRDaHVua0NvbnRyb2xsZXJTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvZGF0Q2h1bmtDb250cm9sbGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0Q29sdW1uU2VydmljZSB9IGZyb20gJy4vYXBpL2RhdENvbHVtbi5zZXJ2aWNlJztcbmltcG9ydCB7IERhdERpZ2l0YWxTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvZGF0RGlnaXRhbC5zZXJ2aWNlJztcbmltcG9ydCB7IERhdE5hbWVzcGFjZVNlcnZpY2UgfSBmcm9tICcuL2FwaS9kYXROYW1lc3BhY2Uuc2VydmljZSc7XG5pbXBvcnQgeyBEZmhDbGFzc0NvbnRyb2xsZXJTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvZGZoQ2xhc3NDb250cm9sbGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGZoTGFiZWxTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvZGZoTGFiZWwuc2VydmljZSc7XG5pbXBvcnQgeyBEZmhQcm9maWxlU2VydmljZSB9IGZyb20gJy4vYXBpL2RmaFByb2ZpbGUuc2VydmljZSc7XG5pbXBvcnQgeyBEZmhQcm9wZXJ0eUNvbnRyb2xsZXJTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvZGZoUHJvcGVydHlDb250cm9sbGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRmFjdG9pZENvbnRyb2xsZXJTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvZmFjdG9pZENvbnRyb2xsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBJbXBvcnRUYWJsZUNvbnRyb2xsZXJTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvaW1wb3J0VGFibGVDb250cm9sbGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW5mTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvaW5mTGFuZ3VhZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBJbmZQZXJzaXN0ZW50SXRlbVNlcnZpY2UgfSBmcm9tICcuL2FwaS9pbmZQZXJzaXN0ZW50SXRlbS5zZXJ2aWNlJztcbmltcG9ydCB7IEluZlBsYWNlU2VydmljZSB9IGZyb20gJy4vYXBpL2luZlBsYWNlLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW5mU3RhdGVtZW50U2VydmljZSB9IGZyb20gJy4vYXBpL2luZlN0YXRlbWVudC5zZXJ2aWNlJztcbmltcG9ydCB7IEluZlRlbXBvcmFsRW50aXR5U2VydmljZSB9IGZyb20gJy4vYXBpL2luZlRlbXBvcmFsRW50aXR5LnNlcnZpY2UnO1xuaW1wb3J0IHsgSW5mVGV4dFByb3BlcnR5U2VydmljZSB9IGZyb20gJy4vYXBpL2luZlRleHRQcm9wZXJ0eS5zZXJ2aWNlJztcbmltcG9ydCB7IFBpbmdDb250cm9sbGVyU2VydmljZSB9IGZyb20gJy4vYXBpL3BpbmdDb250cm9sbGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgUHJvQ2xhc3NGaWVsZENvbmZpZ1NlcnZpY2UgfSBmcm9tICcuL2FwaS9wcm9DbGFzc0ZpZWxkQ29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgUHJvRGZoQ2xhc3NQcm9qUmVsU2VydmljZSB9IGZyb20gJy4vYXBpL3Byb0RmaENsYXNzUHJvalJlbC5zZXJ2aWNlJztcbmltcG9ydCB7IFByb0RmaFByb2ZpbGVQcm9qUmVsU2VydmljZSB9IGZyb20gJy4vYXBpL3Byb0RmaFByb2ZpbGVQcm9qUmVsLnNlcnZpY2UnO1xuaW1wb3J0IHsgUHJvSW5mb1Byb2pSZWxTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvcHJvSW5mb1Byb2pSZWwuc2VydmljZSc7XG5pbXBvcnQgeyBQcm9Qcm9qZWN0U2VydmljZSB9IGZyb20gJy4vYXBpL3Byb1Byb2plY3Quc2VydmljZSc7XG5pbXBvcnQgeyBQcm9UZXh0UHJvcGVydHlTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvcHJvVGV4dFByb3BlcnR5LnNlcnZpY2UnO1xuaW1wb3J0IHsgUHJvamVjdENvbmZpZ3VyYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9hcGkvcHJvamVjdENvbmZpZ3VyYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBQdWJBY2NvdW50U2VydmljZSB9IGZyb20gJy4vYXBpL3B1YkFjY291bnQuc2VydmljZSc7XG5pbXBvcnQgeyBSYW1MaXN0U2VydmljZSB9IGZyb20gJy4vYXBpL3JhbUxpc3Quc2VydmljZSc7XG5pbXBvcnQgeyBTY2hlbWFPYmplY3RTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvc2NoZW1hT2JqZWN0LnNlcnZpY2UnO1xuaW1wb3J0IHsgU3ViZmllbGRQYWdlQ29udHJvbGxlclNlcnZpY2UgfSBmcm9tICcuL2FwaS9zdWJmaWVsZFBhZ2VDb250cm9sbGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3lzQ2xhc3NGaWVsZFNlcnZpY2UgfSBmcm9tICcuL2FwaS9zeXNDbGFzc0ZpZWxkLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3lzQ2xhc3NIYXNUeXBlUHJvcGVydHlTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvc3lzQ2xhc3NIYXNUeXBlUHJvcGVydHkuc2VydmljZSc7XG5pbXBvcnQgeyBTeXNTeXN0ZW1SZWxldmFudENsYXNzU2VydmljZSB9IGZyb20gJy4vYXBpL3N5c1N5c3RlbVJlbGV2YW50Q2xhc3Muc2VydmljZSc7XG5pbXBvcnQgeyBTeXNTeXN0ZW1UeXBlU2VydmljZSB9IGZyb20gJy4vYXBpL3N5c1N5c3RlbVR5cGUuc2VydmljZSc7XG5pbXBvcnQgeyBTeXN0ZW1Db25maWd1cmF0aW9uU2VydmljZSB9IGZyb20gJy4vYXBpL3N5c3RlbUNvbmZpZ3VyYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBUYWJsZVNlcnZpY2UgfSBmcm9tICcuL2FwaS90YWJsZS5zZXJ2aWNlJztcbmltcG9ydCB7IFdhckVudGl0eVByZXZpZXdDb250cm9sbGVyU2VydmljZSB9IGZyb20gJy4vYXBpL3dhckVudGl0eVByZXZpZXdDb250cm9sbGVyLnNlcnZpY2UnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiAgICAgIFtdLFxuICBkZWNsYXJhdGlvbnM6IFtdLFxuICBleHBvcnRzOiAgICAgIFtdLFxuICBwcm92aWRlcnM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIEFwaU1vZHVsZSB7XG4gICAgcHVibGljIHN0YXRpYyBmb3JSb290KGNvbmZpZ3VyYXRpb25GYWN0b3J5OiAoKSA9PiBDb25maWd1cmF0aW9uKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuZ01vZHVsZTogQXBpTW9kdWxlLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbIHsgcHJvdmlkZTogQ29uZmlndXJhdGlvbiwgdXNlRmFjdG9yeTogY29uZmlndXJhdGlvbkZhY3RvcnkgfSBdXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoIEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHBhcmVudE1vZHVsZTogQXBpTW9kdWxlLFxuICAgICAgICAgICAgICAgICBAT3B0aW9uYWwoKSBodHRwOiBIdHRwQ2xpZW50KSB7XG4gICAgICAgIGlmIChwYXJlbnRNb2R1bGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQXBpTW9kdWxlIGlzIGFscmVhZHkgbG9hZGVkLiBJbXBvcnQgaW4geW91ciBiYXNlIEFwcE1vZHVsZSBvbmx5LicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaHR0cCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0byBpbXBvcnQgdGhlIEh0dHBDbGllbnRNb2R1bGUgaW4geW91ciBBcHBNb2R1bGUhIFxcbicgK1xuICAgICAgICAgICAgJ1NlZSBhbHNvIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzIwNTc1Jyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=