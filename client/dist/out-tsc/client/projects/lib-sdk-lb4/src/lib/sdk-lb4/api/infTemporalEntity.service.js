/**
 * geovistory
 * Geovistory â€“ Platform for Digital History
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
let InfTemporalEntityService = class InfTemporalEntityService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'http://0.0.0.0:3000';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new Configuration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    infTemporalEntityAlternativeTemporalEntityList(pkProject, pkSourceEntity, pkProperty, pkTargetClass, isOutgoing, limit, offset, observe = 'body', reportProgress = false, options) {
        if (pkProject === null || pkProject === undefined) {
            throw new Error('Required parameter pkProject was null or undefined when calling infTemporalEntityAlternativeTemporalEntityList.');
        }
        if (pkSourceEntity === null || pkSourceEntity === undefined) {
            throw new Error('Required parameter pkSourceEntity was null or undefined when calling infTemporalEntityAlternativeTemporalEntityList.');
        }
        if (pkProperty === null || pkProperty === undefined) {
            throw new Error('Required parameter pkProperty was null or undefined when calling infTemporalEntityAlternativeTemporalEntityList.');
        }
        if (pkTargetClass === null || pkTargetClass === undefined) {
            throw new Error('Required parameter pkTargetClass was null or undefined when calling infTemporalEntityAlternativeTemporalEntityList.');
        }
        if (isOutgoing === null || isOutgoing === undefined) {
            throw new Error('Required parameter isOutgoing was null or undefined when calling infTemporalEntityAlternativeTemporalEntityList.');
        }
        if (limit === null || limit === undefined) {
            throw new Error('Required parameter limit was null or undefined when calling infTemporalEntityAlternativeTemporalEntityList.');
        }
        if (offset === null || offset === undefined) {
            throw new Error('Required parameter offset was null or undefined when calling infTemporalEntityAlternativeTemporalEntityList.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (pkProject !== undefined && pkProject !== null) {
            queryParameters = this.addToHttpParams(queryParameters, pkProject, 'pkProject');
        }
        if (pkSourceEntity !== undefined && pkSourceEntity !== null) {
            queryParameters = this.addToHttpParams(queryParameters, pkSourceEntity, 'pkSourceEntity');
        }
        if (pkProperty !== undefined && pkProperty !== null) {
            queryParameters = this.addToHttpParams(queryParameters, pkProperty, 'pkProperty');
        }
        if (pkTargetClass !== undefined && pkTargetClass !== null) {
            queryParameters = this.addToHttpParams(queryParameters, pkTargetClass, 'pkTargetClass');
        }
        if (isOutgoing !== undefined && isOutgoing !== null) {
            queryParameters = this.addToHttpParams(queryParameters, isOutgoing, 'isOutgoing');
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = this.addToHttpParams(queryParameters, limit, 'limit');
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = this.addToHttpParams(queryParameters, offset, 'offset');
        }
        let headers = this.defaultHeaders;
        let credential;
        // authentication (accesstoken) required
        credential = this.configuration.lookupCredential('accesstoken');
        if (credential) {
            headers = headers.set('authorization', credential);
        }
        // authentication (jwt) required
        credential = this.configuration.lookupCredential('jwt');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts = [
                'application/json',
                'application/xml',
                'text/xml',
                'application/javascript',
                'text/javascript'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/lb3-api/InfTemporalEntities/paginated-list-alternatives`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    infTemporalEntityChangeTeEntProjectRelation(pkProject, isInProject, infTemporalEntity, observe = 'body', reportProgress = false, options) {
        if (pkProject === null || pkProject === undefined) {
            throw new Error('Required parameter pkProject was null or undefined when calling infTemporalEntityChangeTeEntProjectRelation.');
        }
        if (isInProject === null || isInProject === undefined) {
            throw new Error('Required parameter isInProject was null or undefined when calling infTemporalEntityChangeTeEntProjectRelation.');
        }
        if (infTemporalEntity === null || infTemporalEntity === undefined) {
            throw new Error('Required parameter infTemporalEntity was null or undefined when calling infTemporalEntityChangeTeEntProjectRelation.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (pkProject !== undefined && pkProject !== null) {
            queryParameters = this.addToHttpParams(queryParameters, pkProject, 'pkProject');
        }
        if (isInProject !== undefined && isInProject !== null) {
            queryParameters = this.addToHttpParams(queryParameters, isInProject, 'isInProject');
        }
        let headers = this.defaultHeaders;
        let credential;
        // authentication (accesstoken) required
        credential = this.configuration.lookupCredential('accesstoken');
        if (credential) {
            headers = headers.set('authorization', credential);
        }
        // authentication (jwt) required
        credential = this.configuration.lookupCredential('jwt');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts = [
                'application/json',
                'application/xml',
                'text/xml',
                'application/javascript',
                'text/javascript'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json',
            'application/x-www-form-urlencoded',
            'application/xml',
            'text/xml'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/lb3-api/InfTemporalEntities/change-project-relation`, infTemporalEntity, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    infTemporalEntityFind(filter, observe = 'body', reportProgress = false, options) {
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (filter !== undefined && filter !== null) {
            queryParameters = this.addToHttpParams(queryParameters, filter, 'filter');
        }
        let headers = this.defaultHeaders;
        let credential;
        // authentication (accesstoken) required
        credential = this.configuration.lookupCredential('accesstoken');
        if (credential) {
            headers = headers.set('authorization', credential);
        }
        // authentication (jwt) required
        credential = this.configuration.lookupCredential('jwt');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts = [
                'application/json',
                'application/xml',
                'text/xml',
                'application/javascript',
                'text/javascript'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/lb3-api/InfTemporalEntities`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    infTemporalEntityFindOrCreateInfTemporalEntities(pkProject, infTemporalEntity, observe = 'body', reportProgress = false, options) {
        if (pkProject === null || pkProject === undefined) {
            throw new Error('Required parameter pkProject was null or undefined when calling infTemporalEntityFindOrCreateInfTemporalEntities.');
        }
        if (infTemporalEntity === null || infTemporalEntity === undefined) {
            throw new Error('Required parameter infTemporalEntity was null or undefined when calling infTemporalEntityFindOrCreateInfTemporalEntities.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (pkProject !== undefined && pkProject !== null) {
            queryParameters = this.addToHttpParams(queryParameters, pkProject, 'pk_project');
        }
        let headers = this.defaultHeaders;
        let credential;
        // authentication (accesstoken) required
        credential = this.configuration.lookupCredential('accesstoken');
        if (credential) {
            headers = headers.set('authorization', credential);
        }
        // authentication (jwt) required
        credential = this.configuration.lookupCredential('jwt');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts = [
                'application/json',
                'application/xml',
                'text/xml',
                'application/javascript',
                'text/javascript'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json',
            'application/x-www-form-urlencoded',
            'application/xml',
            'text/xml'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/lb3-api/InfTemporalEntities/find-or-create-many`, infTemporalEntity, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    infTemporalEntityFindOrCreateInfTemporalEntity(pkProject, infTemporalEntity, observe = 'body', reportProgress = false, options) {
        if (pkProject === null || pkProject === undefined) {
            throw new Error('Required parameter pkProject was null or undefined when calling infTemporalEntityFindOrCreateInfTemporalEntity.');
        }
        if (infTemporalEntity === null || infTemporalEntity === undefined) {
            throw new Error('Required parameter infTemporalEntity was null or undefined when calling infTemporalEntityFindOrCreateInfTemporalEntity.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (pkProject !== undefined && pkProject !== null) {
            queryParameters = this.addToHttpParams(queryParameters, pkProject, 'pkProject');
        }
        let headers = this.defaultHeaders;
        let credential;
        // authentication (accesstoken) required
        credential = this.configuration.lookupCredential('accesstoken');
        if (credential) {
            headers = headers.set('authorization', credential);
        }
        // authentication (jwt) required
        credential = this.configuration.lookupCredential('jwt');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts = [
                'application/json',
                'application/xml',
                'text/xml',
                'application/javascript',
                'text/javascript'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json',
            'application/x-www-form-urlencoded',
            'application/xml',
            'text/xml'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/lb3-api/InfTemporalEntities/findOrCreate`, infTemporalEntity, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    infTemporalEntityOwnProperties(pkProject, pkEntity, observe = 'body', reportProgress = false, options) {
        if (pkProject === null || pkProject === undefined) {
            throw new Error('Required parameter pkProject was null or undefined when calling infTemporalEntityOwnProperties.');
        }
        if (pkEntity === null || pkEntity === undefined) {
            throw new Error('Required parameter pkEntity was null or undefined when calling infTemporalEntityOwnProperties.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (pkProject !== undefined && pkProject !== null) {
            queryParameters = this.addToHttpParams(queryParameters, pkProject, 'pkProject');
        }
        if (pkEntity !== undefined && pkEntity !== null) {
            queryParameters = this.addToHttpParams(queryParameters, pkEntity, 'pkEntity');
        }
        let headers = this.defaultHeaders;
        let credential;
        // authentication (accesstoken) required
        credential = this.configuration.lookupCredential('accesstoken');
        if (credential) {
            headers = headers.set('authorization', credential);
        }
        // authentication (jwt) required
        credential = this.configuration.lookupCredential('jwt');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts = [
                'application/json',
                'application/xml',
                'text/xml',
                'application/javascript',
                'text/javascript'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/lb3-api/InfTemporalEntities/own-properties`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    infTemporalEntityTemporalEntityList(pkProject, pkSourceEntity, pkProperty, pkTargetClass, isOutgoing, limit, offset, observe = 'body', reportProgress = false, options) {
        if (pkProject === null || pkProject === undefined) {
            throw new Error('Required parameter pkProject was null or undefined when calling infTemporalEntityTemporalEntityList.');
        }
        if (pkSourceEntity === null || pkSourceEntity === undefined) {
            throw new Error('Required parameter pkSourceEntity was null or undefined when calling infTemporalEntityTemporalEntityList.');
        }
        if (pkProperty === null || pkProperty === undefined) {
            throw new Error('Required parameter pkProperty was null or undefined when calling infTemporalEntityTemporalEntityList.');
        }
        if (pkTargetClass === null || pkTargetClass === undefined) {
            throw new Error('Required parameter pkTargetClass was null or undefined when calling infTemporalEntityTemporalEntityList.');
        }
        if (isOutgoing === null || isOutgoing === undefined) {
            throw new Error('Required parameter isOutgoing was null or undefined when calling infTemporalEntityTemporalEntityList.');
        }
        if (limit === null || limit === undefined) {
            throw new Error('Required parameter limit was null or undefined when calling infTemporalEntityTemporalEntityList.');
        }
        if (offset === null || offset === undefined) {
            throw new Error('Required parameter offset was null or undefined when calling infTemporalEntityTemporalEntityList.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (pkProject !== undefined && pkProject !== null) {
            queryParameters = this.addToHttpParams(queryParameters, pkProject, 'pkProject');
        }
        if (pkSourceEntity !== undefined && pkSourceEntity !== null) {
            queryParameters = this.addToHttpParams(queryParameters, pkSourceEntity, 'pkSourceEntity');
        }
        if (pkProperty !== undefined && pkProperty !== null) {
            queryParameters = this.addToHttpParams(queryParameters, pkProperty, 'pkProperty');
        }
        if (pkTargetClass !== undefined && pkTargetClass !== null) {
            queryParameters = this.addToHttpParams(queryParameters, pkTargetClass, 'pkTargetClass');
        }
        if (isOutgoing !== undefined && isOutgoing !== null) {
            queryParameters = this.addToHttpParams(queryParameters, isOutgoing, 'isOutgoing');
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = this.addToHttpParams(queryParameters, limit, 'limit');
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = this.addToHttpParams(queryParameters, offset, 'offset');
        }
        let headers = this.defaultHeaders;
        let credential;
        // authentication (accesstoken) required
        credential = this.configuration.lookupCredential('accesstoken');
        if (credential) {
            headers = headers.set('authorization', credential);
        }
        // authentication (jwt) required
        credential = this.configuration.lookupCredential('jwt');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts = [
                'application/json',
                'application/xml',
                'text/xml',
                'application/javascript',
                'text/javascript'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/lb3-api/InfTemporalEntities/paginated-list`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
};
InfTemporalEntityService = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    }),
    tslib_1.__param(1, Optional()), tslib_1.__param(1, Inject(BASE_PATH)), tslib_1.__param(2, Optional())
], InfTemporalEntityService);
export { InfTemporalEntityService };
//# sourceMappingURL=infTemporalEntity.service.js.map