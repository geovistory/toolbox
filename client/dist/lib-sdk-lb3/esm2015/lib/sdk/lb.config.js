/* tslint:disable */
/**
* @module LoopBackConfig
* @description
*
* The LoopBackConfig module help developers to externally
* configure the base url and api version for loopback.io
*
* Example
*
* import { LoopBackConfig } from './sdk';
*
* @Component() // No metadata needed for this module
*
* export class MyApp {
*   constructor() {
*     LoopBackConfig.setBaseURL('http://localhost:3000');
*     LoopBackConfig.setApiVersion('api');
*   }
* }
**/
export class LoopBackConfig {
    static setApiVersion(version = 'api') {
        LoopBackConfig.version = version;
    }
    static getApiVersion() {
        return LoopBackConfig.version;
    }
    static setBaseURL(url = '/') {
        LoopBackConfig.path = url;
    }
    static getPath() {
        return LoopBackConfig.path;
    }
    static setAuthPrefix(authPrefix = '') {
        LoopBackConfig.authPrefix = authPrefix;
    }
    static getAuthPrefix() {
        return LoopBackConfig.authPrefix;
    }
    static setDebugMode(isEnabled) {
        LoopBackConfig.debug = isEnabled;
    }
    static debuggable() {
        return LoopBackConfig.debug;
    }
    static filterOnUrl() {
        LoopBackConfig.filterOn = 'url';
    }
    static filterOnHeaders() {
        LoopBackConfig.filterOn = 'headers';
    }
    static whereOnUrl() {
        LoopBackConfig.whereOn = 'url';
    }
    static whereOnHeaders() {
        LoopBackConfig.whereOn = 'headers';
    }
    static isHeadersFilteringSet() {
        return (LoopBackConfig.filterOn === 'headers');
    }
    static isHeadersWhereSet() {
        return (LoopBackConfig.whereOn === 'headers');
    }
    static setSecureWebSockets() {
        LoopBackConfig.secure = true;
    }
    static unsetSecureWebSockets() {
        LoopBackConfig.secure = false;
    }
    static isSecureWebSocketsSet() {
        return LoopBackConfig.secure;
    }
    static setRequestOptionsCredentials(withCredentials = false) {
        LoopBackConfig.withCredentials = withCredentials;
    }
    static getRequestOptionsCredentials() {
        return LoopBackConfig.withCredentials;
    }
}
LoopBackConfig.path = '//:3000';
LoopBackConfig.version = 'lb3-api';
LoopBackConfig.authPrefix = '';
LoopBackConfig.debug = true;
LoopBackConfig.filterOn = 'headers';
LoopBackConfig.whereOn = 'headers';
LoopBackConfig.secure = false;
LoopBackConfig.withCredentials = false;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGIuY29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGtsZWlvbGFiL2xpYi1zZGstbGIzLyIsInNvdXJjZXMiOlsibGliL3Nkay9sYi5jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUJHO0FBQ0gsTUFBTSxPQUFPLGNBQWM7SUFVbEIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxVQUFrQixLQUFLO1FBQ2pELGNBQWMsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ25DLENBQUM7SUFFTSxNQUFNLENBQUMsYUFBYTtRQUN6QixPQUFPLGNBQWMsQ0FBQyxPQUFPLENBQUM7SUFDaEMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBYyxHQUFHO1FBQ3hDLGNBQWMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0lBQzVCLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTztRQUNuQixPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQUM7SUFDN0IsQ0FBQztJQUVNLE1BQU0sQ0FBQyxhQUFhLENBQUMsYUFBcUIsRUFBRTtRQUNqRCxjQUFjLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUN6QyxDQUFDO0lBRU0sTUFBTSxDQUFDLGFBQWE7UUFDekIsT0FBTyxjQUFjLENBQUMsVUFBVSxDQUFDO0lBQ25DLENBQUM7SUFFTSxNQUFNLENBQUMsWUFBWSxDQUFDLFNBQWtCO1FBQzNDLGNBQWMsQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDO0lBQ25DLENBQUM7SUFFTSxNQUFNLENBQUMsVUFBVTtRQUN0QixPQUFPLGNBQWMsQ0FBQyxLQUFLLENBQUM7SUFDOUIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxXQUFXO1FBQ3ZCLGNBQWMsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ2xDLENBQUM7SUFFTSxNQUFNLENBQUMsZUFBZTtRQUMzQixjQUFjLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztJQUN0QyxDQUFDO0lBRU0sTUFBTSxDQUFDLFVBQVU7UUFDdEIsY0FBYyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDakMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxjQUFjO1FBQzFCLGNBQWMsQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO0lBQ3JDLENBQUM7SUFFTSxNQUFNLENBQUMscUJBQXFCO1FBQ2pDLE9BQU8sQ0FBQyxjQUFjLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFTSxNQUFNLENBQUMsaUJBQWlCO1FBQzdCLE9BQU8sQ0FBQyxjQUFjLENBQUMsT0FBTyxLQUFLLFNBQVMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFTSxNQUFNLENBQUMsbUJBQW1CO1FBQy9CLGNBQWMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQy9CLENBQUM7SUFFTSxNQUFNLENBQUMscUJBQXFCO1FBQ2pDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQ2hDLENBQUM7SUFFTSxNQUFNLENBQUMscUJBQXFCO1FBQ2pDLE9BQU8sY0FBYyxDQUFDLE1BQU0sQ0FBQztJQUMvQixDQUFDO0lBRU0sTUFBTSxDQUFDLDRCQUE0QixDQUFDLGtCQUEyQixLQUFLO1FBQ3pFLGNBQWMsQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO0lBQ25ELENBQUM7SUFFTSxNQUFNLENBQUMsNEJBQTRCO1FBQ3hDLE9BQU8sY0FBYyxDQUFDLGVBQWUsQ0FBQztJQUN4QyxDQUFDOztBQW5GYyxtQkFBSSxHQUFXLFNBQVMsQ0FBQztBQUN6QixzQkFBTyxHQUFvQixTQUFTLENBQUM7QUFDckMseUJBQVUsR0FBVyxFQUFFLENBQUM7QUFDeEIsb0JBQUssR0FBWSxJQUFJLENBQUM7QUFDdEIsdUJBQVEsR0FBVyxTQUFTLENBQUM7QUFDN0Isc0JBQU8sR0FBVyxTQUFTLENBQUM7QUFDNUIscUJBQU0sR0FBWSxLQUFLLENBQUM7QUFDeEIsOEJBQWUsR0FBWSxLQUFLLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyoqXG4qIEBtb2R1bGUgTG9vcEJhY2tDb25maWdcbiogQGRlc2NyaXB0aW9uXG4qXG4qIFRoZSBMb29wQmFja0NvbmZpZyBtb2R1bGUgaGVscCBkZXZlbG9wZXJzIHRvIGV4dGVybmFsbHkgXG4qIGNvbmZpZ3VyZSB0aGUgYmFzZSB1cmwgYW5kIGFwaSB2ZXJzaW9uIGZvciBsb29wYmFjay5pb1xuKlxuKiBFeGFtcGxlXG4qXG4qIGltcG9ydCB7IExvb3BCYWNrQ29uZmlnIH0gZnJvbSAnLi9zZGsnO1xuKiBcbiogQENvbXBvbmVudCgpIC8vIE5vIG1ldGFkYXRhIG5lZWRlZCBmb3IgdGhpcyBtb2R1bGVcbipcbiogZXhwb3J0IGNsYXNzIE15QXBwIHtcbiogICBjb25zdHJ1Y3RvcigpIHtcbiogICAgIExvb3BCYWNrQ29uZmlnLnNldEJhc2VVUkwoJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMCcpO1xuKiAgICAgTG9vcEJhY2tDb25maWcuc2V0QXBpVmVyc2lvbignYXBpJyk7XG4qICAgfVxuKiB9XG4qKi9cbmV4cG9ydCBjbGFzcyBMb29wQmFja0NvbmZpZyB7XG4gIHByaXZhdGUgc3RhdGljIHBhdGg6IHN0cmluZyA9ICcvLzozMDAwJztcbiAgcHJpdmF0ZSBzdGF0aWMgdmVyc2lvbjogc3RyaW5nIHzCoG51bWJlciA9ICdsYjMtYXBpJztcbiAgcHJpdmF0ZSBzdGF0aWMgYXV0aFByZWZpeDogc3RyaW5nID0gJyc7XG4gIHByaXZhdGUgc3RhdGljIGRlYnVnOiBib29sZWFuID0gdHJ1ZTtcbiAgcHJpdmF0ZSBzdGF0aWMgZmlsdGVyT246IHN0cmluZyA9ICdoZWFkZXJzJztcbiAgcHJpdmF0ZSBzdGF0aWMgd2hlcmVPbjogc3RyaW5nID0gJ2hlYWRlcnMnO1xuICBwcml2YXRlIHN0YXRpYyBzZWN1cmU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBzdGF0aWMgd2l0aENyZWRlbnRpYWxzOiBib29sZWFuID0gZmFsc2U7XG5cbiAgcHVibGljIHN0YXRpYyBzZXRBcGlWZXJzaW9uKHZlcnNpb246IHN0cmluZyA9ICdhcGknKTogdm9pZCB7XG4gICAgTG9vcEJhY2tDb25maWcudmVyc2lvbiA9IHZlcnNpb247XG4gIH1cbiAgXG4gIHB1YmxpYyBzdGF0aWMgZ2V0QXBpVmVyc2lvbigpOiBzdHJpbmcgfCBudW1iZXIge1xuICAgIHJldHVybiBMb29wQmFja0NvbmZpZy52ZXJzaW9uO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBzZXRCYXNlVVJMKHVybDogc3RyaW5nID0gJy8nKTogdm9pZCB7XG4gICAgTG9vcEJhY2tDb25maWcucGF0aCA9IHVybDtcbiAgfVxuICBcbiAgcHVibGljIHN0YXRpYyBnZXRQYXRoKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIExvb3BCYWNrQ29uZmlnLnBhdGg7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHNldEF1dGhQcmVmaXgoYXV0aFByZWZpeDogc3RyaW5nID0gJycpOiB2b2lkIHtcbiAgICBMb29wQmFja0NvbmZpZy5hdXRoUHJlZml4ID0gYXV0aFByZWZpeDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0QXV0aFByZWZpeCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBMb29wQmFja0NvbmZpZy5hdXRoUHJlZml4O1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBzZXREZWJ1Z01vZGUoaXNFbmFibGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgTG9vcEJhY2tDb25maWcuZGVidWcgPSBpc0VuYWJsZWQ7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGRlYnVnZ2FibGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIExvb3BCYWNrQ29uZmlnLmRlYnVnO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBmaWx0ZXJPblVybCgpOiB2b2lkIHtcbiAgICBMb29wQmFja0NvbmZpZy5maWx0ZXJPbiA9ICd1cmwnO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBmaWx0ZXJPbkhlYWRlcnMoKTogdm9pZCB7XG4gICAgTG9vcEJhY2tDb25maWcuZmlsdGVyT24gPSAnaGVhZGVycyc7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHdoZXJlT25VcmwoKTogdm9pZCB7XG4gICAgTG9vcEJhY2tDb25maWcud2hlcmVPbiA9ICd1cmwnO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyB3aGVyZU9uSGVhZGVycygpOiB2b2lkIHtcbiAgICBMb29wQmFja0NvbmZpZy53aGVyZU9uID0gJ2hlYWRlcnMnO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBpc0hlYWRlcnNGaWx0ZXJpbmdTZXQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChMb29wQmFja0NvbmZpZy5maWx0ZXJPbiA9PT0gJ2hlYWRlcnMnKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgaXNIZWFkZXJzV2hlcmVTZXQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChMb29wQmFja0NvbmZpZy53aGVyZU9uID09PSAnaGVhZGVycycpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBzZXRTZWN1cmVXZWJTb2NrZXRzKCk6IHZvaWQge1xuICAgIExvb3BCYWNrQ29uZmlnLnNlY3VyZSA9IHRydWU7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHVuc2V0U2VjdXJlV2ViU29ja2V0cygpOiB2b2lkIHtcbiAgICBMb29wQmFja0NvbmZpZy5zZWN1cmUgPSBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgaXNTZWN1cmVXZWJTb2NrZXRzU2V0KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBMb29wQmFja0NvbmZpZy5zZWN1cmU7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHNldFJlcXVlc3RPcHRpb25zQ3JlZGVudGlhbHMod2l0aENyZWRlbnRpYWxzOiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcbiAgICBMb29wQmFja0NvbmZpZy53aXRoQ3JlZGVudGlhbHMgPSB3aXRoQ3JlZGVudGlhbHM7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdldFJlcXVlc3RPcHRpb25zQ3JlZGVudGlhbHMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIExvb3BCYWNrQ29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgfVxufVxuIl19