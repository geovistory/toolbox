import { DatChunk, ProDfhClassProjRel, DfhProperty, InfPersistentItem, InfTemporalEntity, ProProjectInterface, ProQuery, ProVisual, SysAppContextInterface, SysClassFieldInterface, InfLanguage } from 'app/core/sdk';
import { EntityPreview, EntityPreviewList, FieldList, PeItDetailList, PropertyFieldList } from 'app/core/state/models';
import { ClassAndTypePk } from 'app/modules/information/containers/class-and-type-selector/api/class-and-type-selector.models';
import { EntityDetail } from 'app/modules/information/containers/entity-detail/api/entity-detail.models';
import { ProjectSettingsData } from 'app/modules/projects/containers/project-settings-data/api/project-settings-data.models';
import { QueryDetail } from 'app/modules/queries/containers/query-detail/api/query-detail.models';
import { SectionDetail } from 'app/modules/sources/containers/section-detail/api/section-detail.models';
import { SourceDetail } from 'app/modules/sources/containers/source-detail/api/source-detail.models';
import { VisualDetail } from 'app/modules/visuals/containers/visual-detail/api/visual-detail.models';
import { Observable } from 'rxjs';
import { Types } from '../../modules/projects/containers/types/api/types.models';
import { HasTypePropertyReadable } from '../state/models';

export interface ProjectPreview {
    label?: string,
    description?: string,
    default_language?: InfLanguage,
    pk_project?: number
  }
  
export interface EntityByPk<T> {
    [pk_entity: number]: T
}

export interface VersionEntity<T> {
    _latestVersion: number, // version number of the latest version
    [v: number]: T
}

export interface EntityVersionsByPk<T> {
    [pk_entity: number]: VersionEntity<T>
}

export interface ChunkList { [pk_entity: number]: DatChunk };
export interface PeItList { [pk_entity: number]: InfPersistentItem };
export interface TeEnList { [pk_entity: number]: InfTemporalEntity };
export interface PropertyList { [pk_entity: string]: DfhProperty; }
export interface TypePeIt extends InfPersistentItem { fk_typed_class: number; } // TODO remove if replaced by TypePreview
export interface TypesByClass { [dfh_pk_class: string]: TypePeIt[]; }
export interface TypesByPk { [pk_entity: string]: TypePeIt; }

export interface TypePreview extends EntityPreview { fk_typed_class: number; }
export interface TypePreviewsByClass { [dfh_pk_class: string]: TypePreview[]; }
export interface TypePreviewList { [pk_entity: string]: TypePreview[]; }
export interface ComQueryByPk { [key: string]: ProQuery }

export interface HasTypePropertyList { [dfh_pk_property: number]: HasTypePropertyReadable }

export interface Panel {
    id: number;
    tabs: Tab[];
}

export type ListType = '' | 'entities' | 'sources' | 'queries' | 'visuals' | 'stories' | 'settings';

export interface Tab {
    // wheter tab is active or not
    active: boolean;
    // the root component included in this tab, in dash separate minuscles: EntityDetailComponent -> 'entity-detail'
    component: 'entity-detail' | 'source-detail' | 'section-detail' | 'query-detail' | 'visual-detail' | 'classes-settings' |  'contr-vocab-settings';
    // icon to be displayed in tab, e.g.: gv-icon-source
    icon: 'persistent-entity' | 'temporal-entity' | 'source' | 'section' | 'query' | 'visual' | 'story' | 'settings';
    // name of the pathSegment under 'activeProject', used to generate the path: ['activeProject', pathSegment, uiId]
    pathSegment: 'entityDetails' | 'sourceDetails' | 'sectionDetails' | 'queryDetails' | 'visualDetails' | 'classesSettings' |  'contrVocabSettings';
    // data to pass to component via input variabales
    data?: {
        pkEntity?: number;
        classAndTypePk?: ClassAndTypePk;

        pkProperty?: number;
    }
    // generated by reducer: base path where the component will be attatch his SubStore
    path?: string[];
    // generated on the fly, never in store
    tabTitle$?: Observable<string>;
    loading$?: Observable<boolean>;
}


export interface ProjectDetail extends ProjectPreview {

    /******************************************************************
     * CRM and Project Config
     */

    // Conceptional Reference Model
    crm?: ProjectCrm,

    /******************************************************************
     * Information Cache
     */

    // data unit previews
    entityPreviews?: EntityPreviewList;

    // types by pk class
    typesByClass?: TypesByClass;

    // types by pk_entity
    typesByPk?: TypesByPk;

    // data unit details for display in modal
    peItModals?: PeItDetailList;

    // chunk List
    chunks?: ChunkList;

    // InfPersistentItems with roles by pk_entity
    peItGraphs?: PeItList;

    // InfPersistentItems with roles by pk_entity
    teEnGraphs?: TeEnList;

    // ComQuery list by pk_entity
    comQueryVersionsByPk?: EntityVersionsByPk<ProQuery>;
    comQueryLoading?: boolean;
    comQueryVersionLoading?: { [key: string]: boolean };

    // ComVisual list by pk_entity
    comVisualVersionsByPk?: EntityVersionsByPk<ProVisual>;
    comVisualLoading?: boolean;
    comVisualVersionLoading?: boolean;


    /******************************************************************
     * Layout
     */
    list?: ListType;

    panels?: Panel[]

    // index of focused Panel
    focusedPanel?: number;

    // serial number for panels
    panelSerial?: number;

    // serial number for uiId
    uiIdSerial?: number;

    // reference the uiId within the path of the tab (uiId has nothing to do with pk_entity)
    entityDetails?: { [uiId: string]: EntityDetail }

    // reference the uiId within the path of the tab (uiId has nothing to do with pk_entity)
    sourceDetails?: { [uiId: string]: SourceDetail }

    // reference the uiId within the path of the tab (uiId has nothing to do with pk_entity)
    sectionDetails?: { [uiId: string]: SectionDetail }

    // reference the uiId within the path of the tab (uiId has nothing to do with pk_entity)
    queryDetails?: { [uiId: string]: QueryDetail }

    // reference the uiId within the path of the tab (uiId has nothing to do with pk_entity)
    visualDetails?: { [uiId: string]: VisualDetail }

    // reference the uiId within the path of the tab (uiId has nothing to do with pk_entity)
    classesSettings?: { [uiId: string]: ProjectSettingsData }

    // reference the uiId within the path of the tab (uiId has nothing to do with pk_entity)
    contrVocabSettings?: { [uiId: string]: Types }

    /******************************************************************
     * Things for Mentionings / Annotations
     */

    // the chunk that is used to create mentionings
    selectedChunk?: DatChunk;

    // if true, the text editor behaves so that each node can be clicked to de-/activate
    refiningChunk?: boolean;

    // true, when mentioning is being created.
    // TODO: check, if needed
    creatingMentioning?: boolean;

    // Array of pk_entities of mentionings (a.k.a. entity_associations of property "is mentioned in")
    // that are focused by a click on a chunk (in text editor)
    mentioningsFocusedInText?: number[]

    // Array of pk_entities of mentionings (a.k.a. entity_associations of property "is mentioned in")
    // that are focused by click on mentioning in a list/table view
    mentioningsFocusedInTable?: number[]

}

export interface ProjectCrm {
    classes?: ClassConfigList;
    properties?: PropertyList
    fieldList?: FieldList;
    hasTypeProperties?: HasTypePropertyList;
}

export interface ClassConfigList { [dfh_pk_class: number]: ClassConfig };

export interface ClassConfig {
    pkEntity: number;
    dfh_pk_class: number;

    label: string;
    dfh_standard_label: string;

    profileLabels: string;
    profilePks: number[];

    projRel?: ProDfhClassProjRel;
    isInProject?: boolean; // reflects the enabled / disabled state from data settings of the project
    changingProjRel: boolean;

    subclassOf?: 'peIt' | 'teEnt' | 'other'; // to distinguish TeEnts from PeIts

    subclassOfType?: boolean; // true if subclass of E55 Type

    scopeNote: string;

    dfh_identifier_in_namespace: string;

    propertyFields?: PropertyFieldList;
    uiContexts?: {
        [pk: number]: UiContext
    }

    required_by_sources?: boolean
    required_by_entities?: boolean
    required_by_basics?: boolean
    excluded_from_entities?: boolean
}

export interface UiContext extends SysAppContextInterface {
    uiElements?: UiElement[]
}

// short version of ComUiContextConfig
export interface UiElement {
    fk_property?: number,
    property_is_outgoing?: boolean,
    propertyFieldKey?: string, // TODO: merge the propertyFieldKey and propSetKey to fieldKey
    propSetKey?: string,
    fk_class_field?: number,
    class_field?: SysClassFieldInterface
    ord_num: number
}
